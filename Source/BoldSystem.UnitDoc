<!DOCTYPE DLUnitDoc>
<DLUnitDoc ExplicitSummary="true" Version="$Header: /BfD/Source/ObjectSpace/BORepresentation/BoldSystem.UnitDoc 28    02-08-15 10:37 Isje $">
   <Classes>
      <Class Name="EBoldAccessNullValue">
         <Summary>Raised when accessing the value of an attribute that is NULL</Summary>
         <Desc>This exception is raised when accessing the value of an attribute that is <InlineCode>NULL</InlineCode>.</Desc>
      </Class>
      <Class Name="EBoldFailure">
         <Methods>
            <Method Name="destroy">
               <Summary>Destructor</Summary>
               <Desc>Destructor</Desc>
            </Method>
         </Methods>
         <Properties>
            <Property Name="ReasonObject">
               <Summary>The reason for the failure</Summary>
               <Desc>Object describing the reason for the failure.</Desc>
            </Property>
         </Properties>
         <Summary>Raised because an operation was not allowed to be performed</Summary>
         <Desc>This exception is raised because an operation was not allowed to be performed. The <See Property="ReasonObject"/> property contains a description of the reason for the failure. This type of exception is raised when an operation fails due to a veto of some kind. A vetoing function, such as <See Class="TBoldMember" Method="MayModify"/>, does not itself raise an exception, but instead returns <InlineCode>false</InlineCode> to prohibit the operation. The <InlineCode>ReasonObject</InlineCode> is then used to say why the operation wasn't allowed.</Desc>
      </Class>
      <Class Name="EBoldOperationFailedForObjectList">
         <Methods>
            <Method Name="create">
               <Summary>Constructor</Summary>
               <Desc>Constructor</Desc>
            </Method>
            <Method Name="destroy">
               <Summary>Destructor</Summary>
               <Desc>Destructor</Desc>
            </Method>
         </Methods>
         <Properties>
            <Property Name="ObjectList">
               <Summary>Objects that caused the failure</Summary>
               <Desc>This object list contains the objects that caused the operation to fail.</Desc>
            </Property>
         </Properties>
         <Summary>Exception that holds a list of objects</Summary>
         <Desc>This exception is currently only raised when the <Jump Text="optimistic locking" ID="optimistic locking"/> fails. The objects that failed are in the <See Property="ObjectList"/> property.</Desc>
      </Class>
      <Class Name="TBoldAbstractController">
         <Methods>
            <Method Name="AssertIntegrity">
               <Summary>Assert integrity of links.</Summary>
               <Desc>It the case where <See Property="OwningMember"/> is an AssociationEnd, this method will assert it's integrity, i.e. check that the links are bidirectional, and that the link objects are correct. The method will return <InlineCode>true</InlineCode> if everything is OK, otherwise it will raise an exception. It only returns a value in order to be useable in an <InlineCode>Assert()</InlineCode>. </Desc>
            </Method>
            <Method Name="AssertedLocatorForID">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="Changed">
               <Summary>Call Changed on owning member.</Summary>
               <Desc>This method just calls <See Property="OwningMember"/>.<See Class="TBoldMember" Method="Changed"/>. It allows the subclasses to call the method, without making it public on <InlineCode>TBoldMember</InlineCode>.</Desc>
            </Method>
            <Method Name="DbFetchClassForMember">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="DbFetchOwningMember">
               <Summary>Call DbFetch on owning member.</Summary>
               <Desc>This method just calls <See Property="OwningMember"/>.<See Class="TBoldMember" Method="DbFetch"/>. It allows the subclasses to call the method, without making it public on <InlineCode>TBoldMember</InlineCode>.</Desc>
            </Method>
            <Method Name="EndModify">
               <Summary>Call EndModify on owning member.</Summary>
               <Desc>This method just calls <See Property="OwningMember"/>.<See Class="TBoldMember" Method="DbFetch"/>. It allows the subclasses to call the method, without making it public on <InlineCode>TBoldMember</InlineCode>.</Desc>
            </Method>
            <Method Name="GetControllerForMember">
               <Summary>Get controller for member.</Summary>
               <Desc>This method gets the <InlineCode>Controller</InlineCode> for member.</Desc>
            </Method>
            <Method Name="GetOwningMember">
               <Summary>Getter for property OwningMember</Summary>
               <Desc>This is the Get-method for <See Property="OwningMember"/>. It is overridden in the concrete subclasses.</Desc>
            </Method>
            <Method Name="GetStreamName">
               <Summary>Get stream name</Summary>
               <Desc></Desc>
            </Method>
            <Method Name="LocatorForID">
               <Summary>Get ensured locator for id.</Summary>
               <Desc>Use this method to get a ensured locator for <InlineCode>ObjectId</InlineCode> in the <See Class="TBoldSystem"/> <See Property="OwningMember"/> is part of.</Desc>
            </Method>
            <Method Name="NewValueInOptimisticLocking">
               <Summary>Get new value for member in optimistic locking area</Summary>
               <Desc>If the optimistic locking area doesn't already contain a value for <See Property="OwningMember"/> then a value is created and returned. If a value already exists, the function returns <InlineCode>nil</InlineCode></Desc>
            </Method>
            <Method Name="PreChange">
               <Summary>Call PreChange on owning member.</Summary>
               <Desc>This method just calls <See Property="OwningMember"/>.<See Class="TBoldMember" Method="PreChange"/>. It allows the subclasses to call the method, without making it public on <InlineCode>TBoldMember</InlineCode>.</Desc>
            </Method>
            <Method Name="ProxyInterface">
               <Summary>Bold-internal equivalent of QueryInterface</Summary>
               <Desc>Bold-internal equivalent of <InlineCode>QueryInterface</InlineCode></Desc>
            </Method>
            <Method Name="ReadFromStream">
               <Summary>Mostly Internal Method that will be removed when the old streaming is removed.</Summary>
               <Desc>
                  <Warning>Deprecated. Do not use.</Warning>
               </Desc>
            </Method>
            <Method Name="SaveToStream">
               <Summary>Mostly Internal Method that will be removed when the old streaming is removed.</Summary>
               <Desc>
                  <Warning>Deprecated. Do not use.</Warning>
               </Desc>
            </Method>
            <Method Name="StartModify">
               <Summary>Call StartModify on owning member.</Summary>
               <Desc>This method just calls <See Property="OwningMember"/>.<See Class="TBoldMember" Method="StartModify"/>. It allows the subclasses to call the method, without making it public on <InlineCode>TBoldMember</InlineCode>.</Desc>
            </Method>
            <Method Name="Unlink">
               <Summary>Remove Locator from referred locators in owning member.</Summary>
               <Desc>This method will remove <InlineCode>Locator</InlineCode> from the locators referred to by <See Property="OwningMember"/>. For a controller for a <See Class="TBoldObjectList"/> this means removing the locator from the list, for a <See Class="TBoldObjectReference"/> this means setting the reference to <InlineCode>nil</InlineCode>. The meaning of <InlineCode>Mode</InlineCode> is explained in <See Type="TBoldLinkUnlinkMode"/>.</Desc>
            </Method>
            <Method Name="LinkTo">
               <Summary>Add Locator from referred locators in owning member.</Summary>
               <Desc>>This method will add <InlineCode>Locator</InlineCode> to the locators referred to by <See Property="OwningMember"/>. For a controller for a <See Class="TBoldObjectList"/> this means adding the locator from the list, for a <See Class="TBoldObjectReference"/> this means setting the reference to <InlineCode>Locator</InlineCode>. The meaning of <InlineCode>Mode</InlineCode> is explained in <See Type="TBoldLinkUnlinkMode"/>.</Desc>
            </Method>
         </Methods>
         <Properties>
            <Property Name="OwningMember">
               <Summary>The member the controller is controlling</Summary>
               <Desc></Desc>
            </Property>
            <Property Name="StreamName">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
         </Properties>
         <Summary>Bold-internal class that implements the behaviour of single- and multilinks</Summary>
         <Desc>This is a Bold-internal class who's subclasses implement the behaviour of single- and multilinks.</Desc>
      </Class>
      <Class Name="TBoldAbstractObjectListController">
         <Methods>
            <Method Name="AddElement">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="AddLocator">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="AssignContentValue">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="AtTime">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="FreeContent">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetElement">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetLocator">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetLocatorByQualifiersAndSubscribe">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetObjectList">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="HandlesAtTime">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="IncludesElement">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="IncludesLocator">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="IndexOfElement">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="IndexOfLocator">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="InsertElement">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="InsertLocator">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="MakeDbCurrent">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="PrepareClear">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="ProxyClass">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="SetElement">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="SetLocator">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
         </Methods>
         <Properties>
            <Property Name="OwningObjectList">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
         </Properties>
         <Summary>Bold-internal class that implements  the behaviour of object lists.</Summary>
         <Desc>Bold-internal class that implements the behaviour of object lists.</Desc>
      </Class>
      <Class Name="TBoldAbstractObjectList_Proxy">
         <Methods>
            <Method Name="GetAbstractObjectListController">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
         </Methods>
         <Properties>
            <Property Name="AbstractListController">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
         </Properties>
         <Summary></Summary>
         <Desc></Desc>
      </Class>
      <Class Name="TBoldAbstractObjectReferenceController">
         <Methods>
            <Method Name="AssignContentValue">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="ControllerForLinkRole">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="ControllerForMainRole">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="Create">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetLocator">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetOwningMember">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="MakeDbCurrent">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="MayUpdate">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="OtherEndControllerForLinkObject">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="PreDiscard">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="ProxyClass">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="SetLocator">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
         </Methods>
         <Properties>
            <Property Name="OwningReference">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
         </Properties>
         <Summary>Bold-internal class that implements the behaviour of single links.</Summary>
         <Desc>Bold-internal class that implements the behaviour of single links.</Desc>
      </Class>
      <Class Name="TBoldAbstractObjectReference_Proxy">
         <Methods>
            <Method Name="GetReferenceController">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
         </Methods>
         <Properties>
            <Property Name="ReferenceController">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
         </Properties>
         <Summary></Summary>
         <Desc></Desc>
      </Class>
      <Class Name="TBoldAbstractOldValueHandler">
         <Methods>
            <Method Name="CopyMemberToValueSpace">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="CopyObjectToValueSpace">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="EnsuredValueInValueSpace">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetOldValues">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="MemberPersistenceStatePreChange">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="MemberValuePreChange">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="NewValueInValueSpace">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="ObjectExistenceChange">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="ObjectExistencePersistenceStateChange">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
         </Methods>
         <Properties>
            <Property Name="OldValues">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
         </Properties>
         <Summary>Bold-internal</Summary>
         <Desc>Bold-internal</Desc>
      </Class>
      <Class Name="TBoldAbstractOptimisticLockHandler">
         <Methods>
            <Method Name="AddOptimisticLocks">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="EnsureEnclosure">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetOldValues">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
         </Methods>
         <Properties>
            <Property Name="OldValues">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
         </Properties>
         <Summary></Summary>
         <Desc></Desc>
      </Class>
      <Class Name="TBoldAbstractPessimisticLockHandler">
         <Methods>
            <Method Name="EnsureLocks">
               <Summary></Summary>
               <Desc>This method is called automatically before update to check with the Lock Manager server that the client still holds the locks it should. There is normally no need to call it directly. </Desc>
               <SeeAlso><Jump ID="Mech_CMS"/></SeeAlso>
            </Method>
            <Method Name="LockElement">
               <Summary></Summary>
               <Desc>Requests the required locks for the element. If the call returns <InlineCode>true</InlineCode>, the element is then allowed to be modified. If the call returns <InlineCode>false</InlineCode>, the required locks could not be obtained. </Desc>
               <SeeAlso><Jump ID="Mech_CMS"/></SeeAlso>
            </Method>
            <Method Name="ReleaseUnneededRegions">
               <Summary></Summary>
               <Desc>Releases the locks that the client holds, that it does not need. Locks for elements that are dirty, i.e. where the client holds a modified state, are kept. This method also releases the so-called exclusive database lock. </Desc>
               <SeeAlso><Jump ID="Mech_CMS"/></SeeAlso>
            </Method>
         </Methods>
         <Summary></Summary>
         <Desc>The pessimistic lock handler defines methods for requesting and releasing locks for domain elements.</Desc>
      </Class>
      <Class Name="TBoldAbstractRegionFactory">
         <Methods>
            <Method Name="GetRegionsForElement">
               <Summary>The regions that the element is part of.</Summary>
               <Desc>The regions that the element is part of.</Desc>
            </Method>
         </Methods>
         <Properties>
            <Property Name="System">
               <Summary>Bold system that the region factory is connected to.</Summary>
               <Desc>Bold system that the region factory is connected to.</Desc>
            </Property>
         </Properties>
         <Summary>Provides the interface definition to a region factory. </Summary>
         <Desc>Provides the interface definition to a region factory. This class is internal to the implementation of pessimistic locking.</Desc>
      </Class>
      <Class Name="TBoldAbstractSystemPersistenceHandler">
         <Events>
            <Event Name="OnPreUpdate">
               <Summary>Called before data is written to persistent storage in an UpdateDatabase operation.</Summary>
               <Desc>This event is called before data is written to persistent storage in an <InlineCode>UpdateDatabase</InlineCode> operation. Do not set this property manually, instead use <See Class="TBoldSystemHandle" Event="OnPreUpdate"/>.</Desc>
            </Event>
         </Events>
         <Methods>
            <Method Name="EndFetchForAll">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="EndUpdateForAll">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="EnsureEnclosure">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="FetchClass">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="FetchLinksWithObjects">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="FetchList">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="FetchMember">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="FetchObjectById">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetAllInClassWithSQL">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetAllWithCondition">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetTimeForTimestamp">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetTimeStampOfLatestUpdate">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetTimestampForTime">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="StartUpdateForAll">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="UpdateDatabaseWithList">
               <Summary>Internal use</Summary>
               <Desc>Abstract declaration of UpdateDatabaseWithList.</Desc>
            </Method>
         </Methods>
         <Properties>
            <Property Name="OnPreUpdate">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="TimeStampOfLatestUpdate">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
         </Properties>
         <Summary>Bold-internal</Summary>
         <Desc>Bold-internal</Desc>
      </Class>
      <Class Name="TBoldAbstractTransactionHandler">
         <Methods>
            <Method Name="CommitTransaction">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetTransactionMode">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetTransactionState">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="RollbackTransaction">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="StartTransaction">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
         </Methods>
         <Properties>
            <Property Name="TransactionMode">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="TransactionState">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
         </Properties>
         <Summary>Bold-internal</Summary>
         <Desc>Bold-internal</Desc>
      </Class>
      <Class Name="TBoldAbstractUndoHandler">
         <Methods>
            <Method Name="ApplytranslationList">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="DeleteObject">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetControllerForMember">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="HandleMember">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="HandleObject">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="PrepareUpdate">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
         </Methods>
         <Summary>Bold-internal</Summary>
         <Desc>Bold-internal</Desc>
      </Class>
      <Class Name="TBoldAttribute">
         <Methods>
            <Method Name="Assign">
               <Summary>Overridden from <See Class="TBoldElement" Method="Assign"/></Summary>
               <Desc>Overridden from <See Class="TBoldElement" Method="Assign"/></Desc>
            </Method>
            <Method Name="AssignContentValue">
               <Summary>Assigns the internal value</Summary>
               <Desc>This is an internal assigning method. It sets the internal data value of the attribute only.</Desc>
            </Method>
            <Method Name="AssignValue">
               <Summary>Assigns the internal state</Summary>
               <Desc>This is an internal assigning method. It sets the internal data value of the attribute and the persistence state from the <InlineCode>source</InlineCode> value.</Desc>
            </Method>
            <Method Name="CanSetToNull">
               <Summary></Summary>
               <Desc>Returns <InlineCode>True</InlineCode> if the member may be set to <InlineCode>Null</InlineCode>. A programmer can disallow reading a member by subscribing to the <See Const="bqMaySetToNull"/> query. If a <InlineCode>Subscriber</InlineCode> is passed to the function, subscriptions will be placed to notify when the result of <InlineCode>MaySetToNull</InlineCode> may have changed. The mode information for the attribute may indicate that the attribute is not allowed to be set to null. </Desc>
            </Method>
            <Method Name="CompareToAs">
               <Summary>Overriddden from <See Class="TBoldElement" Method="CompareToAs"/></Summary>
               <Desc>Overriddden from <See Class="TBoldElement" Method="CompareToAs"/></Desc>
            </Method>
            <Method Name="DefaultSubscribe">
               <Summary>Subscribes to default events on the attribute.</Summary>
               <Desc>Subscribes to default events on the attribute. This will give a subscription on <InlineCode>beValueChanged</InlineCode>.</Desc>
               <SeeAlso><Jump ID="Mech_Subscription" Text="Subscriptions"/></SeeAlso>
            </Method>
            <Method Name="DoSetInitialValue">
               <Summary>Bold-internal</Summary>
               <Desc>Bold-internal</Desc>
            </Method>
            <Method Name="EitherIsNull">
               <Summary>True if IsNull is true for either of the arguments.</Summary>
               <Desc><InlineCode>True</InlineCode> if <See Property="IsNull"/> is <InlineCode>true</InlineCode> for either of the arguments.</Desc>
            </Method>
            <Method Name="EnsureNotNull">
               <Summary>Called by subclasses to guard against NULL values.</Summary>
               <Desc>Called by subclasses to guard against <InlineCode>NULL</InlineCode> values. If the attribute is <InlineCode>NULL</InlineCode> the exception <See Class="EBoldAccessNullValue"/> is raised.</Desc>
            </Method>
            <Method Name="FormatFailure">
               <Summary>Convenience function for subclasses for setting the failure reason.</Summary>
               <Desc>Convenience function for subclasses for setting the failure reason. See <See Routine="SetBoldLastFailureReason"/>.</Desc>
            </Method>
            <Method Name="GetBoldAttributeRTInfo">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetContentIsNull">
               <Summary>Get-method for ContentIsNull property</Summary>
               <Desc>Get-method for <See Property="ContentIsNull"/> property</Desc>
            </Method>
            <Method Name="GetElementTypeInfoForType">
               <Summary></Summary>
               <Desc>See <See Class="TBoldMember" Method="GetElementTypeInfoForType"/></Desc>
            </Method>
            <Method Name="GetIsNull">
               <Summary></Summary>
               <Desc>Get-method for the <See Property="IsNull"/> property</Desc>
            </Method>
            <Method Name="GetStreamName">
               <Summary>Overrides TBoldMember.GetStreamName</Summary>
               <Desc>Overrides <See Class="TBoldMember" Method="GetStreamName"/></Desc>
            </Method>
            <Method Name="IsEqualToValue">
               <Summary>Overrides TBoldMember.IsEqualToValue.</Summary>
               <Desc>Overrides <See Class="TBoldMember" Method="IsEqualToValue"/>.</Desc>
            </Method>
            <Method Name="MakeDbCurrent">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="NullBiggest">
               <Summary>Internal convenience method for comparing NULL values.</Summary>
               <Desc>Internal convenience method for comparing NULL values. NULL is considered bigger than any other value.</Desc>
            </Method>
            <Method Name="NullFailure">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="NullSmallest">
               <Summary>Internal convenience method for comparing NULL values.</Summary>
               <Desc>Internal convenience method for comparing NULL values. NULL is considered smaller than any other value.</Desc>
            </Method>
            <Method Name="ProxyInterface">
               <Summary>Overrides TBoldDomainElement.ProxyInterface.</Summary>
               <Desc>Overrides <See Class="TBoldDomainElement" Method="ProxyInterface"/>.</Desc>
            </Method>
            <Method Name="ReadFromStream">
               <Summary>Overrides TBoldMember.ReadFromStream.</Summary>
               <Desc>Overrides <See Class="TBoldMember" Method="ReadFromStream"/>.</Desc>
            </Method>
            <Method Name="RecycleValue">
               <Summary>Bold-internal</Summary>
               <Desc>Bold-internal</Desc>
            </Method>
            <Method Name="SaveToStream">
               <Summary>Overrides TBoldMember.SaveToStream</Summary>
               <Desc>Overrides <See Class="TBoldMember" Method="SaveToStream"/>.</Desc>
            </Method>
            <Method Name="SetContentToNull">
               <Summary>Sets the internal data value to NULL.</Summary>
               <Desc>Sets the internal data value to NULL. Used by subclasses and persistence mechanisms. To set an attribute to NULL normally, use <See Method="SetToNull"/>.</Desc>
            </Method>
            <Method Name="SetEmptyValue">
               <Summary>Set the attribute to an 'empty' value</Summary>
               <Desc> All attributes (descendents of <See Class="TBoldAttribute"/>), such as <See Class="TBAString"/>, should implement this method and set the value of the attribute to an 'empty' value, such as an empty string or zero. This is to support the assign operation with no source argument. </Desc>
            </Method>
            <Method Name="SetToNonNull">
               <Summary>Set the attribute to a non-null value.</Summary>
               <Desc> This method should only be called by descendents of <See Class="TBoldAttribute"/>, such as <See Class="TBAString"/>, in the implementation of the Set-method(s) when the attribute is set to a non-NULL value. </Desc>
            </Method>
            <Method Name="SetToNull">
               <Summary>Sets the attribute to the special value Null.</Summary>
               <Desc>Sets the attribute to the special value Null. This requires that <InlineCode>AllowNull</InlineCode> for the attribute is <InlineCode>True</InlineCode> in the model. See also <See Method="CanSetToNull"/>. </Desc>
               <SeeAlso><Jump ID="mech_modelinformation"/></SeeAlso>
            </Method>
            <Method Name="SubscribeToStringRepresentation">
               <Summary>Overrides TBoldElement.SubscribeToStringRepresentation</Summary>
               <Desc>This is equivalent to calling <See Method="DefaultSubscribe"/> unless overridden by a concrete subclass.</Desc>
               <SeeAlso><Jump ID="Mech_Subscription" Text="Subscriptions"/></SeeAlso>
            </Method>
         </Methods>
         <Properties>
            <Property Name="BoldAttributeRTInfo">
               <Summary></Summary>
               <Desc>This property is the same as <See Class="TBoldMember" Property="BoldMemberRTInfo" Text="BoldMemberRTInfo"/>, but downcasted to <InlineCode>TBoldAttributeRTInfo</InlineCode>. </Desc>
            </Property>
            <Property Name="ContentIsNull">
               <Summary>Bold-internal check for NULL</Summary>
               <Desc>Bold-internal variant of <See Property="IsNull"/> </Desc>
            </Property>
            <Property Name="IsNull">
               <Summary>If the attribute has the special 'empty' value NULL.</Summary>
               <Desc>Note that Null is a special value and that it in most cases is an error to access the basic representation of the attribute, e.g. <InlineCode>AsInteger</InlineCode>, if <InlineCode>IsNull</InlineCode> is <InlineCode>True</InlineCode>.
                  <P>An attribute can be set to <InlineCode>Null</InlineCode> with <See Method="SetToNull"/>. An attribute is set to a non-Null value by setting the value.</P>
               </Desc>
            </Property>
         </Properties>
         <Summary>Superclass to all attribute classes in Bold</Summary>
         <Desc>Attributes are used for two different purposes.
            <P>First of all they are used to be attributes of business objects (subclasses of <See Class="TBoldObject"/>). In this role they can be persistent, or transient, they can also be derived (calculated). When used as the attribute of a business object, the property <See Property="BoldAttributeRTInfo"/> will always be assigned, and indicate the role of the attribute in the model.</P>
            <P><InlineCode>TBoldAttribute</InlineCode> can also be created independent of a business object. This happens frequently when OCL expressions are evaluated, and the result is a calculated value (concatenation of two strings for example). It is also allowed to call the constructor of a concrete subclass of <InlineCode>TBoldAttribute</InlineCode>. Often however when attributes are used stand-alone, it is more convenient to use the <See Class="TBoldVariableHandle"/>, or the <See Class="TBoldMemberFactory"/> to create the attribute-object.</P>
            <P>Every subclass of <InlineCode>TBoldAttribute</InlineCode> has its own internal data, and usually it has an access-property to read and write the contents of the attribute object in the native format. Most attribute types also implement the <See Class="TBoldElement" Property="AsString" Text="AsString"/> property to allow reading and writing the string representation of the attribute.</P>
            <P>To subclass <InlineCode>TBoldAttribute</InlineCode>, the easiest way is to use the Attribute-wizard found in the Bold menu in the Delphi/C++Builder IDE.</P>
         </Desc>
      </Class>
      <Class Name="TBoldAttribute_Proxy">
         <Methods>
            <Method Name="AssignContentValue">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetContentIsNull">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetProxedAttribute">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="SetContentToNull">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
         </Methods>
         <Properties>
            <Property Name="ProxedAttribute">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
         </Properties>
         <Summary></Summary>
         <Desc></Desc>
      </Class>
      <Class Name="TBoldFailureReason">
         <Methods>
            <Method Name="CreateFmt">
               <Summary>Constructor with Format arguments</Summary>
               <Desc>The <InlineCode>Reason</InlineCode> and <InlineCode>args</InlineCode> arguments work the same way as for the <InlineCode>Format</InlineCode> function. <InlineCode>Originator</InlineCode> is domain element that caused the failure, and may be <InlineCode>nil</InlineCode>.</Desc>
            </Method>
            <Method Name="GetException">
               <Summary>The class of the exception to raise in BoldRaiseLastFailure.</Summary>
               <Desc>Subclasses may override this method to provide the class of the exception to raise when <InlineCode>BoldRaiseLastFailure</InlineCode> is called.</Desc>
            </Method>
            <Method Name="ReceiveOriginatorDestroy">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="create">
               <Summary>Constructor with reason and originator</Summary>
               <Desc>Constructor with reason and originator. <InlineCode>Reason</InlineCode> is a string describing the failure. <InlineCode>Originator</InlineCode> is the domain element that caused the failure, and may be <InlineCode>nil</InlineCode>.</Desc>
            </Method>
            <Method Name="destroy">
               <Summary>Destructor</Summary>
               <Desc>Destructor</Desc>
            </Method>
         </Methods>
         <Properties>
            <Property Name="MessageFormatStr">
               <Summary>BoldRaiseLastFailure uses this message for building the exception message.</Summary>
               <Desc><See Routine="BoldRaiseLastFailure"/> uses this message for building the exception message.
                  <P>The actual message of the exception that will be raised will be created by sending property to <InlineCode>format</InlineCode> with the following arguments: 
                     <Code>format(MessageFormatString, [OriginatorName, MethodName, Message]);</Code>
                  </P>
               </Desc>
            </Property>
            <Property Name="Originator">
               <Summary>Domain element that caused the failure.</Summary>
               <Desc>Domain element that caused the failure.</Desc>
            </Property>
            <Property Name="Reason">
               <Summary>String describing the failure</Summary>
               <Desc>String describing the failure</Desc>
            </Property>
         </Properties>
         <Summary>Instances of this class contain information about why a certain operation was not permitted.</Summary>
         <Desc>Instances of this class contain information about why a certain operation was not permitted. </Desc>
      </Class>
      <Class Name="TBoldList">
         <Methods>
            <Method Name="Add">
               <Summary>Adds an element to the list.</Summary>
               <Desc>Elements will be added at the end of the list</Desc>
            </Method>
            <Method Name="AddElement">
               <Summary>Internal method for adding an element to the list, implemented by subclasses.</Summary>
               <Desc>Internal method for adding an element to the list, implemented by subclasses.</Desc>
            </Method>
            <Method Name="AddList">
               <Summary>Adds all the elements in List to self.</Summary>
               <Desc>Adds all the elements in <InlineCode>List</InlineCode> to self.
                  <P>If the list is <See Class="TBoldElement" Property="Mutable" Text="immutable"/>, the call will fail with an exception.</P>
               </Desc>
            </Method>
            <Method Name="AddNew">
               <Summary>Creates an adds an element to the list.</Summary>
               <Desc>If the list allows adding new elements, an element of the list's type will be created and added to the list.
                  <P>If adding an element is not allowed an exception and a <InlineCode>BoldFailure</InlineCode> will be raised.</P>
                  <P>Reasons for failure includes that the list is <See Class="TBoldElement" Property="Mutable" Text="immutable"/> or the type of the requested element is abstract.</P>
               </Desc>
            </Method>
            <Method Name="AddToStrings">
               <Summary>Adds the contents of the list to a TStrings.</Summary>
               <Desc> Will add the elements and their string representations to the <InlineCode>TStrings S</InlineCode>.</Desc>
            </Method>
            <Method Name="AllocateData">
               <Summary>Bold-internal</Summary>
               <Desc>Bold-internal</Desc>
            </Method>
            <Method Name="AssignValue">
               <Summary>Overrides TBoldMember.AssignValue</Summary>
               <Desc>Overrides <See Class="TBoldMember" Method="AssignValue"/>.</Desc>
            </Method>
            <Method Name="CanClear">
               <Summary>Indicates if it is allowed to clear the list.</Summary>
               <Desc>You can make <InlineCode>MayClear</InlineCode> return <InlineCode>false</InlineCode>, and thus prohibit <InlineCode>Clear</InlineCode> on a <InlineCode>TBoldList</InlineCode>, by subscribing to the <See Const="bqMayClear"/> query and returning <InlineCode>false</InlineCode>. </Desc>
            </Method>
            <Method Name="CanInsert">
               <Summary>Indicates if inserting the element is allowed.</Summary>
               <Desc>Returns <InlineCode>True</InlineCode> if <InlineCode>Element</InlineCode> may be inserted in position <InlineCode>index</InlineCode> in the list. A programmer can disallow <See Method="Insert"/> by subscribing to the <See Const="bqMayInsert"/> query. If a <InlineCode>Subscriber</InlineCode> is passed to the function, subscriptions will be placed to notify when the result of <InlineCode>MayInsert</InlineCode> may have changed. </Desc>
            </Method>
            <Method Name="CanMove">
               <Summary>Indicates f moving an element is allowed.</Summary>
               <Desc>Returns <InlineCode>True</InlineCode> if the element in position <InlineCode>CurIndex</InlineCode> may be moved to position <InlineCode>NewIndex</InlineCode> in the list. A programmer can disallow <See Method="Move"/> by subscribing to the <See Const="bqMayMove"/> query. If a <InlineCode>Subscriber</InlineCode> is passed to the function, subscriptions will be placed to notify when the result of <InlineCode>MayMove</InlineCode> may have changed. </Desc>
            </Method>
            <Method Name="CanRemove">
               <Summary>Indicates if removing an element is allowed.</Summary>
               <Desc>Returns <InlineCode>True</InlineCode> if the element in position <InlineCode>index</InlineCode> may be removed from the list. A programmer can disallow <See Method="Remove"/> by subscribing to the <See Const="bqMayRemove"/> query. If a <InlineCode>Subscriber</InlineCode> is passed to the function, subscriptions will be placed to notify when the result of <InlineCode>MayRemove</InlineCode> may have changed. </Desc>
            </Method>
            <Method Name="CanSet">
               <Summary>Indicates if replacing the element at a given position is allowed.</Summary>
               <Desc>Returns <InlineCode>True</InlineCode> if the element in position <InlineCode>index</InlineCode> in the list may be replaced by <InlineCode>Item</InlineCode>. This corresponds to assigning to the <See Property="Elements"/> array property. A programmer can disallow this by subscribing to the <See Const="bqMayReplace"/> query. If a <InlineCode>Subscriber</InlineCode> is passed to the function, subscriptions will be placed to notify when the result of <InlineCode>MayReplace</InlineCode> may have changed. </Desc>
            </Method>
            <Method Name="Clear">
               <Summary>Empties the list</Summary>
               <Desc>Clear removes all elements from the list.</Desc>
            </Method>
            <Method Name="CreateNew">
               <Summary>Bold-internal</Summary>
               <Desc>Bold-internal. Used by <See Method="AddNew"/>.</Desc>
            </Method>
            <Method Name="DefaultSubscribe">
               <Summary>Overrides TBoldElement.DefaultSubscribe.</Summary>
               <Desc><InlineCode>DefaultSubscribe</InlineCode> on <InlineCode>TBoldList</InlineCode> will subscribe to the events <InlineCode>beItemAdded</InlineCode>, <InlineCode>beItemDeleted</InlineCode>, <InlineCode>beItemReplaced</InlineCode> and <InlineCode>beOrderChanged</InlineCode>.</Desc>
               <SeeAlso><Jump ID="Mech_Subscription" Text="Subscriptions"/></SeeAlso>
            </Method>
            <Method Name="Destroy">
               <Summary>Destructor</Summary>
               <Desc>Destructor</Desc>
            </Method>
            <Method Name="DuplicateControl">
               <Summary>Bold-internal convenience method</Summary>
               <Desc>Bold-internal convenience method</Desc>
            </Method>
            <Method Name="EnsureCanCreateNew">
               <Summary>Bold-internal convenience method</Summary>
               <Desc>Bold-internal convenience method</Desc>
            </Method>
            <Method Name="EnsureRange">
               <Summary>Optimized EnsureCurrent</Summary>
               <Desc> If some of the elements in the range are invalid, they will be made current. This is efficient, as it will fetch all objects at once, rather than one at a time. </Desc>
            </Method>
            <Method Name="FreeData">
               <Summary>Bold-internal</Summary>
               <Desc>Bold-internal</Desc>
            </Method>
            <Method Name="GetAsList">
               <Summary>Overrides TBoldElement.GetAsList</Summary>
               <Desc> ResultList's value will be the list.</Desc>
            </Method>
            <Method Name="GetCanCreateNew">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetController">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetCount">
               <Summary>Get-method for the Count property.</Summary>
               <Desc>Get-method for the <See Property="Count"/> property.</Desc>
            </Method>
            <Method Name="GetDuplicateMode">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetElement">
               <Summary>Get-method for the Element property</Summary>
               <Desc>Get-method for the <InlineCode>Element</InlineCode> property. Implemented by subclasses.</Desc>
            </Method>
            <Method Name="GetStringRepresentation">
               <Summary>Overrides TBoldElement.GetStringRepresentation</Summary>
               <Desc>Overrides <See Class="TBoldElement" Method="GetStringRepresentation"/>.</Desc>
            </Method>
            <Method Name="Includes">
               <Summary>True if Element is in the list</Summary>
               <Desc>This function returns <InlineCode>true</InlineCode> if <InlineCode>Element</InlineCode>is a member of the list. <InlineCode>Includes</InlineCode> may be considerably faster than checking <See Method="IndexOf"/><InlineCode> <> -1</InlineCode> as it can make smarter use of existing indexes.</Desc>
            </Method>
            <Method Name="IncludesElement">
               <Summary>Internal method for testing if an element is in the list, implmented by subclasses.</Summary>
               <Desc>Internal method for testing if an element is in the list, implmented by subclasses.</Desc>
            </Method>
            <Method Name="IndexOf">
               <Summary>Return the position of Item in the list.</Summary>
               <Desc>Return the position of <InlineCode>Item</InlineCode> in the list, or <InlineCode>-1</InlineCode> if <InlineCode>item</InlineCode> is not in the list. If there are multiple occurences of <InlineCode>Item</InlineCode>, <InlineCode>IndexOf</InlineCode> will return the index of the first occurence. </Desc>
            </Method>
            <Method Name="IndexOfElement">
               <Summary>Internal method for getting the index of an element in the list, implemented by subclasses.</Summary>
               <Desc>Internal method for getting the index of an element in the list, implemented by subclasses.</Desc>
            </Method>
            <Method Name="InitializeMember">
               <Summary>Overrides TBoldMember.InitializeMember</Summary>
               <Desc>Overrides <See Class="TBoldMember" Method="InitializeMember"/></Desc>
            </Method>
            <Method Name="Insert">
               <Summary>Inserts element in a given position in the list.</Summary>
               <Desc>Inserts <InlineCode>element</InlineCode> in a position <InlineCode>index</InlineCode>in the list.</Desc>
            </Method>
            <Method Name="InsertElement">
               <Summary>Internal method for inserting an element, implemented by subclasses.</Summary>
               <Desc>Internal method for inserting an element, implemented by subclasses.</Desc>
            </Method>
            <Method Name="InsertNew">
               <Summary>Creates a new element and inserts it into the list</Summary>
               <Desc>If the list type's element type is a concrete type, an element of this type will be created and inserted in the list. </Desc>
            </Method>
            <Method Name="InternalAddNew">
               <Summary>Internal method for adding a new element to the list, implemented by subclasses.</Summary>
               <Desc>Internal method for adding a new element to the list, implemented by subclasses.</Desc>
            </Method>
            <Method Name="Move">
               <Summary>Changes the position of an element in the list.</Summary>
               <Desc>Moves the element with index <InlineCode>CurIndex</InlineCode> to the position <InlineCode>NewIndex</InlineCode> in the list. Elements between <InlineCode>CurIndex</InlineCode> and <InlineCode>NewIndex</InlineCode> will have their index shifted by one.</Desc>
            </Method>
            <Method Name="PrepareClear">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="Remove">
               <Summary>Removes the element from the list</Summary>
               <Desc><InlineCode>Element</InlineCode> is removed from the list. If <InlineCode>Element</InlineCode> is not a member of the list an exception is raised.</Desc>
            </Method>
            <Method Name="RemoveByIndex">
               <Summary>Removes the element at a given position from the list.</Summary>
               <Desc>Removes the element at position <InlineCode>Index</InlineCode> from the list. If <InlineCode>Index</InlineCode> is outside the list the result is undefined.</Desc>
            </Method>
            <Method Name="SetDuplicateMode">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="SetElement">
               <Summary>Set-method for the Elements property.</Summary>
               <Desc>Set-method for the <InlineCode>Elements</InlineCode> property. Implemented by subclasses.</Desc>
            </Method>
            <Method Name="Sort">
               <Summary>Sorts the list</Summary>
               <Desc>Sorts the elements in the list according to <InlineCode>CompareFunc</InlineCode>.
                  <Note>For an ordered association, this actually changes the internal order between the objects. So, for display purposes, make a copy of the list and sort and display the copy instead.</Note>
               </Desc>
            </Method>
            <Method Name="ToStrings">
               <Summary>Makes the TStrings S contain the elements in the list and their string representations Representation.</Summary>
               <Desc>Makes the TStrings <InlineCode>S</InlineCode> contain the elements in the list and their string representations <InlineCode>Representation</InlineCode>. The difference between this method and <See Method="AddToStrings"/> is that it will remove any existing data in <InlineCode>S</InlineCode>. </Desc>
            </Method>
            <Method Name="ToStringsWithNil">
               <Summary>Same as ToStrings, except that it adds a nil element, with NilString, as the first element in <InlineCode>S</InlineCode>.</Summary>
               <Desc>Same as <See Method="ToStrings"/>, except that it adds a nil element, with <InlineCode>NilString</InlineCode>, as the first element in <InlineCode>S</InlineCode>.</Desc>
            </Method>
         </Methods>
         <Properties>
            <Property Name="CanCreateNew">
               <Summary>If CreateNew is allowed</Summary>
               <Desc>Returns <InlineCode>True</InlineCode> if <See Method="CreateNew"/> is allowed. Reasons for it not being allowed includes: The type of the elements is unknown, or abstract; the list is read-only.</Desc>
            </Property>
            <Property Name="Count">
               <Summary>Number of elements in the list.</Summary>
               <Desc>Number of elements in the list.</Desc>
            </Property>
            <Property Name="DuplicateMode">
               <Summary>When an element that is already in the list is added, DuplicateMode determines how the list will behave.</Summary>
               <Desc>When an element that is already in the list is added, <InlineCode>DuplicateMode</InlineCode> determines how the list will behave.
                  <UL>
                     <LI><InlineCode>bldmAllow</InlineCode> - The list allows elements to appear in the list more than once</LI>
                     <LI><InlineCode>bldmMerge</InlineCode> - Nothing will happen when adding an element that is already in the list</LI>
                     <LI><InlineCode>bldmError</InlineCode> - It is an error to add an element that is already in the list</LI>
                  </UL>
               </Desc>
            </Property>
            <Property Name="Elements">
               <Summary></Summary>
               <Desc>The default property of the list. </Desc>
            </Property>
            <Property Name="ListController">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
         </Properties>
         <Summary></Summary>
         <Desc> </Desc>
      </Class>
      <Class Name="TBoldListController">
         <Methods>
            <Method Name="AddElement">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="Create">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="CreateNew">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetBoldSystem">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetCanCreateNew">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetCount">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetElement">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetOwningMember">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetStringrepresentation">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="IncludesElement">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="IndexOfElement">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="InsertElement">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="Move">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="RemoveByIndex">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="SetElement">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
         </Methods>
         <Properties>
            <Property Name="BoldSystem">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="CanCreateNew">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="Count">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="OwningList">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
         </Properties>
         <Summary></Summary>
         <Desc></Desc>
      </Class>
      <Class Name="TBoldLocatorHashIndex">
         <Methods>
            <Method Name="FindLocatorByLocator">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="HashItem">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="ItemAsLocator">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="Match">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
         </Methods>
         <Summary></Summary>
         <Desc></Desc>
      </Class>
      <Class Name="TBoldLocatorListTraverser">
         <Methods>
            <Method Name="GetLocator">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
         </Methods>
         <Properties>
            <Property Name="locator">
               <Summary></Summary>
               <Desc>While traversing a <InlineCode>LocatorList</InlineCode> the <InlineCode>Locator</InlineCode>-property will point to the current locator. Call the <InlineCode>Next</InlineCode>-operation to move on in the list. </Desc>
            </Property>
         </Properties>
         <Summary></Summary>
         <Desc>Objects of this class can be used to traverse the locatorlist of a <InlineCode>TBoldSystem</InlineCode>.
            <P>Get hold of a traverser by calling <InlineCode>aBoldSystem.Locators.CreateTraverser</InlineCode>. This object must be freed when you are done with it. You can have multiple traversers traversing the same list at the same time.</P>
         </Desc>
      </Class>
      <Class Name="TBoldMember">
         <Methods>
            <Method Name="AdjustOldValues">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="AssignContentValueFromElement">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="AtTime">
               <Summary></Summary>
               <Desc>Returns the member as it looked at the time point identified by the Time time stamp.
                  <Note>This feature is only available in the <Jump ID="mech_OVE" Text="Object Versioning Extension"/> to Bold for Delphi.</Note>
               </Desc>
            </Method>
            <Method Name="CalculateDerivedMemberWithExpression">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="CanModify">
               <Summary>If the member is allowed to be modified</Summary>
               <Desc>Returns <InlineCode>True</InlineCode> if the member is allowed to be modified. A programmer can disallow modify either by overriding the virtual <InlineCode>MayModify</InlineCode> function or subscribing to the <InlineCode>bqMayModify</InlineCode> query. </Desc>
            </Method>
            <Method Name="CanRead">
               <Summary>Indicates if the value of the member may be read</Summary>
               <Desc>Returns <InlineCode>True</InlineCode> if the value of the member may be read. A programmer can disallow reading a member by subscribing to the <InlineCode>bqMayRead</InlineCode> query. If a <InlineCode>Subscriber</InlineCode> is passed to the function, subscriptions will be placed to notify when the result of <InlineCode>MayRead</InlineCode> may have changed. </Desc>
            </Method>
            <Method Name="CanUpdate">
               <Summary>If the member is allowed to be updated</Summary>
               <Desc>Returns <InlineCode>True</InlineCode> if the member is allowed to be updated. A programmer can disallow update either by overriding the virtual <InlineCode>MayUpdate</InlineCode> function or subscribing to the <InlineCode>bqMayUpdate</InlineCode> query. </Desc>
            </Method>
            <Method Name="Changed">
               <Summary>Called internally when the value of the member has changed.</Summary>
               <Desc>This method shall be called whenever the contents (technical value) of the member has changed. The <InlineCode>Event</InlineCode> and <InlineCode>Args</InlineCode> parameters should contain the values corresponding to a call to <See Method="SendExtendedEvent"/>. The event will be sent unless <See Property="BoldPersistenceState"/> is <InlineCode>bvpsInvalid</InlineCode>.
                  <P>It is important that all subclasses to <InlineCode>TBoldMember</InlineCode>, i.e. custom attributes call this method.</P>
               </Desc>
            </Method>
            <Method Name="Clone">
               <Summary>Makes a copy of the member.</Summary>
               <Desc>Makes a copy of the member. The resulting member will be of the same type and will contain the same value as the original. </Desc>
            </Method>
            <Method Name="CloneDerivationSubscriptions">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="CloneIfPossible">
               <Summary>This will create a clone of the member and copy the contents.</Summary>
               <Desc>This will create a clone of the member and copy the contents.</Desc>
            </Method>
            <Method Name="CompleteModify">
               <Summary>Occurs directly after the member is modified.</Summary>
               <Desc>Override this method to add behaviour after a member is modified. The default implementation is empty. </Desc>
               <SeeAlso><See Type="TBoldValuePersistenceState"/></SeeAlso>
            </Method>
            <Method Name="CompleteUpdate">
               <Summary>Virtual method that is called after a member has been updated in the persistent storage</Summary>
               <Desc>Override this method to add behaviour after a member is updated in the persistent storage. The default implementation is empty.
                  <P></P>
               </Desc>
            </Method>
            <Method Name="Create">
               <Summary>Creates an element that is not part of a Bold object.</Summary>
               <Desc>Contructor for member. Will create a member that is freestanding from any Bold object or system. </Desc>
            </Method>
            <Method Name="CreateWithTypeInfo">
               <Summary>Constructor with Bold type information</Summary>
               <Desc>As <InlineCode>TBoldMember</InlineCode> is an abstract class, <InlineCode>CreateWithTypeInfo</InlineCode> should not be called directly on <InlineCode>TBoldMember</InlineCode>, but on one of its concrete subclasses. Use this constructor instead of <InlineCode>Create</InlineCode> to explicitly specify the type info for the member. This is useful for creating members with types that are not in the default BoldSystem. </Desc>
            </Method>
            <Method Name="Destroy">
               <Summary>Destructor</Summary>
               <Desc>Destructor</Desc>
            </Method>
            <Method Name="Discard">
               <Summary>Discards changes in memory</Summary>
               <Desc>If any changes have been made to the member since it was fetched from persistent storage, or updated to persistent storage, these changes will be lost. This means that a member with <See Property="BoldPersistenceState"/> = <InlineCode>bvpsModified</InlineCode> will have its persistence state changed to <InlineCode>bvpsInvalid</InlineCode>. </Desc>
            </Method>
            <Method Name="DoSetInitialValue">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="DoStartModify">
               <Summary>Bold-internal method that performs preparations needed before modifying the value of a member.</Summary>
               <Desc>Bold-internal method that performs preparations needed before modifying the value of a member.</Desc>
            </Method>
            <Method Name="EndModify">
               <Summary>Called by member subclasses after the value has been modified.</Summary>
               <Desc>Triggers the EndModify state transition. EndModify will be called automatically when a member is modified. </Desc>
               <SeeAlso><See Type="TBoldValuePersistenceState"/></SeeAlso>
            </Method>
            <Method Name="EndUpdate">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="EnsureContentsCurrent">
               <Summary>If the value of the member is not current, make it current.</Summary>
               <Desc>If the value of the member is not current, make it current. A persistent member will be fetched, and a derived attribute will be derived. </Desc>
            </Method>
            <Method Name="FailModify">
               <Summary>Called by member subclasses if a modification fails.</Summary>
               <Desc>Triggers the FailModify state transition. <InlineCode>FailModify</InlineCode> will be called automatically when a modify operation fails. </Desc>
               <SeeAlso><See Type="TBoldValuePersistenceState"/></SeeAlso>
            </Method>
            <Method Name="FindASystem">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="FreeContent">
               <Summary>Releases the memory used for the data value.</Summary>
               <Desc>This method is implemented by memory consuming subclasses, such as blob attributes and multilinks, to release memory. It will be called when the value is not needed any more.</Desc>
            </Method>
            <Method Name="GetAsIBoldStreamable">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetAsIBoldValue">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetAsList">
               <Summary>Overrides TBoldElement.GetAsList</Summary>
               <Desc>Sets <InlineCode>ResultList</InlineCode> to point to a <See Class="TBoldMemberList"/> containing the member. </Desc>
            </Method>
            <Method Name="GetAsValue">
               <Summary>Bold-internal</Summary>
               <Desc>Bold-internal. Overrides <See Class="TBoldElement" Method="GetAsValue"/>.</Desc>
            </Method>
            <Method Name="GetBoldDirty">
               <Summary>Overrides TBoldDomainElement.GetBoldDirty</Summary>
               <Desc>Overrides <See Class="TBoldDomainElement" Method="GetBoldDirty"/>. A member is dirty if its persistence state is bvpsModified; if its value has been modified in memory.</Desc>
            </Method>
            <Method Name="GetBoldMemberRTInfo">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetBoldPersistenceState">
               <Summary>Get-method for the BoldPersistenceState property</Summary>
               <Desc>Get-method for the <See Property="BoldPersistenceState"/> property</Desc>
            </Method>
            <Method Name="GetBoldSystem">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetBoldType">
               <Summary>Overrides TBoldElement.GetBoldType</Summary>
               <Desc>Overrides <InlineCode>TBoldElement.GetBoldType</InlineCode></Desc>
            </Method>
            <Method Name="GetController">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetDeriver">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetDeriverState">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetDisplayName">
               <Summary>Overrides TBoldElement.GetDisplayName</Summary>
               <Desc>Overrides <See Class="TBoldElement" Method="GetDisplayName"/>. The display name for a member that is part of a Bold object is "&lt;classname&gt;.&lt;membername&gt;".</Desc>
            </Method>
            <Method Name="GetElementTypeInfoForType">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetEvaluator">
               <Summary>Overrides TBoldElement.GetEvaluator</Summary>
               <Desc>Overrides <See Class="TBoldElement" Method="GetEvaluator"/>. If the member belongs to a system, that system's evaluator is used.</Desc>
            </Method>
            <Method Name="GetIsPartOfSystem">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetIsReadOnly">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetOldvalue">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetOwningObject">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetStreamName">
               <Summary>Name that identifies the type of the object for the streaming mechanisms.</Summary>
               <Desc>Name that identifies the type of the object for the streaming mechanisms.</Desc>
            </Method>
            <Method Name="InitializeMember">
               <Summary>Bold-internal</Summary>
               <Desc>Bold-internal</Desc>
            </Method>
            <Method Name="InitializeStateToInvalid">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="InitializeStateToModified">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="InitializeStateToTransient">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="InternalCreate">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="InternalDiscard">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="InternalMayUpdate">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="Invalidate">
               <Summary></Summary>
               <Desc>Call this method if you beleive that the value of the member may have changed in the persistent storage. This will cause the member to be refetched the next time its value is accessed. Members with <InlineCode>BoldValuePersistenceState = bvpsCurrent</InlineCode> will have their persistence state changed to <InlineCode>bvpsInvalid</InlineCode>. Calling <InlineCode>Invalidate</InlineCode> on modified or transient members will cause an exception to be raised. </Desc>
            </Method>
            <Method Name="IsEqualToValue">
               <Summary>Similar to IsEqual, but compares with a IBoldValue.</Summary>
               <Desc>Similar to <See Class="TBoldElement" Method="IsEqual"/>, but compares with an <See Interface="IBoldValue"/>.</Desc>
            </Method>
            <Method Name="IsInvalid">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="LoadFromStream">
               <Summary>Obsolete streaming mechanism.</Summary>
               <Desc>Obsolete streaming mechanism.</Desc>
            </Method>
            <Method Name="MakeDbCurrent">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="MarkMemberDirty">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="MayModify">
               <Summary>Override this function and return false to prohibit the modify state transition.</Summary>
               <Desc>Override this function and return <InlineCode>false</InlineCode> to prohibit the modify state transition. See also <See Method="CanModify"/> and <See Method="StartModify"/>. </Desc>
            </Method>
            <Method Name="MayUpdate">
               <Summary>Override this function and return false to prohibit the update state transition.</Summary>
               <Desc>Override this function and return <InlineCode>false</InlineCode> to prohibit the update state transition. See also <See Method="CanUpdate"/>. </Desc>
            </Method>
            <Method Name="MemberHasSubscribers">
               <Summary>True if there is anything subscribing to the member.</Summary>
               <Desc><InlineCode>True</InlineCode> if there is anything subscribing to the member. See <Jump ID="Mech_Subscription" Text="Subscription"/>. </Desc>
            </Method>
            <Method Name="ObjectBecomingPersistent">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="ObserverMayModify">
               <Summary></Summary>
               <Desc>Overrides <See Class="TBoldElement" Method="ObserverMayModify"/></Desc>
            </Method>
            <Method Name="PreChange">
               <Summary>Called by subclasses before the data value changes.</Summary>
               <Desc>Called by subclasses before the data value changes.</Desc>
            </Method>
            <Method Name="PreDiscard">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="PrepareModify">
               <Summary>Override this method to add behaviour before a member is modified.</Summary>
               <Desc>Override this method to add behaviour before a member is modified. The default implementation is empty. </Desc>
               <SeeAlso><See Type="TBoldValuePersistenceState"/></SeeAlso>
            </Method>
            <Method Name="PrepareUpdate">
               <Summary>Override this method to add behaviour before a member is saved to persistent storage.</Summary>
               <Desc>Override this method to add behaviour before a member is saved to persistent storage. The default implementation is empty.</Desc>
               <SeeAlso><See Type="TBoldValuePersistenceState"/></SeeAlso>
            </Method>
            <Method Name="ProxyClass">
               <Summary>The Delphi class used by ProxyInterface</Summary>
               <Desc>The Delphi class used by <See Method="ProxyInterface"/>. Implemented by subclasses.</Desc>
            </Method>
            <Method Name="ProxyInterface">
               <Summary>Overrides TBoldElement.ProxyInterface</Summary>
               <Desc>Overrides <See Class="TBoldElement" Method="ProxyInterface"/>.</Desc>
            </Method>
            <Method Name="ReadFromStream">
               <Summary>Obsolete streaming mechanism</Summary>
               <Desc>Obsolete streaming mechanism.
                  <Warning>Deprecated. Do not use.</Warning>
               </Desc>
            </Method>
            <Method Name="Refetch">
               <Summary>Fetches the value from persistent storage.</Summary>
               <Desc>Fetches the value from persistent storage regardless of whether the member is already fetched. This does not discard the value of a modified member. Modified members are not affected by a call to <InlineCode>Refetch</InlineCode>.</Desc>
            </Method>
            <Method Name="RetrieveProxyInterface">
               <Summary>Internal. Called by subclasses.</Summary>
               <Desc>Internal. This method is called by subclasses to implement <See Class="ProxyInterfaces"/>.</Desc>
            </Method>
            <Method Name="SaveToStream">
               <Summary>Obsolete streaming mechanism</Summary>
               <Desc>Obsolete streaming mechanism.
                  <Warning>Deprecated. Do not use.</Warning>
               </Desc>
            </Method>
            <Method Name="SetBoldPersistenceState">
               <Summary>Bold-internal. Sets the persistence state.</Summary>
               <Desc>Bold-internal. Sets the persistence state. Normally there is no need to call this method.</Desc>
            </Method>
            <Method Name="SetDeriverState">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="StartModify">
               <Summary></Summary>
               <Desc>Triggers the StartModify state transition. <InlineCode>StartModify</InlineCode> will be called automatically before a member is updated. The result will be <InlineCode>True</InlineCode> if the state transition was succesful. <InlineCode>CanModify</InlineCode> will return the same value as <InlineCode>StartModify</InlineCode> without performing the state transition. </Desc>
               <SeeAlso><See Type="TBoldValuePersistenceState"/></SeeAlso>
            </Method>
            <Method Name="StateError">
               <Summary>Overrides TBoldDomainElement.StateError</Summary>
               <Desc>Overrides <See Class="TBoldDomainElement" Routine="StateError"/></Desc>
            </Method>
            <Method Name="StoreInUndo">
               <Summary>Bold-internal</Summary>
               <Desc>Bold-internal. Used by the undo-mechanism.</Desc>
            </Method>
            <Method Name="_NotifyOutOfDate">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
         </Methods>
         <Properties>
            <Property Name="AsIBoldStreamable">
               <Summary>The IBoldStreamable interface</Summary>
               <Desc>Use this property to get the <See Interface="IBoldStreamable"/> interface of the member. This is used by the streaming mechanisms.</Desc>
            </Property>
            <Property Name="AsIBoldValue">
               <Summary>The IBoldValue interface.</Summary>
               <Desc>Use this property to get the <See Interface="IBoldValue"/> for the member. This is used internally.</Desc>
            </Property>
            <Property Name="BoldMemberRTInfo">
               <Summary>The model information for the member</Summary>
               <Desc>If the <InlineCode>TBoldMember</InlineCode> is a member of a Bold object, the <InlineCode>BoldMemberRTInfo</InlineCode> property will be assigned. It contains the model information for the member. </Desc>
            </Property>
            <Property Name="BoldPersistenceState">
               <Summary>The relationship between the member's value in memory and in the persistent storage.</Summary>
               <Desc>The persistence state of a Bold member reflects the relationship between its value in memory and in the persistent storage. It tells us which of the two is the most recent.
                  <P>If the state of a member is <InlineCode>bvpsInvalid</InlineCode> it means that the value in memory is not correct. It will be fetched automatically when the member is accessed. After the value has been fetched the state will become <InlineCode>bvpsCurrent</InlineCode>, meaning that the value in memory is the same as the value in the persistent storage. If the value of the member is changed in memory the state will change to <InlineCode>bvpsModified</InlineCode>, implying that the new value should be written to the persistent storage. Finally, the <InlineCode>bvpsTransient</InlineCode> state tells us that the member only exists in memory, either because the object it belongs to is transient, or because the member is marked as transient in the model.</P>
                  <P>Calling <See Method="Invalidate"/> makes a member 'forget' that it has been fetched. This changes its state from <InlineCode>bvpsCurrent</InlineCode> to <InlineCode>bvpsInvalid</InlineCode>. It is not allowed to invalidate members in <InlineCode>bvpsModified</InlineCode> state. Similarly, <See Method="Discard"/> makes a member 'forget' that it has been modified. It changes it from <InlineCode>bvpsModified</InlineCode> to <InlineCode>bvpsInvalid</InlineCode>.</P>
                  <P>Finally, members can change state from <InlineCode>bvpsTransient</InlineCode> to <InlineCode>bvpsModified</InlineCode>. This happens automatically if the object the member belongs to becomes persistent. See <See Class="TBoldObject" Method="BoldMakePersistent" Text="TBoldObject.BoldMakePersistent"/>.</P>
                  <P>Before a member's value is modified in memory the method <InlineCode>CanModify</InlineCode> is called to see if modifying the member is allowed. <InlineCode>CanModify</InlineCode>, among other things, checks the virtual <See Method="MayModify"/> method and the <InlineCode>bqMayModify</InlineCode> query-event. If the modification is allowed the virtual <See Method="PrepareModify"/> method is called and the event <InlineCode>bePrepareModify</InlineCode> is sent. After the value has been changed the virtual method <See Method="CompleteModify"/> is called and the event <InlineCode>beCompleteModify</InlineCode> is sent.</P>
               </Desc>
            </Property>
            <Property Name="BoldSystem">
               <Summary>The BoldSystem that the member belongs to.</Summary>
               <Desc>For a member that is part of a Bold object, this is the system that the object belongs to. For standalone members, it is <InlineCode>nil</InlineCode>.</Desc>
            </Property>
            <Property Name="Derived">
               <Summary>Indicates if the member is derived.</Summary>
               <Desc>Indicates if the member is derived.</Desc>
            </Property>
            <Property Name="Deriver">
               <Summary>There is normally no need for the programmer to access the deriver directly.</Summary>
               <Desc>There is normally no need for the programmer to access the deriver directly. </Desc>
            </Property>
            <Property Name="DeriverState">
               <Summary></Summary>
               <Desc>private</Desc>
            </Property>
            <Property Name="HasDeriver">
               <Summary></Summary>
               <Desc>private</Desc>
            </Property>
            <Property Name="HasRtInfo">
               <Summary></Summary>
               <Desc>private</Desc>
            </Property>
            <Property Name="IsPartOfSystem">
               <Summary>Indicates if the member is part of a BoldSystem.</Summary>
               <Desc>If <InlineCode>IsPartOfSystem</InlineCode> is <InlineCode>true</InlineCode>, the <See Property="BoldSystem"/> property is valid. If not, accessing <See Property="BoldSystem"/> will raise an exception. </Desc>
            </Property>
            <Property Name="IsReadOnly">
               <Summary></Summary>
               <Desc>private</Desc>
            </Property>
            <Property Name="OldValue">
               <Summary>Bold-internal</Summary>
               <Desc>Bold-internal.</Desc>
            </Property>
            <Property Name="OwnedByObject">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="OwningObject">
               <Summary>The Bold object the member is a member of.</Summary>
               <Desc>Returns the Bold object the member is a member of. If the member is not member of a Bold object, the function returns <InlineCode>nil</InlineCode>. </Desc>
            </Property>
            <Property Name="Touched">
               <Summary>Bold-internal</Summary>
               <Desc>Bold-internal</Desc>
            </Property>
         </Properties>
         <Summary>The members of Bold objects are of the type TBoldMember.</Summary>
         <Desc>The members of Bold objects are of the type <InlineCode>TBoldMember</InlineCode>. But a <InlineCode>TBoldMember</InlineCode> doesn't have to belong to a Bold object. It can be, and is often, used as a standalone variable or constant. In that case, its <See Property="BoldMemberRtInfo"/> and <See Property="OwningObject"/> properties are <InlineCode>nil</InlineCode>. </Desc>
      </Class>
      <Class Name="TBoldMemberFactory">
         <Methods>
            <Method Name="CreateMemberFromBoldType">
               <Summary>Creates a TBoldMember of the desired type</Summary>
               <Desc>Call this with a <InlineCode>TBoldElementTypeInfo</InlineCode> and it will return an instance of a corresponding type with the <InlineCode>BoldType</InlineCode>-property correctly set.</Desc>
            </Method>
            <Method Name="CreateMemberFromExpressionName">
               <Summary>Creates a TBoldMember of the desired type</Summary>
               <Desc>Similar to <See Method="CreateMemberFromBoldType"/>, but takes a string with the expression name of the type instead.</Desc>
            </Method>
         </Methods>
         <Summary>Creates instances of TBoldMember subclasses</Summary>
         <Desc>This factory simplifies creating instances of the <InlineCode>TBoldMember</InlineCode> subclasses with a correct type in the bold type system. </Desc>
      </Class>
      <Class Name="TBoldMemberList">
         <Methods>
            <Method Name="Add">
               <Summary>Adds a member to the list.</Summary>
               <Desc>Adds a member to the list. If <See Property="CloneMembers"/> is <InlineCode>true</InlineCode> a copy of the member will be added.</Desc>
            </Method>
            <Method Name="AddElement">
               <Summary>Overrides TBoldList.AddElement</Summary>
               <Desc>Overrides <See Class="TBoldList" Method="AddElement"/></Desc>
            </Method>
            <Method Name="AllocateData">
               <Summary>Overrides TBoldList.AllocateData.</Summary>
               <Desc>Overrides <See Class="TBoldList" Method="AllocateData"/>.</Desc>
            </Method>
            <Method Name="Assign">
               <Summary>Overrides TBoldElement.Assign.</Summary>
               <Desc>Overrides <See Class="TBoldElement" Property="Assign"/>. If <See Property="CloneMembers"/> is true copies of the members in <InlineCode>source</InlineCode> will be added to the list, otherwise the same members will be added.</Desc>
            </Method>
            <Method Name="CheckAdd">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="CheckInsert">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="CheckReplace">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="CreateNew">
               <Summary>Overrides TBoldList.CreateNew.</Summary>
               <Desc>Overrides <See Class="TBoldList" Method="CreateNew"/>.</Desc>
            </Method>
            <Method Name="FreeData">
               <Summary>Overrides TBoldList.CreateNew.</Summary>
               <Desc>Overrides <See Class="TBoldList" Method="CreateNew"/>.</Desc>
            </Method>
            <Method Name="GetBoldMember">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetCanCreateNew">
               <Summary>Overrides TBoldList.GetCanCreateNew.</Summary>
               <Desc>Overrides <See Class="TBoldList" Method="GetCanCreateNew"/>.</Desc>
            </Method>
            <Method Name="GetCount">
               <Summary>Overrides TBoldList.GetCount.</Summary>
               <Desc>Overrides <See Class="TBoldList" Method="GetCount"/>.</Desc>
            </Method>
            <Method Name="GetElement">
               <Summary>Overrides TBoldList.GetElement.</Summary>
               <Desc>Overrides <See Class="TBoldList" Method="GetElement"/>.</Desc>
            </Method>
            <Method Name="GetStreamName">
               <Summary>Overrides TBoldMember.GetStreamName.</Summary>
               <Desc>Overrides <See Class="TBoldMember.GetStreamName"/>. Streaming is not implemented for <InlineCode>TBoldMemberList</InlineCode>.</Desc>
            </Method>
            <Method Name="GetStringRepresentation">
               <Summary>Overrides TBoldElement.GetStringRepresentation.</Summary>
               <Desc>Overrides <See Class="TBoldElement" Method="GetStringRepresentation"/>. The string representation of a <InlineCode>TBoldMemberList</InlineCode> is the count.</Desc>
            </Method>
            <Method Name="IncludesElement">
               <Summary>Overrides TBoldList.IncludesElement.</Summary>
               <Desc>Overrides <See Class="TBoldList" Method="IncludesElement"/>.</Desc>
            </Method>
            <Method Name="IndexOf">
               <Summary>Returns the position of the first occurence of Item in the list.</Summary>
               <Desc>Returns the position of the first occurence of <InlineCode>Item</InlineCode> in the list.</Desc>
            </Method>
            <Method Name="IndexOfElement">
               <Summary>Overrides TBoldList.IndexOfElement.</Summary>
               <Desc>Overrides <See Class="TBoldList" Method="IndexOfElement"/>.</Desc>
            </Method>
            <Method Name="InitializeMember">
               <Summary>Bold-internal</Summary>
               <Desc>Bold-Internal</Desc>
            </Method>
            <Method Name="Insert">
               <Summary>Inserts an element in a given position in the list.</Summary>
               <Desc>Inserts <InlineCode>Item</InlineCode> in position <InlineCode>index</InlineCode> in the list. If <See Property="CloneMembers"/> is <InlineCode>true</InlineCode>, a copy of the member will be inserted instead.</Desc>
            </Method>
            <Method Name="InsertElement">
               <Summary>Overrides TBoldList.InsertElement.</Summary>
               <Desc>Overrides <See Class="TBoldList" Method="InsertElement"/>.</Desc>
            </Method>
            <Method Name="InsertNew">
               <Summary>Overrides TBoldList.InsertNew.</Summary>
               <Desc>Overrides <See Class="TBoldList" Method="InsertNew"/>. </Desc>
            </Method>
            <Method Name="InternalAddNew">
               <Summary>Overrides TBoldList.InternalAddNew.</Summary>
               <Desc>Overrides <See Class="TBoldList" Method="InternalAddNew"/></Desc>
            </Method>
            <Method Name="InternalAddWithoutCloning">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="Move">
               <Summary>Overrides TBoldList.Move.</Summary>
               <Desc>Overrides <See Class="TBoldList" Method="Move"/>.</Desc>
            </Method>
            <Method Name="ProxyClass">
               <Summary>Overrides TBoldMember.ProxyClass.</Summary>
               <Desc>Overrides <See Class="TBoldMember" Method="ProxyClass"/>.</Desc>
            </Method>
            <Method Name="ReadFromStream">
               <Summary>Obsolete streaming mechanism.</Summary>
               <Desc>Obsolete streaming mechanism.
                  <Warning>Deprecated. Do not use.</Warning>
               </Desc>
            </Method>
            <Method Name="RemoveByIndex">
               <Summary>Overrides TBoldList.RemoveByIndex</Summary>
               <Desc>Overrides <See Class="TBoldList.RemoveByIndex"/>. If <See Property="CloneMembers"/> is <InlineCode>true</InlineCode>, the member will not only be removed but also freed.</Desc>
            </Method>
            <Method Name="SaveToStream">
               <Summary>Obsolete streaming mechanism.</Summary>
               <Desc>Obsolete streaming mechanism.</Desc>
            </Method>
            <Method Name="SetBoldMember">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="SetCloneMembers">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="SetElement">
               <Summary>Overrides TBoldList.SetElement.</Summary>
               <Desc>Overrides <See Class="TBoldList" Method="SetElement"/>.</Desc>
            </Method>
         </Methods>
         <Properties>
            <Property Name="BoldMembers">
               <Summary>Property for accessing the contents of the list.</Summary>
               <Desc>Property for accessing the contents of the list. If the property is written to, and <See Property="CloneMembers"/> is <InlineCode>true</InlineCode>, a copy of the member will be used instead, and the previous member in position <InlineCode>index</InlineCode> will be freed.</Desc>
            </Property>
            <Property Name="CloneMembers">
               <Summary>If the list owns the members</Summary>
               <Desc>If <InlineCode>CloneMembers</InlineCode> is <InlineCode>true</InlineCode> members will be cloned when added to the list. The clones will be owned by the list, and thus destroyed when removed from the list or when the list is destroyed. If <InlineCode>CloneMembers</InlineCode> is <InlineCode>false</InlineCode> the list will simply contain references to the members. The value of <InlineCode>CloneMembers</InlineCode> can only be changed if the list is empty.</Desc>
            </Property>
            <Property Name="List">
               <Summary></Summary>
               <Desc>private</Desc>
            </Property>
         </Properties>
         <Summary>A list containing elements of type TBoldMember.</Summary>
         <Desc>A list containing elements of type <InlineCode>TBoldMember</InlineCode>.</Desc>
      </Class>
      <Class Name="TBoldMember_Proxy">
         <Methods>
            <Method Name="AssignContent">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="AssignContentValue">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetBoldPersistenceState">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetContentName">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetProxedController">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetProxedMember">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetStreamName">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="SetBoldPersistenceState">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
         </Methods>
         <Properties>
            <Property Name="ProxedController">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="ProxedMember">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="ProxedMemberForStreamable">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="ProxedMemberForValue">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
         </Properties>
         <Summary></Summary>
         <Desc></Desc>
      </Class>
      <Class Name="TBoldObject">
         <Methods>
            <Method Name="AfterConstruction">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="AtTime">
               <Summary></Summary>
               <Desc>Returns the object as it looked at the time point identified by the Time time stamp.
                  <Note>This feature is only available in the <Jump ID="mech_OVE" Text="Object Versioning Extension"/> to Bold for Delphi.</Note>
               </Desc>
            </Method>
            <Method Name="BoldMakePersistent">
               <Summary></Summary>
               <Desc>If you have created a transient instance of a persistent class, <InlineCode>BoldMakePersistent</InlineCode> will make that instance persistent. Note that this will not actually save the Bold object to the persistent storage, but rather mark it as a newly created instance.
                  <P>Transient instances of persistent classes can be created by passing <InlineCode>False</InlineCode> as the second parameter to <See Method="create"/>.</P>
               </Desc>
            </Method>
            <Method Name="CalculateMemberModified">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="CanDelete">
               <Summary>True if the object is allowed to be deleted.</Summary>
               <Desc>Returns <InlineCode>True</InlineCode> if the object is allowed to be deleted. A programmer can disallow deleting either by overriding the virtual <InlineCode>MayDelete</InlineCode> function or subscribing to the <InlineCode>bqMayDelete</InlineCode> query. </Desc>
            </Method>
            <Method Name="CanUnload">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="CanUpdate">
               <Summary>True if the object is allowed to be updated.</Summary>
               <Desc>Returns <InlineCode>True</InlineCode> if the object is allowed to be updated. A programmer can disallow updating either by overriding the virtual <InlineCode>MayUpdate</InlineCode> function or subscribing to the <InlineCode>bqMayUpdate</InlineCode> query. </Desc>
            </Method>
            <Method Name="CheckLinks">
               <Summary>Checks that there are no associations to the object.</Summary>
               <Desc>Checks that there are no associations to the object, except by the role with member index <InlineCode>Index</InlineCode>.</Desc>
            </Method>
            <Method Name="ClearTouched">
               <Summary>Bold-internal</Summary>
               <Desc>Bold-internal</Desc>
            </Method>
            <Method Name="CompleteCreate">
               <Summary>Override this method to add behaviour after an object is created.</Summary>
               <Desc>Override this method to add behaviour after an object is created, such as setting default values for attributes. The default implementation is empty. </Desc>
               <SeeAlso><See Type="TBoldValuePersistenceState"/></SeeAlso>
            </Method>
            <Method Name="CompleteUpdate">
               <Summary>Virtual method that is called after an object has been updated in the persistent storage</Summary>
               <Desc>Override this method to add behaviour after an object is updated in the persistent storage. The default implementation is empty.
                  <P></P>
               </Desc>
            </Method>
            <Method Name="Create">
               <Summary>Creates a Bold object.</Summary>
               <Desc>Creates a Bold object. This constructor can not be called on <InlineCode>TBoldObject</InlineCode>, but should be called on a subclass. The <InlineCode>OwningElement</InlineCode> should be a <See Class="TBoldSystem"/>. If <InlineCode>nil</InlineCode>, the object will belong to the default system.
                  <P>Good practice is to specify the system explicitly.</P>
               </Desc>
            </Method>
            <Method Name="CreateMemberByIndex">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="DefaultSubscribe">
               <Summary>Subscribes to the default events on the Bold object.</Summary>
               <Desc>Subscribes to the default events on the Bold object. There are no default events for a <InlineCode>TBoldObject</InlineCode>, so, in reality, no subscriptions are placed. </Desc>
               <SeeAlso><Jump ID="Mech_Subscription" Text="Subscriptions"/></SeeAlso>
            </Method>
            <Method Name="Delete">
               <Summary>Deletes the Bold object.</Summary>
               <Desc>Deletes the Bold object. If the object is transient or has not been written to the persistent storage the Delphi object is destroyed. Otherwise, the object is marked for deletion and will be deleted from the persistent storage and memory when <See Class="TBoldSystem" Method="UpdateDatabase"/> is called on the owning system.
                  <P>Delete triggers a change in the persistence state of the object.</P>
                  <P>Before a Bold object is deleted it will try to clear all associations. The clearing of associations will depend on the setting of the <InlineCode>DeleteAction</InlineCode> of the association. Details can be found in the <Jump ID="mech_modelinformation" Text="Model Information"/> topic (Association Ends/DeleteAction).</P>
                  <Note>When an object is deleted, it is not always immediately destroyed. If the object is persistent, the object will be kept by the system until it the delete is saved to the database. It is however not advised to hold any pointers to a deleted objects unless for specific technical reasons. The obejct will send the event <See Unit="BoldSubscription" Const="beObjectDeleted"/> when it is being deleted, and the event <See Unit="BoldSubscription" Const="beDestroying"/> when it is destroyed</Note>
               </Desc>
               <SeeAlso><See Type="TBoldValuePersistenceState"/></SeeAlso>
            </Method>
            <Method Name="Destroy">
               <Summary>Destructor</Summary>
               <Desc>Do not call <InlineCode>TBoldObject.Destroy</InlineCode> directly. To delete a Bold object, call <See Method="Delete"/>. To remove the object from memory without deleting it in the persistent storage, call <See Class="TBoldObjectLocator" Method="UnloadBoldObject"/> on the locator of the object. </Desc>
            </Method>
            <Method Name="Discard">
               <Summary>Discards all changes made in memory, that have not been written to persistent storage yet.</Summary>
               <Desc>All changes made to the object since it was fetched from, or updated to, the persistent storage will be lost. All modified members will be discarded. If the object is a newly created object or a transient object, it will be deleted, and thus destroyed in memory. If the object is a deleted object it will be undeleted and its persistence state will change to <InlineCode>bvpsCurrent</InlineCode>. </Desc>
            </Method>
            <Method Name="DoStartDelete">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="DoStartUpdate">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="EndCreate">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="EndDelete">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="EndFetchMembers">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="EndReCreate">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="EndUpdate">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="EndUpdateMembers">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="FailDelete">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="FindBoldMemberByExpressionName">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetAsIBoldObjectContents">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetAsList">
               <Summary>Overrides TBoldElement.GetAsList</Summary>
               <Desc>Sets ResultList to point to a <See Class="TBoldObjectList"/> containing the object. </Desc>
            </Method>
            <Method Name="GetBoldDirty">
               <Summary>Overrides TBoldDomainElement.GetBoldDirty</Summary>
               <Desc>A <InlineCode>TBoldObject</InlineCode> is considered dirty if one of its members is dirty, or if the object itself has persistence state bvpsModified. This is the case for a newly created or deleted object.</Desc>
            </Method>
            <Method Name="GetBoldExistenceState">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetBoldMemberAssigned">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetBoldMemberByExpressionName">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetBoldMemberCount">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetBoldMemberIndexByExpressionName">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetBoldMembers">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetBoldObjectExists">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetBoldObjectIsDeleted">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetBoldObjectIsNew">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetBoldPersistenceState">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetBoldSystem">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetBoldTime">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetBoldType">
               <Summary>Overrides TBoldElement.GetBoldType.</Summary>
               <Desc>Overrides <See Class="TBoldElement" Method="GetBoldType"/>. The bold type of a <InlineCode>TBoldObject</InlineCode> is the same as the <See Property="BoldClassTypeInfo"/>.</Desc>
            </Method>
            <Method Name="GetDeriveMethodForMember">
               <Summary>Internal. Sets up derived attributes.</Summary>
               <Desc>The implementation of this method will be automatically generated when generating code for a class that has derived attributes.</Desc>
            </Method>
            <Method Name="GetDisplayName">
               <Summary>Overrides TBoldElement.GetDisplayName.</Summary>
               <Desc>Overrides <See Class="TBoldElement" Method="GetDisplayName"/>. The display name for a Bold object is the name of the class.</Desc>
            </Method>
            <Method Name="GetDynamicDataSize">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetEffectiveInvalid">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetEvaluator">
               <Summary>Overrides TBoldElement.GetEvaluator.</Summary>
               <Desc>Overrides <See Class="TBoldElement" Method="GetEvaluator"/>.</Desc>
            </Method>
            <Method Name="GetGlobalId">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetIsModified">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetIsReadOnly">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetObjectHasSubscribers">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetReverseDeriveMethodForMember">
               <Summary>Internal. Sets up derived attributes.</Summary>
               <Desc>Overrides <See Class="TBoldElement" Method="GetDisplayName"/>. The display name for a Bold object is the name of the class.</Desc>
            </Method>
            <Method Name="GetStringRepresentation">
               <Summary>Overrides TBolfElement.GetStringRepresentation</Summary>
               <Desc>In the default implementation for a Bold object, the string representation is the attribute with index <InlineCode>Representation</InlineCode>. If that member is not an attribute the <InlineCode>StringRepresentation</InlineCode> is the object's id and classname. </Desc>
            </Method>
            <Method Name="GetTimeStamp">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="InitializeMember">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="InitializeObject">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="InternalCanDelete">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="InternalCreateNewWithClassAndSystem">
               <Summary>Bold-internal.</Summary>
               <Desc>Bold-internal constructor. Use the normal constructor <See Method="Create"/>.</Desc>
            </Method>
            <Method Name="InternalCreateWithClassAndLocator">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="Invalidate">
               <Summary>Invalidates the members of the object.</Summary>
               <Desc>All persistent members of the BoldObject will have their values invalidated. Thus, they will be refetched from the persistent storage the next time they are accessed. See <See Class="TBoldMember" Method="Invalidate"/>. </Desc>
            </Method>
            <Method Name="IsEqualAs">
               <Summary>Overrides TBoldElement.IsEqualAs</Summary>
               <Desc>Bold objects are compared with reference semantics, meaning that an object is only equal to itself. An object can also be compared to a <See Class="TBoldObjectReference"/> and they will be considered equal if the object reference refers the the object. </Desc>
            </Method>
            <Method Name="MarkObjectDirty">
               <Summary>Forces the object to become dirty.</Summary>
               <Desc>Forces the object to become dirty. This does not change the value of any of the members of the object.</Desc>
            </Method>
            <Method Name="MayDelete">
               <Summary>User overrideable function. Return false to prohibit deleting the object.</Summary>
               <Desc> Override this function and return <InlineCode>false</InlineCode> to prohibit the delete state transition. </Desc>
               <SeeAlso><See Method="CanDelete"/></SeeAlso>
               <SeeAlso><See Method="StartDelete"/></SeeAlso>
            </Method>
            <Method Name="MayUpdate">
               <Summary>Override this function and return false to prohibit the update state transition.</Summary>
               <Desc>Override this function and return <InlineCode>false</InlineCode> to prohibit the update state transition. </Desc>
               <SeeAlso><See Method="CanUpdate"/></SeeAlso>
               <SeeAlso><See Method="StartUpdate"/></SeeAlso>
            </Method>
            <Method Name="MayUpdateMembers">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="MemberBecomingClean">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="MemberBecomingModified">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="PrepareDelete">
               <Summary>Override this method to add behaviour before an object is deleted.</Summary>
               <Desc>Override this method to add behaviour before an object is deleted. The default implementation is empty. </Desc>
            </Method>
            <Method Name="PrepareUpdate">
               <Summary>Override this method to add behaviour before an object is updated.</Summary>
               <Desc>Override this method to add behaviour before an object is updated. The default implementation is empty.</Desc>
            </Method>
            <Method Name="PrepareUpdateMembers">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="ProxyInterface">
               <Summary>Overrides TBoldElement.ProxyInterface</Summary>
               <Desc>Overrides <See Class="TBoldElement" Method="ProxyInterface"/></Desc>
            </Method>
            <Method Name="ReRead">
               <Summary>The object will be fetched even if its persistence state is current.</Summary>
               <Desc>The object will be fetched even if its persistence state is current. </Desc>
            </Method>
            <Method Name="ReceiveEventFromOwned">
               <Summary>Overrides TBoldDomainElement.ReceiveEventFromOwned</Summary>
               <Desc>Override this method in one of your business classes to catch any event sent by a member. The member sending the event is the originator.
                  <Note>Don't forget to call <InlineCode>inherited</InlineCode>.</Note>
               </Desc>
            </Method>
            <Method Name="SetBoldExistenceState">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="SetBoldPersistenceState">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="SetClassTypeInfo">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="SetGlobalId">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="SetIsReadOnly">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="SetTimeStamp">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="StartDelete">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="StateError">
               <Summary>Overrides TBoldDomainElement.StateError.</Summary>
               <Desc>Overrides <See Class="TBoldDomainElement" Method="StateError"/>.</Desc>
            </Method>
            <Method Name="StreamIn">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="StreamOut">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="SubscribeToStringRepresentation">
               <Summary>Overrides TBoldElement.SubscribeToStringRepresentation.</Summary>
               <Desc>Overrides <See Class="TBoldElement" Method="SubscribeToStringRepresentation"/>.</Desc>
               <SeeAlso><Jump ID="Mech_Subscription" Text="Subscriptions"/></SeeAlso>
            </Method>
            <Method Name="ToBeRemovedClassAccessed">
               <Summary>Called when a class with EvolutionState ToBeRemoved is accessed.</Summary>
               <Desc>Called when a class with EvolutionState ToBeRemoved is accessed. See <Jump ID="mech_modelevolution"/>.
                  <P>It can be useful during development to place a breakpoint in the implementation of this method to pinpoint when the class is accessed. To do this, add the method to your root class, add the method as override and generate code. The implementation on <InlineCode>TBoldObject</InlineCode> is empty.</P>
               </Desc>
            </Method>
            <Method Name="ToBeRemovedMemberAccessed">
               <Summary>Called when a member with EvolutionState ToBeRemoved is accessed.</Summary>
               <Desc>Called when a member with EvolutionState ToBeRemoved is accessed. See <Jump ID="mech_modelevolution"/>.
                  <P>It can be useful during development to place a breakpoint in the implementation of this method to pinpoint when the class is accessed. To do this, add the method to your root class, add the method as override and generate code. The implementation on <InlineCode>TBoldObject</InlineCode> is empty.</P>
               </Desc>
            </Method>
            <Method Name="ToBeRemovedMemberModified">
               <Summary>Called when a member with EvolutionState ToBeRemoved is modified.</Summary>
               <Desc>Called when a member with EvolutionState ToBeRemoved is accessed. See <Jump ID="mech_modelevolution"/>.
                  <P>It can be useful during development to place a breakpoint in the implementation of this method to pinpoint when the class is accessed. To do this, add the method to your root class, add the method as override and generate code. The implementation on <InlineCode>TBoldObject</InlineCode> is empty.</P>
               </Desc>
            </Method>
            <Method Name="UnLinkAll">
               <Summary>Clear all associations to the object.</Summary>
               <Desc>The members that correspond to roles are cleared, i.e. members of type <InlineCode>TBoldObjectList</InlineCode> will be emptied and members of type <InlineCode>TBoldObjectReference</InlineCode> will be set to <InlineCode>nil</InlineCode>. Associations with association classes will not be removed when <InlineCode>UnlinkAll</InlineCode> is called on a link object. </Desc>
            </Method>
            <Method Name="ValidateMember">
               <Summary>Internal convenience method</Summary>
               <Desc>Internal convenience method, used by the generated code to verify that it is in sync with the model.</Desc>
            </Method>
         </Methods>
         <Properties>
            <Property Name="AsIBoldObjectContents">
               <Summary>This property gives the ValueSpace view of an object.</Summary>
               <Desc>This property gives the <InlineCode>ValueSpace</InlineCode> view of an object.</Desc>
            </Property>
            <Property Name="BoldClassTypeInfo">
               <Summary>The class type info holds the model information for objects of this type.</Summary>
               <Desc>The class type info holds the model information for objects of this type.</Desc>
            </Property>
            <Property Name="BoldExistenceState">
               <Summary>The existence state of a Bold object tells us if the conceptual object exists or not.</Summary>
               <Desc>The existence state of a Bold object tells us if the conceptual object exists or not.
                  <UL>
                     <LI>If the value is <InlineCode>besNotCreated</InlineCode> then the object has not yet been created. An object is typically only in this state during the early phases of its creation.</LI>
                     <LI>The value <InlineCode>besExisting</InlineCode> means that the conceptual object exists.</LI>
                     <LI>The value <InlineCode>besDeleted</InlineCode> means that the object has been deleted. Thus, the object conceptually does not exist anymore. Objects with this state are kept in memory as a reminder to also delete them from the database.</LI>
                  </UL>
When the existence state changes from <InlineCode>besExisting</InlineCode> to either <InlineCode>besNotCreated</InlineCode> or
                  <Note>besDeleted</Note>
, the event <InlineCode>beObjectDeleted</InlineCode> is sent. When the state changes from either <InlineCode>besNotCreated</InlineCode> or <InlineCode>besDeleted</InlineCode> to <InlineCode>besExisting</InlineCode>, the event <InlineCode>beObjectCreated</InlineCode> is sent. </Desc>
            </Property>
            <Property Name="BoldMemberAssigned">
               <Summary>If a specific member of the object has been created yet.</Summary>
               <Desc>For reasons of conserving memory, the individual members of a Bold object (instances of <InlineCode>TBoldMember</InlineCode>) are not created until the first time they are needed. This property can be used to check if a specific member has been created, so as not to unnecessarily create it.</Desc>
            </Property>
            <Property Name="BoldMemberByExpressionName">
               <Summary>The member with a given expression name.</Summary>
               <Desc>The member with a given expression name.</Desc>
            </Property>
            <Property Name="BoldMemberCount">
               <Summary>The total number of members of the object</Summary>
               <Desc>The total number of members of the object. Can be used to loop over the <See Property="BoldMembers"/> property.</Desc>
            </Property>
            <Property Name="BoldMemberIndexByExpressionName">
               <Summary>The index of the member with a given expression name.</Summary>
               <Desc>The index of the member with a given expression name. <InlineCode>-1</InlineCode> if there is no member with that name.</Desc>
            </Property>
            <Property Name="BoldMembers">
               <Summary>The members of a Bold object are the objects that represent the attributes and roles of the object.</Summary>
               <Desc>The members of a Bold object are the objects that represent the attributes and roles of the object. This property allows access to these objects using their index.</Desc>
            </Property>
            <Property Name="BoldObjectExists">
               <Summary>If the object exists conceptually</Summary>
               <Desc>This property corresponds to testing <InlineCode>BoldExistenceState = besExisting</InlineCode>, and will be be <InlineCode>true</InlineCode> if the object conceptually exists, and <InlineCode>false</InlineCode> if it has been deleted (and for a short time during the creation-phase of the object).</Desc>
            </Property>
            <Property Name="BoldObjectIsDeleted">
               <Summary>If the object has been deleted</Summary>
               <Desc>This property will be true for a Bold object after <See Method="Delete"/> has been called.</Desc>
            </Property>
            <Property Name="BoldObjectIsNew">
               <Summary>If the object has been created, but not yet saved.</Summary>
               <Desc>If the object has been created, but not yet saved.</Desc>
            </Property>
            <Property Name="BoldObjectLocator">
               <Summary>The object's locator</Summary>
               <Desc>The object's locator</Desc>
            </Property>
            <Property Name="BoldPersistenceState">
               <Summary>Reflects the relationship between the value in memory and in persistent storage.</Summary>
               <Desc>The persistence state of a Bold object reflects the relationship between its value in memory and in the persistent storage. It tells us which of the two is the most recent. The value of a Bold object is concidered to be its existence state.
                  <P>If the state of an object is <InlineCode>bvpsInvalid</InlineCode> it means that the value in memory is not correct. This means that the object is being fetched. After the object has been fetched the state will become <InlineCode>bvpsCurrent</InlineCode>. If the object is deleted in memory the state will change to <InlineCode>bvpsModified</InlineCode>, implying that the object should be deleted from the persistent storage. When a new object is created it also receives the <InlineCode>bvpsModified</InlineCode> state. Finally, the <InlineCode>bvpsTransient</InlineCode> state tells us that the object only exists in memory.</P>
                  <P>Calling <See Method="Invalidate"/> on an object only invalidates the members of the object, and does not set the object's persistence state to invalid.</P>
                  <P><See Method="Discard"/> makes an object 'forget' that it has been created or deleted. It changes its state from <InlineCode>bvpsModified</InlineCode> to <InlineCode>bvpsInvalid</InlineCode>. It also discards the members of the object.</P>
                  <P>Objects can change state from <InlineCode>bvpsTransient</InlineCode> to <InlineCode>bvpsModified</InlineCode>. This happens when the method <InlineCode>BoldMakePersistent</InlineCode> is called, assuming that the object's class is persistent.</P>
                  <P>After an object is created the virtual method <See Method="CompleteCreate"/> is called. Override this to add initialization code. The event <InlineCode>beCompleteModify</InlineCode> is also sent at this time.</P>
                  <P>Before an object is deleted the method <See Method="CanDelete"/> is checked. This, among other things, calls the virtual <See Method="MayDelete"/> method and the <InlineCode>bqMayDelete</InlineCode> query-event. If the delete operation is allowed the virtual method <See Method="PrepareDelete"/> is called before the existence state is changed. The event <InlineCode>bePrepareModify</InlineCode> is also sent at this time.</P>
               </Desc>
            </Property>
            <Property Name="BoldStoresTimeStamp">
               <Summary></Summary>
               <Desc>private</Desc>
            </Property>
            <Property Name="BoldSystem">
               <Summary>The system the object belongs to.</Summary>
               <Desc>The system the object belongs to.</Desc>
            </Property>
            <Property Name="BoldTime">
               <Summary>Returns the time stamp associated with this version of the Bold object.</Summary>
               <Desc> Each version of a Bold object is represented in memory by a separate instance of TBoldObject (or subclass). The <InlineCode>BoldTime</InlineCode> property returns the time stamp for this version.
                  <Note>This feature is only available in the <Jump ID="mech_OVE" Text="Object Versioning Extension"/>.</Note>
               </Desc>
            </Property>
            <Property Name="InDirtyList">
               <Summary></Summary>
               <Desc>private</Desc>
            </Property>
            <Property Name="IsReadOnly">
               <Summary></Summary>
               <Desc>private</Desc>
            </Property>
            <Property Name="MemberModified">
               <Summary></Summary>
               <Desc>private</Desc>
            </Property>
            <Property Name="MemberModifiedKnown">
               <Summary></Summary>
               <Desc>private</Desc>
            </Property>
            <Property Name="ObjectHasSubscribers">
               <Summary>True if there is anything subscribing to the object.</Summary>
               <Desc><InlineCode>True</InlineCode> if there is anything subscribing to the object.</Desc>
               <SeeAlso><Jump ID="Mech_Subscription" Text="Subscriptions"/></SeeAlso>
            </Property>
            <Property Name="Touched">
               <Summary>Bold-internal</Summary>
               <Desc>Bold-internal</Desc>
            </Property>
         </Properties>
         <Summary>TBoldObject is the representation of Bold objects.</Summary>
         <Desc><InlineCode>TBoldObject</InlineCode> is the representation of Bold objects. The business classes in the generated code will all be subclasses of this class. The business objects in a Bold application are instances of this class, or one of its subclasses. </Desc>
      </Class>
      <Class Name="TBoldObjectList">
         <Methods>
            <Method Name="Add">
               <Summary>Adds a Bold object to the list</Summary>
               <Desc>Same as <See Class="TBoldList" Method="Add"/>, except that the argument is typed as a TBoldObject. </Desc>
            </Method>
            <Method Name="AddElement">
               <Summary>Overrides TBoldList.AddElement</Summary>
               <Desc>Overrides <See Class="TBoldList" Method="AddElement"/></Desc>
            </Method>
            <Method Name="AddList">
               <Summary>Overrides TBoldList.AddList</Summary>
               <Desc>Overrides <See Class="TBoldList" Method="AddList"/></Desc>
            </Method>
            <Method Name="AddLocator">
               <Summary>Adds an object by using its locator.</Summary>
               <Desc>Adds the locator <InlineCode>NewLocator</InlineCode>, and thus indirectly the Bold object associated with the locator, to the list. This may be a useful optimization if you don't actually need to fetch the object's data.</Desc>
            </Method>
            <Method Name="AllocateData">
               <Summary>Overrides TBoldList.AllocateData</Summary>
               <Desc>Overrides <See Class="TBoldList" Method="AllocateData"/></Desc>
            </Method>
            <Method Name="Assign">
               <Summary>Overrides TBoldElement.Assign</Summary>
               <Desc>If <InlineCode>Source</InlineCode> is a <InlineCode>TBoldObjectList</InlineCode>, then the objects in <InlineCode>source</InlineCode> will be added to the list. Objects not in <InlineCode>Source</InlineCode> will be removed from the list. </Desc>
            </Method>
            <Method Name="AssignContentValueFromElement">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="AtTime">
               <Summary>Overrides TBoldMember.AtTime</Summary>
               <Desc>Overrides <See Class="TBoldMember" Method="AtTime"/></Desc>
            </Method>
            <Method Name="CanInsert">
               <Summary>Overrides TBoldList.CanInsert</Summary>
               <Desc>See <See Class="TBoldList" Method="CanInsert"/> </Desc>
            </Method>
            <Method Name="CanInsertLocator">
               <Summary>Same as CanInsert, but takes a locator instead</Summary>
               <Desc>Returns <InlineCode>True</InlineCode> if <InlineCode>Locator</InlineCode> may be inserted in position <InlineCode>index</InlineCode> in the list. A programmer can disallow <InlineCode>Insert</InlineCode> by subscribing to the <InlineCode>bqMayInsert</InlineCode> query. If a <InlineCode>Subscriber</InlineCode> is passed to the function, subscriptions will be placed to notify when the result of <InlineCode>MayInsert</InlineCode> may have changed. </Desc>
            </Method>
            <Method Name="CanSet">
               <Summary>Overrides TBoldList.CanSet</Summary>
               <Desc>See <See Class="TBoldList" Method="CanSet"/> </Desc>
            </Method>
            <Method Name="CanSetLocator">
               <Summary>Same as CanSet, but takes a locator instead</Summary>
               <Desc>Returns <InlineCode>True</InlineCode> if the locator in position <InlineCode>index</InlineCode> in the list may be replaced by <InlineCode>Locator</InlineCode>. This corresponds to assigning to the <See Property="Locators"/> array property. A programmer can disallow this by subscribing to the <InlineCode>bqMayReplace</InlineCode> query. If a <InlineCode>Subscriber</InlineCode> is passed to the function, subscriptions will be placed to notify when the result of <InlineCode>MayReplace</InlineCode> may have changed. </Desc>
            </Method>
            <Method Name="CheckAdd">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="CheckInsert">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="CheckReplace">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="InternalCreateClassList">
               <Summary>Bold-internal</Summary>
               <Desc>Bold-internal</Desc>
            </Method>
            <Method Name="CreateObjectIdList">
               <Summary>Creates an object id list, containing the object ids of the objects in the list.</Summary>
               <Desc>Creates an object id list, containing the object ids of the objects in the list. Ownership of the id list is passed to the caller.</Desc>
            </Method>
            <Method Name="CreateTypedList">
               <Summary>Obsolete</Summary>
               <Desc>Obsolete. If you want to create an object list for a specific class, use the generated list type instead (such as <InlineCode>TPersonList</InlineCode>, for the class <InlineCode>TPerson</InlineCode>).</Desc>
            </Method>
            <Method Name="EnsureObjects">
               <Summary>Fetches several objects in one operation.</Summary>
               <Desc>If some of the objects in the list are not loaded, these will be fetched from persistent storage. This can increase efficiency as all objects are fetched in one operation, rather than one at a time. </Desc>
            </Method>
            <Method Name="EnsureRange">
               <Summary>Fetches several objects in one operation.</Summary>
               <Desc>Same as <See Method="EnsureObjects"/>, except that only the objects between <InlineCode>FromIndex</InlineCode> and <InlineCode>ToIndex</InlineCode> are fetched.</Desc>
            </Method>
            <Method Name="FillFromIDList">
               <Summary>Adds the objects with the ids in IdList.</Summary>
               <Desc>The objects who's object ids are in <InlineCode>IdList</InlineCode> will be added to the list. Objects that are already in the list remain.</Desc>
            </Method>
            <Method Name="FreeContent">
               <Summary>Overrides TBoldMember.FreeContent</Summary>
               <Desc>Overrides <See Class="TBoldMember" Method="FreeContent"/></Desc>
            </Method>
            <Method Name="FreeData">
               <Summary>Overrides TBoldList.FreeData</Summary>
               <Desc>Overrides <See Class="TBoldList" Method="FreeData"/></Desc>
            </Method>
            <Method Name="GetBoldObject">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetBoldRoleRTInfo">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetByIndex">
               <Summary>Lookup using qualifiers</Summary>
               <Desc>If the object list corresponds to a qualified association, this function will return the object that is qualified by the values in the member list. It is usually easier to use the qualified property on the owning object instead such as <InlineCode>aBank.Accounts['anAccountNumber']</InlineCode>. </Desc>
            </Method>
            <Method Name="GetByIndexAndSubscribe">
               <Summary>Same as GetByIndex, but also places subscriptions</Summary>
               <Desc>Same as <InlineCode>GetByIndex</InlineCode>, but also places subscriptions</Desc>
               <SeeAlso><Jump ID="Mech_Subscription" Text="Subscriptions"/></SeeAlso>
            </Method>
            <Method Name="GetCount">
               <Summary>Overrides TBoldList.GetCount</Summary>
               <Desc>Overrides <See Class="TBoldList" Method="GetCount"/></Desc>
            </Method>
            <Method Name="GetElement">
               <Summary>Overrides TBoldList.GetElement</Summary>
               <Desc>Overrides <See Class="TBoldList" Event="GetElement"/></Desc>
            </Method>
            <Method Name="GetElementTypeInfoForType">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetLocator">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetObjectListController">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetStreamName">
               <Summary>Overrides TBoldMember.GetStreamName</Summary>
               <Desc>Overrides <See Class="TBoldMember" Method="GetStreamName"/></Desc>
            </Method>
            <Method Name="GetSubscribeToLocatorsInList">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetSubscribeToObjectsInList">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="Includes">
               <Summary>Same as TBoldList.Includes, but typed as TBoldObject.</Summary>
               <Desc>Same as <See Class="TBoldList" Method="Includes"/>, but typed as <InlineCode>TBoldObject</InlineCode>.</Desc>
            </Method>
            <Method Name="IncludesElement">
               <Summary>Overrides TBoldList.IncludesElement.</Summary>
               <Desc>Overrides <See Class="TBoldList" Method="IncludesElement"/></Desc>
            </Method>
            <Method Name="IndexOf">
               <Summary>Same as TBoldList.IndexOf, but typed as TBoldObject</Summary>
               <Desc>Return the position of <InlineCode>BoldObject</InlineCode> in the list, or <InlineCode>-1</InlineCode> if the item is not in the list. If there are multiple occurences of <InlineCode>BoldObject</InlineCode>, <InlineCode>IndexOf</InlineCode> will return the index of the first occurence. </Desc>
            </Method>
            <Method Name="IndexOfElement">
               <Summary>Overrides TBoldList.IndexOfElement.</Summary>
               <Desc>Overrides <See Class="TBoldList" Method="IndexOfElement"/>.</Desc>
            </Method>
            <Method Name="IndexOfLocator">
               <Summary>Same as IndexOf, but takes a locator instead.</Summary>
               <Desc>Same as <See Method="IndexOf"/>, but takes a locator instead.</Desc>
            </Method>
            <Method Name="InitializeMember">
               <Summary>Overrides TBoldMember.InitializeMember.</Summary>
               <Desc>Overrides <See Class="TBoldMember" Method="InitializeMember"/>.</Desc>
            </Method>
            <Method Name="Insert">
               <Summary>Same as TBoldList.Insert, but types as a TBoldObject.</Summary>
               <Desc>Same as <See Class="TBoldList" Method="Insert"/>, but typed as a <InlineCode>TBoldObject</InlineCode>.</Desc>
            </Method>
            <Method Name="InsertElement">
               <Summary>Overrides TBoldList.InsertElement.</Summary>
               <Desc>Overrides <See Class="TBoldList" Method="InsertElement"/>.</Desc>
            </Method>
            <Method Name="InsertLocator">
               <Summary>Same as Insert, but takes a locator instead.</Summary>
               <Desc>Same as <See Method="Insert"/>, but takes a locator instead.</Desc>
            </Method>
            <Method Name="InsertNew">
               <Summary>Overrides TBoldList.InsertNew.</Summary>
               <Desc>Overrides <See Class="TBoldList" Method="InsertNew"/>.</Desc>
            </Method>
            <Method Name="InternalAddNew">
               <Summary>Overrides TBoldList.InternalAddNew.</Summary>
               <Desc>Overrides <See Class="TBoldList" Method="InternalAddNew"/>.</Desc>
            </Method>
            <Method Name="InternalRemoveByIndex">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="LocatorInList">
               <Summary>Indicates if the object with a given locator is in the list.</Summary>
               <Desc>This method is often the fastest way to test if an object is in the list. Since the list is indexed, <InlineCode>LocatorInList</InlineCode> is faster than using <See Method="IndexOf"/>. Also, <InlineCode>LocatorInList</InlineCode> does not fetch the object.</Desc>
            </Method>
            <Method Name="MakeDbCurrent">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="Move">
               <Summary>Overrides TBoldList.Move.</Summary>
               <Desc>Overrides <See Class="TBoldList" Method="Move"/>.</Desc>
            </Method>
            <Method Name="ObserverMayModify">
               <Summary>Overrides TBoldElement.ObserverMayModify.</Summary>
               <Desc>Overrides <See Class="TBoldElement" Method="ObserverMayModify"/>.</Desc>
            </Method>
            <Method Name="PrepareClear">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="ProxyClass">
               <Summary>Overrides TBoldMember.ProxyClass.</Summary>
               <Desc>Overrides <See Class="TBoldMember" Method="ProxyClass"/>.</Desc>
            </Method>
            <Method Name="ProxyInterface">
               <Summary>Overrides TBoldElement.ProxyInterface.</Summary>
               <Desc>Overrides <See Class="TBoldElement" Method="ProxyInterface"/>.</Desc>
            </Method>
            <Method Name="ReadFromStream">
               <Summary>Obsolete streaming mechanism.</Summary>
               <Desc>Obsolete streaming mechanism.
                  <Warning>Deprecated. Do not use.</Warning>
               </Desc>
            </Method>
            <Method Name="RemoveByIndex">
               <Summary>Overrides TBoldList.RemoveByIndex.</Summary>
               <Desc>Overrides <See Class="TBoldList" Method="RemoveByIndex"/>.</Desc>
            </Method>
            <Method Name="SaveToStream">
               <Summary>Obsolete streaming mechanism.</Summary>
               <Desc>Obsolete streaming mechanism.
                  <Warning>Deprecated. Do not use.</Warning>
               </Desc>
            </Method>
            <Method Name="SetBoldObject">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="SetElement">
               <Summary>Overrides TBoldList.SetElement</Summary>
               <Desc>Overrides <See Class="TBoldList" Method="SetElement"/></Desc>
            </Method>
            <Method Name="SetLocator">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="SetSubscribeToLocatorsInList">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="SetSubscribeToObjectsInList">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="VerifyClass">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
         </Methods>
         <Properties>
            <Property Name="Adjusted">
               <Summary>Bold-internal</Summary>
               <Desc>Bold-internal</Desc>
            </Property>
            <Property Name="BoldObjects">
               <Summary>The objects in the list</Summary>
               <Desc>The objects in the list</Desc>
            </Property>
            <Property Name="BoldRoleRTInfo">
               <Summary></Summary>
               <Desc>This property is the same as <See Class="TBoldMember" Property="BoldMemberRtInfo"/>, casted to <See Class="TBoldRoleRTInfo"/>. </Desc>
            </Property>
            <Property Name="Locators">
               <Summary>The locators of the objects in the list.</Summary>
               <Desc>The locators of the objects in the list.</Desc>
            </Property>
            <Property Name="ObjectListController">
               <Summary></Summary>
               <Desc>private</Desc>
            </Property>
            <Property Name="SubscribeToLocatorsInList">
               <Summary>If the list should detect, and automatically remove, locators that are freed.</Summary>
               <Desc>When this property is <InlineCode>false</InlineCode>, the list will not detect if any of its locators are destroyed. This is only useful if you know that it will never happen (otherwise you will get dangling references, and loads of problems). </Desc>
               <SeeAlso><Jump ID="Mech_Subscription" Text="Subscriptions"/></SeeAlso>
            </Property>
            <Property Name="SubscribeToObjectsInList">
               <Summary>If the list should automatically remove objects that are deleted.</Summary>
               <Desc>Set this property to <InlineCode>False</InlineCode> if you need a list that can hold deleted objects, or if the automatic removal upsets your looping. Default is <InlineCode>True</InlineCode>. </Desc>
               <SeeAlso><Jump ID="Mech_Subscription" Text="Subscriptions"/></SeeAlso>
            </Property>
         </Properties>
         <Summary>A list of Bold objects</Summary>
         <Desc>Apart from being a list of Bold objects, <InlineCode>TBoldObjectList</InlineCode> also offers methods for manipulating the list as a list of <See Class="TBoldObjectLocator"/>s. Using these methods can be more efficient, as the objects won't have to be fetched from persistent storage. </Desc>
      </Class>
      <Class Name="TBoldObjectList_Proxy">
         <Methods>
            <Method Name="GetObjectListController">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
         </Methods>
         <Properties>
            <Property Name="ListController">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
         </Properties>
         <Summary>Internal</Summary>
         <Desc>Internal</Desc>
      </Class>
      <Class Name="TBoldObjectLocator">
         <Methods>
            <Method Name="AtTime">
               <Summary></Summary>
               <Desc>Returns the locator as it looked at the time point identified by the Time time stamp.
                  <Note>This feature is only available in the <Jump ID="mech_OVE" Text="Object Versioning Extension"/> to Bold for Delphi.</Note>
               </Desc>
            </Method>
            <Method Name="CreateWithClassID">
               <Summary>Create locator with given Class-Id</Summary>
               <Desc>This constructor creates a locator with classid <InlineCode>TopSortedIndex</InlineCode>. The locator is added to <InlineCode>BoldSystem.Locators</InlineCode>. The id of the locator will be a newly created <InlineCode>TBoldInternalObjectId</InlineCode>.</Desc>
            </Method>
            <Method Name="CreateWithObjectId">
               <Summary>Create Locator for given ObjectId</Summary>
               <Desc>Create locator with an Id that is a clone of <InlineCode>BoldObjectId</InlineCode>. The locator is added to <InlineCode>BoldSystem.Locators</InlineCode>.</Desc>
            </Method>
            <Method Name="Destroy">
               <Summary>Destroy object locator</Summary>
               <Desc>Destroys locator, freeing BoldObjectId.
                  <Note>This destructor should not be called directly, since <InlineCode>BoldSystem.Locators</InlineCode> owns it's objects. Call <InlineCode>BoldSystem.Locators.Remove(locator)</InlineCode> instead.</Note>
               </Desc>
            </Method>
            <Method Name="DiscardBoldObject">
               <Summary>Discard BoldObject if it is in memory.</Summary>
               <Desc>Discard BoldObject if it is in memory.</Desc>
            </Method>
            <Method Name="EmbeddedSingleLinksFromObject">
               <Summary>Copy values of embedded single links to BoldObject</Summary>
               <Desc>This method copies the values of embedded-single links from actual object to the locator. It is only intended to be called by <See Method="UnloadBoldObject"/></Desc>
            </Method>
            <Method Name="EmbeddedSingleLinksToObject">
               <Summary>Copy values of embedded single links to BoldObject</Summary>
               <Desc>This method copies the values of embedded-single links stored in the locator to the actual object, and frees the memory used to save them. It is inteded to be called as soon as the object has been instansiated in memory.</Desc>
            </Method>
            <Method Name="EnsureBoldObject">
               <Summary>Ensure that BoldObject is assigned</Summary>
               <Desc>The method will fetch the object corresponding to BoldObjectId into memory if is is not already there.</Desc>
            </Method>
            <Method Name="FetchBoldObject">
               <Summary>Fetch Boldobject for BoldObjectId</Summary>
               <Desc>Fetch contents of object using fSystemPersistenceHandler.FetchObjectById. If the object is not persistent then this message will raise an exception. </Desc>
            </Method>
            <Method Name="FreeEmbeddedSingleLinksOfOtherEnd">
               <Summary>Free any embedded links stored in locators</Summary>
               <Desc>This method will examine all indirect AssociationEnds on the object and check if the information in the other end is stored in the embeddedsinglelinks in the locator for the otther end of any of the links. If so, this information will be cleared.</Desc>
            </Method>
            <Method Name="GetAsString">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetEmbeddedSingleLinks">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetEnsuredBoldObject">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetObjectIsPersistent">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="Hash">
               <Summary>The locator has a hash value, allowing it to be efficiently indexed in a list.</Summary>
               <Desc>The locator has a hash value, allowing it to be efficiently indexed in a list. </Desc>
            </Method>
            <Method Name="SetEmbeddedSingleLinks">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="TypeAtLeast">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="UnloadBoldObject">
               <Summary>Unloads the locator's Bold object from memory.</Summary>
               <Desc>Unloads the locator's Bold object from memory. UnloadBoldObject will raise an exception if the Bold object is dirty. </Desc>
            </Method>
         </Methods>
         <Properties>
            <Property Name="AsString">
               <Summary>The textual representation of the locator.</Summary>
               <Desc>The textual representation of the locator is the same as the textual representation of its object id. </Desc>
            </Property>
            <Property Name="BoldObject">
               <Summary>The Bold object that the locator is a locator for.</Summary>
               <Desc>This property contains the Bold object that the locator is a locator for. If the Bold object is not loaded into memory, the BoldObject property is nil. </Desc>
            </Property>
            <Property Name="BoldObjectID">
               <Summary>Id of object</Summary>
               <Desc>This is the ID of the object which the locator refers to. The BoldObjectId is owned by the locator.</Desc>
            </Property>
            <Property Name="BoldSystem">
               <Summary>TBoldSystem that the locator belongs to</Summary>
               <Desc>Each locator belongs to a TBoldSystem. All locators bolonging to a system can be found in the Locators property of the system.</Desc>
            </Property>
            <Property Name="EmbeddedSingleLinks">
               <Summary>Get/Set embedded single links when object is not loaded</Summary>
               <Desc>The EmbeddedSingleLinks property makes it possible to store the values of all embedded single links in the Locator when the object is not loaded. Assigning to this property will automatically create storage for the embedded singllinks. It is freed by <See Method="EmbeddedSingleLinksToObject"/></Desc>
            </Property>
            <Property Name="EnsuredBoldObject">
               <Summary>The Bold object that the locator is a locator for.</Summary>
               <Desc>This is the same as the <See Property="BoldObject"/> property if the Bold object is loaded in memory. If it is not loaded, the EnsuredBoldObject property loads the Bold object and returns it, whereas the BoldObject property returns nil. </Desc>
            </Property>
            <Property Name="ObjectIsPersistent">
               <Summary>If the object is persistent</Summary>
               <Desc>If the object is persistent</Desc>
            </Property>
         </Properties>
         <Summary>The purpose of a TBoldObjectLocator is to provide a way to refer to objects without having them loaded in memory. </Summary>
         <Desc>Its two main features are the <See Property="BoldObject"/> and <See Property="BoldObjectID"/> properties. Locators are always owned by a <See Class="TBoldSystem" Property="Locators"/> </Desc>
      </Class>
      <Class Name="TBoldObjectLocatorKey">
         <Methods>
            <Method Name="Create">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="Hash">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="Match">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
         </Methods>
         <Summary>Bold-internal</Summary>
         <Desc>Bold-internal</Desc>
      </Class>
      <Class Name="TBoldObjectReference">
         <Methods>
            <Method Name="AdjustOldValues">
               <Summary>Bold-internal</Summary>
               <Desc>Bold-internal</Desc>
            </Method>
            <Method Name="Assign">
               <Summary>Overrides TBoldElement.Assign</Summary>
               <Desc>A TBoldObjectReference can be assigned another TBoldObjectReference, or a TBoldObject. </Desc>
            </Method>
            <Method Name="AssignContentValueFromElement">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="CanClear">
               <Summary>If it is allowed to Clear the reference</Summary>
               <Desc>You can make CanClear return false, and thus prohibit Clear on a TBoldObjectReference, by subscribing to the bqMayClear query and returning false. </Desc>
            </Method>
            <Method Name="CanSet">
               <Summary>If it is allowed to set the object reference to the NewObject</Summary>
               <Desc>Returns <InlineCode>True</InlineCode> if it is allowed to set the object reference to the NewObject. A programmer can disallow setting by subscribing to the <InlineCode>bqMaySet</InlineCode> query. If a <InlineCode>Subscriber</InlineCode> is passed to the function, subscriptions will be placed to notify when the result of <InlineCode>CanSet</InlineCode> may have changed. Note that the parameter to the <InlineCode>bqMaySet</InlineCode> query will be the locator of the NewObject, and not the NewObject itself. </Desc>
               <SeeAlso><Jump ID="Mech_Subscription" Text="Subscriptions"/></SeeAlso>
            </Method>
            <Method Name="CanSetLocator">
               <Summary>Same as CanSet, but takes a locator instead.</Summary>
               <Desc>Returns <InlineCode>True</InlineCode> if it is allowed to set the object reference to the Bold object of NewLocator. A programmer can disallow setting by subscribing to the <InlineCode>bqMaySet</InlineCode> query. If a <InlineCode>Subscriber</InlineCode> is passed to the function, subscriptions will be placed to notify when the result of <InlineCode>CanSetLocator</InlineCode> may have changed. </Desc>
               <SeeAlso><Jump ID="Mech_Subscription" Text="Subscriptions"/></SeeAlso>
            </Method>
            <Method Name="Clear">
               <Summary>Set the object reference to nil.</Summary>
               <Desc>Set the object reference to <InlineCode>nil</InlineCode>. </Desc>
            </Method>
            <Method Name="CompareToAs">
               <Summary>Overrides TBoldElement.CompareToAs</Summary>
               <Desc>Overrides <See Class="TBoldElement" Method="CompareToAs"/>. An object reference can be compared with another object reference, or a <InlineCode>TBoldObject</InlineCode>. The result is the same as comparing the objects, except if one of the references is <InlineCode>nil</InlineCode>. <InlineCode>Nil</InlineCode> is considered smaller than any object.</Desc>
            </Method>
            <Method Name="CreateTypedReference">
               <Summary>Construct a TBoldObjectReference for Bold objects of type ObjectClass.</Summary>
               <Desc>Construct a TBoldObjectReference for Bold objects of type ObjectClass. </Desc>
            </Method>
            <Method Name="DefaultSubscribe">
               <Summary>Overrides TBoldElement.DefaultSubscribe</Summary>
               <Desc>The default events for a <InlineCode>TBoldObjectReference</InlineCode> are <InlineCode>beValueChanged</InlineCode> and <InlineCode>beValueInvalid</InlineCode>. </Desc>
               <SeeAlso><Jump ID="Mech_Subscription" Text="Subscriptions"/></SeeAlso>
            </Method>
            <Method Name="Destroy">
               <Summary>Destructor</Summary>
               <Desc>Destructor</Desc>
            </Method>
            <Method Name="DoSetInitialValue">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetAsList">
               <Summary>Overrides TBoldElement.GetAsList</Summary>
               <Desc>Will result in a <See Class="TBoldObjectList"/> containing the Bold object that the references refers to. If the reference is <InlineCode>nil</InlineCode>, the list will be empty.</Desc>
            </Method>
            <Method Name="GetBoldObject">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetBoldRoleRTInfo">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetController">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetLocator">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetOldEmbeddingOtherEndId">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetStreamName">
               <Summary>Overrides TBoldMember.GetStreamName</Summary>
               <Desc>Overrides <See Class="TBoldMember" Method="GetStreamName"/></Desc>
            </Method>
            <Method Name="GetStringRepresentation">
               <Summary>Overrides TBoldElement.GetStringRepresentation</Summary>
               <Desc>The string representation of a <InlineCode>TBoldObjectReference</InlineCode> is the string representation of the object it refers, or the empty string if <InlineCode>nil</InlineCode></Desc>
            </Method>
            <Method Name="InitializeMember">
               <Summary>Overrides TBoldMember.InitializeMember</Summary>
               <Desc>Overrides <See Class="TBoldMember" Interface="InitializeMember"/></Desc>
            </Method>
            <Method Name="InternalMayUpdate">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="InternalSetLocator">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="IsEqualAs">
               <Summary>Overrides TBoldElement.IsEqualAs</Summary>
               <Desc>A reference is considered equal if the object it refers is equal. Also, a <InlineCode>nil</InlineCode> reference is equal to another <InlineCode>nil</InlineCode> reference, or to <InlineCode>nil</InlineCode>.</Desc>
            </Method>
            <Method Name="IsEqualToValue">
               <Summary>Overrides TBoldMember.IsEqualToValue</Summary>
               <Desc>Overrides <See Class="TBoldMember" Method="IsEqualToValue"/>. In contrast to <See Method="IsEqualAs"/>, <InlineCode>IsEqualToValue</InlineCode> is only true if the references refer the <EM>same</EM> object, but not if two different objects are equal (using IsEqual).</Desc>
            </Method>
            <Method Name="MakeDbCurrent">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="ObserverMayModify">
               <Summary>Overrides TBoldElement.ObserverMayModify</Summary>
               <Desc>Overrides <See Class="TBoldElement" Method="ObserverMayModify"/></Desc>
            </Method>
            <Method Name="PreDiscard">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="ProxyClass">
               <Summary>Overrides TBoldMember.ProxyClass</Summary>
               <Desc>Overrides <See Class="TBoldMember" Method="ProxyClass"/></Desc>
            </Method>
            <Method Name="ProxyInterface">
               <Summary>Overrides TBoldElement.ProxyClass</Summary>
               <Desc>Overrides <See Class="TBoldElement" Method="ProxyClass"/></Desc>
            </Method>
            <Method Name="ReadFromStream">
               <Summary>Obsolete streaming mechanism</Summary>
               <Desc>Obsolete streaming mechanism</Desc>
            </Method>
            <Method Name="SaveToStream">
               <Summary>Obsolete streaming mechanism</Summary>
               <Desc>Obsolete streaming mechanism</Desc>
            </Method>
            <Method Name="SetBoldObject">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="SetLocator">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="SetStringRepresentation">
               <Summary>Overrides TBoldElement.SetStringRepresentation</Summary>
               <Desc>This sets the string representation of the referred object.</Desc>
            </Method>
            <Method Name="SubscribeToStringRepresentation">
               <Summary>Overrides TBoldElement.SubscribeToStringRepresentation</Summary>
               <Desc>Overrides <See Class="TBoldElement" Method="SubscribeToStringRepresentation"/></Desc>
               <SeeAlso><Jump ID="Mech_Subscription" Text="Subscriptions"/></SeeAlso>
            </Method>
            <Method Name="VerifyClass">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
         </Methods>
         <Properties>
            <Property Name="BoldObject">
               <Summary>The object the reference refers to</Summary>
               <Desc>The object the reference refers to</Desc>
            </Property>
            <Property Name="BoldRoleRTInfo">
               <Summary>The model information for the object reference</Summary>
               <Desc>This property is the same as <See Class="TBoldMember" Property="BoldMemberRtInfo"/>, casted to <See Class="TBoldRoleRTInfo"/>. </Desc>
            </Property>
            <Property Name="HasOldValues">
               <Summary>Bold-internal</Summary>
               <Desc>Bold-internal</Desc>
            </Property>
            <Property Name="Locator">
               <Summary>The locator of the referred object</Summary>
               <Desc>It can be more efficient to access the <InlineCode>Locator</InlineCode> property, than the <See Method="BoldObject"/> property, as it will not require the object to be fetched.</Desc>
            </Property>
            <Property Name="OldEmbeddingOtherEndId">
               <Summary>Bold-internal</Summary>
               <Desc>Bold-internal</Desc>
            </Property>
            <Property Name="ReferenceController">
               <Summary></Summary>
               <Desc>private</Desc>
            </Property>
         </Properties>
         <Summary>Reference to a Bold object</Summary>
         <Desc>A TBoldObjectReference is a member that holds a reference to a Bold object. It is primarily used for roles with [0..1] multiplicity. Like <See Class="TBoldObjectList"/>, it has additional methods for manipulating the Bold object by its locator. This is more efficient since the Bold object does not have to be loaded into memory. </Desc>
      </Class>
      <Class Name="TBoldObjectReferenceController">
         <Methods>
            <Method Name="AssignContentValue">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="Create">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="Destroy">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetLocator">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetStreamName">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="MakeDbCurrent">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="ObjectChangeReceive">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="ProxyClass">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="SetLocator">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
         </Methods>
         <Summary></Summary>
         <Desc></Desc>
      </Class>
      <Class Name="TBoldObjectReference_Proxy">
         <Methods>
            <Method Name="AssignContentValue">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetObjectReferenceController">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetReferenceController">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
         </Methods>
         <Properties>
            <Property Name="ObjectReferenceController">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="ReferenceController">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
         </Properties>
         <Summary></Summary>
         <Desc></Desc>
      </Class>
      <Class Name="TBoldObject_Proxy">
         <Methods>
            <Method Name="EnsureMember">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetBoldExistenceState">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetBoldMemberCount">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetBoldPersistenceState">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetGlobalId">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetIsModified">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetIsReadOnly">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetObjectId">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetProxedObject">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetTimeStamp">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetValueByIndex">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetValueByMemberId">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="SetBoldExistenceState">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="SetBoldPersistenceState">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="SetGlobalId">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="SetIsReadOnly">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="SetTimeStamp">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
         </Methods>
         <Properties>
            <Property Name="ProxedObject">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
         </Properties>
         <Summary></Summary>
         <Desc></Desc>
      </Class>
      <Class Name="TBoldSystem">
         <Events>
            <Event Name="OnCreateApproximateObjectError">
               <Summary>This event is raised when an object with inexact type is created</Summary>
               <Desc>When an object is recreated as a part of being fetched, the persistence mechanism is usually able to determine exactly what type the object should be before trying to recreate the object. If it is impossible to determine the exact type of the object (perhaps because the object has been deleted in the persistent storage), the system is unable to create the object. Normally, this will result in an exception. If this event is set, and the approximate type of the object is not an abstract type, the system will allow the creation of the superclass instead, and call this event to notify the application developer that something is wrong.
                  <P>The most likely scenario when this happens is if an object has an embedded relation to another object, and this related object has subclasses, and the related object has been deleted. If the event is defined, the related object will be recreated in memory and the event will be called. Normally, the persistence mechanism will mark such an object as deleted and readonly.</P>
                  <P>Running the data integrity validator from the model-editor would normally detect this problem.</P>
               </Desc>
            </Event>
            <Event Name="OnOptimisticLockingFailed">
               <Summary>Called when UpdateDatabase fails because of an optimisic lock.</Summary>
               <Desc>Called when UpdateDatabase fails because of an optimisic lock. See <Jump ID="mech_OptimisicLocking" Text="Optimistic Locking"/>. If the event is assigned, no exception will be raised.</Desc>
            </Event>
            <Event Name="OnPreUpdate">
               <Summary>Called before updating database</Summary>
               <Desc>See <See Class="TBoldSystemHandle" Event="OnPreUpdate"/>. </Desc>
            </Event>
         </Events>
         <Methods>
            <Method Name="AddToTransaction">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="AllowObjectDestruction">
               <Summary>Allows Bold objects to be destroyed.</Summary>
               <Desc>Allows Bold objects to be destroyed. This may result in the destruction of objects whose destruction was delayed. See <See Method="DelayObjectDestruction"/> for details. </Desc>
            </Method>
            <Method Name="AssertLinkIntegrity">
               <Summary>Bold-internal</Summary>
               <Desc>Bold-internal</Desc>
            </Method>
            <Method Name="CanCommit">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="CanCreateObject">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="CanDeleteObject">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="CommitTransaction">
               <Summary>Commits an in-memory transaction</Summary>
               <Desc><InlineCode>TBoldSystem.CommitTransaction</InlineCode> ends a transaction started with <See Text="TBoldSystem.StartTransaction" Method="StartTransaction"/>. If the transaction is not allowed to commit an exception is raised. There are two ways this could happen.
                  <P>First, if there have been nested transactions, and one of the inner transactions failed (i.e., <See Method="RollbackTransaction"/> was called), then the entire transaction must fail, and thus <InlineCode>CommitTransaction</InlineCode> will raise an exception.</P>
                  <P>Second, there are a couple of places where validation rules can be inserted. There is a virtual method <See Class="TBoldDomainElement" Method="MayCommit"/> on <See Class="TBoldDomainElement"/>, and an associated query-event <InlineCode>bqMayCommit</InlineCode>. These are called on each Bold object and Bold member that have been modified during the transaction. The system itself also sends the <InlineCode>bqMayCommit</InlineCode> query-event. If any of these return <InlineCode>False</InlineCode> then the transaction is not allowed to commit and <InlineCode>CommitTransaction</InlineCode> raises an exception. If there are nested transactions the validation is only performed on the outmost nesting level.</P>
                  <P>There is an alternative method <See Method="TryCommitTransaction" Text="TBoldSystem.TryCommitTransaction"/> that indicates its success by returning <InlineCode>true</InlineCode> if the transaction could commit, or <InlineCode>false</InlineCode> if it failed. It also automatically performs a rollback if the transaction failed.</P>
               </Desc>
            </Method>
            <Method Name="CopyMemberToRollBackBuffer">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="CopyObjectToRollBackBuffer">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="Create">
               <Summary>Constructor</Summary>
               <Desc>This constructor cannot be used to create a TBoldSystem. Instead, use <See Method="CreateWithTypeInfo"/>.</Desc>
            </Method>
            <Method Name="CreateExistingObjectByID">
               <Summary>Bold-internal</Summary>
               <Desc>This function is used internally by Bold to create the in-memory representation of a Bold object. It does not fetch the object from the persistence layer, and all members are initialized to Invalid. For normal Bold users, there is no need to call this function directly. </Desc>
            </Method>
            <Method Name="CreateNewObjectByExpressionName">
               <Summary>Creates a new Bold object</Summary>
               <Desc>This method is useful for creating new Bold objects if there is no generated code. If there is generated code, the instance created will be of the correct Delphi type. Without generated code, the instance will be an instance of <See Class="TBoldObject"/>.</Desc>
            </Method>
            <Method Name="CreateWithTypeInfo">
               <Summary>Creates a TBoldSystem instance for a given model.</Summary>
               <Desc>This constructor creates a <InlineCode>TBoldSystem</InlineCode> instance for a given model. For normal Bold users, there is no need to call this function. Use a <See Class="TBoldSystemHandle"/> component instead. </Desc>
            </Method>
            <Method Name="DefaultSubscribe">
               <Summary>Overrides TBoldElement.DefaultSubscribe</Summary>
               <Desc>No subscriptions are placed on a system.</Desc>
               <SeeAlso><Jump ID="Mech_Subscription" Text="Subscriptions"/></SeeAlso>
            </Method>
            <Method Name="DefaultSystem">
               <Summary>The global default Bold system, if there is one.</Summary>
               <Desc>If there exists (globally in the application) a Bold system with <See Class="IsDefault"/> = true, that system will be returned.</Desc>
            </Method>
            <Method Name="DelayObjectDestruction">
               <Summary>Stops Bold objects from being destroyed.</Summary>
               <Desc>After this method is called, no instances of <See Class="TBoldObject"/> or its descendants will be destroyed until a subsequent call to <See Method="AllowObjectDestruction"/> is made. Objects that were supposed to be destroyed during this time will be queued and destoyed later. If several calls to <InlineCode>DelayObjectDestruction</InlineCode> are made, no objects will be destroyed until the last matching call to <InlineCode>AllowObjectDestruction</InlineCode> is made. </Desc>
            </Method>
            <Method Name="Destroy">
               <Summary>Destructor</Summary>
               <Desc>Destructor</Desc>
            </Method>
            <Method Name="DestroyObject">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="DirtyAsObjectList">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="Discard">
               <Summary>Discards all dirty objects in the Bold system.</Summary>
               <Desc>Discards all dirty objects in the Bold system. This method also discards all transient objects. </Desc>
            </Method>
            <Method Name="DiscardPersistent">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="DiscardTransient">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="EnsureCanDestroy">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="EnsureEnclosure">
               <Summary>Makes a list technically consistent for updating.</Summary>
               <Desc><InlineCode>EnsureEnclosure</InlineCode> takes a list of objects and adds those additional objects needed to make it technically consistent for updating. For example, if an object in the list has an association to a newly created object, the new object will also be added to the list, so that the database does not contain a broken association.
                  <P><InlineCode>EnsureEnclosure</InlineCode> returns <InlineCode>true</InlineCode> if the list was already complete, and false if objects were added to make it complete.</P>
                  <P>If <InlineCode>ValidateOnly</InlineCode> is true the list will not actually be altered, but only the result value will be computed.</P>
               </Desc>
            </Method>
            <Method Name="FetchLinksWithObjects">
               <Summary>Optimized fetching of links</Summary>
               <Desc>Use this method to optimize the fetching of objects from the persistent storage. The OCL-evaluator will do this whenever possible. It will ensure that all objects in the list will have the named relation fetched, and all related objects in this association will also be fetched. </Desc>
            </Method>
            <Method Name="FindClassByExpressionName">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetAllInClass">
               <Summary>All instances of the specified class will be added to the list.</Summary>
               <Desc>All instances of the specified class will be added to the list.</Desc>
            </Method>
            <Method Name="GetAllInClassWithSQL">
               <Summary>Fills aList with all the instances of AClass that match the SQL condition WhereClause.</Summary>
               <Desc>Fills <InlineCode>aList</InlineCode> with all the instances of <InlineCode>AClass</InlineCode> that match the SQL condition <InlineCode>WhereClause</InlineCode>. The condition will be evaluated in the persistent storage, therefore changes in the system that has not been stored may not be reflected in the result.
                  <P>An easier way to use this method is to use the <See Class="TBoldSQLHandle"/> component</P>
               </Desc>
               <Params>
                  <Param Name="aList">
                     <Desc>The list to be filled with the resulting objects</Desc>
                  </Param>
                  <Param Name="aClass">
                     <Desc>The class from which you want your result such as "<InlineCode>TPerson</InlineCode>"</Desc>
                  </Param>
                  <Param Name="WhereClause">
                     <Desc>a SQL-fragment that restricts the objects based on their attributes or relations. This can be arbitrarily complex and may contain nested select-statements</Desc>
                  </Param>
                  <Param Name="OrderByClause">
                     <Desc>a SQL-fragment (optionally empty) that specifies the order of the objects</Desc>
                  </Param>
                  <Param Name="Params">
                     <Desc>If the SQLfragment contains values such as dates, it is good to send these values as params instead of as text (since many databases rely on the operating system to decide the string format of a date). Give the parameter a name, and refer to the value using ":name" in your <InlineCode>WhereClause</InlineCode></Desc>
                  </Param>
                  <Param Name="JoinInheritedTables">
                     <Desc>If the <InlineCode>WhereClause</InlineCode> contains references to inherited attributes or relations, then this property must be <InlineCode>true</InlineCode>, so that the tables from the super classes are joined in the query. This will normally decrease performance</Desc>
                  </Param>
                  <Param Name="MaxAnswer">
                     <Desc>If you are not sure how many objects will be returned by your query, you can restrict the number in the result set by providing a value for the <InlineCode>MaxAnswer</InlineCode> parameter.</Desc>
                  </Param>
                  <Param Name="Offset">
                     <Desc> If you want to skip initial objects (perhaps becayuse they have already been retrieved with a previous call to this method with a restriction in <InlineCode>MaxAnswer</InlineCode>) you can provide a value for the <InlineCode>Offset</InlineCode> parameter </Desc>
                  </Param>
               </Params>
            </Method>
            <Method Name="GetAllWithCondition">
               <Summary>Fills List with all instances that matches the condition.</Summary>
               <Desc>Fills <InlineCode>List</InlineCode> with all instances that matches the condition. The condition will be evaluated in the persistent storage, therefore changes in the system that has not been stored may not be reflected in the result. </Desc>
            </Method>
            <Method Name="GetAsIBoldvalueSpace">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetAsList">
               <Summary>Overrides TBoldElement.GetAsList</Summary>
               <Desc>The list representation of a system is a <See Class="TBoldMemberList"/> containing object lists with all instances of all classes in the system.</Desc>
            </Method>
            <Method Name="GetBoldDirty">
               <Summary>Overrides TBoldDomainElement.GetBoldDirty</Summary>
               <Desc>A system is dirty if it contains any dirty objects.</Desc>
            </Method>
            <Method Name="GetBoldType">
               <Summary>Overrides TBoldElement.GetBoldType</Summary>
               <Desc>The BoldType of a system is its SystemTypeInfo, i.e. the run-time representation of the model.</Desc>
            </Method>
            <Method Name="GetClassByExpressionName">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetClassByIndex">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetDirtyObjects">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetDisplayName">
               <Summary>Overrides TBoldElement.GetDisplayName</Summary>
               <Desc>The display name of a system is the name of the model.</Desc>
            </Method>
            <Method Name="GetEnsuredLocatorByID">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetEvaluator">
               <Summary>Overrides TBoldElement.GetEvaluator</Summary>
               <Desc>Overrides <See Class="TBoldElement" Method="GetEvaluator"/></Desc>
            </Method>
            <Method Name="GetIsDefault">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetOnPreUpdate">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetStringRepresentation">
               <Summary>Overrides TBoldElement.GetStringRepresentation</Summary>
               <Desc>The string representation of a system is the expression name of the model.</Desc>
            </Method>
            <Method Name="GetTimeForTimestamp">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetTimeStampOfLatestUpdate">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetTimestampForTime">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetUndoHandler">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="GetUndoHandlerInterface">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="InTransaction">
               <Summary>If the system is currently in a transaction</Summary>
               <Desc>If there is an open transaction in the system, i.e. if a call to <See Method="StartTransaction"/> has been made without a matching call to <See Method="CommitTransaction"/> or <See Method="RollbackTransaction"/>.</Desc>
            </Method>
            <Method Name="MakeDefault">
               <Summary>Makes the system the default system</Summary>
               <Desc>Makes the system the default system. See <See Method="DefaultSystem"/>.</Desc>
            </Method>
            <Method Name="MarkObjectClean">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="MarkObjectDirty">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="MarkObjectPossiblyCleaner">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="ProxyInterface">
               <Summary>Overrides TBoldElement.ProxyInterface</Summary>
               <Desc>Overrides <See Class="TBoldElement" Method="ProxyInterface"/></Desc>
            </Method>
            <Method Name="ReceiveEventFromOwned">
               <Summary>Overrides TBoldDomainElement.ReceiveEventFromOwned</Summary>
               <Desc>Overrides <See Class="TBoldDomainElement" Method="ReceiveEventFromOwned"/></Desc>
            </Method>
            <Method Name="RollBackAreaAssigned">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="RollbackTransaction">
               <Summary>Undoes all changes made in the system since the transaction was started.</Summary>
               <Desc>Undoes all changes made in the system since the transaction was started (with a call to <See Method="StartTransaction"/>). If the transaction is nested inside another StartTransaction/CommitTransaction pair, then the transaction is not rolled back straight away. Rather, this happens at the outmost nesting level. </Desc>
            </Method>
            <Method Name="SetIsdefault">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="SetOnPreUpdate">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="SetPessimisticLockHandler">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="SetTransactionMode">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="StartTransaction">
               <Summary>Starts an in-memory transaction</Summary>
               <Desc>A series of object manipulations can be enclosed in a transaction, thus allowing them to either execute as a whole, or be rolled back. A transaction is started with a call to TBoldSystem.StartTransaction. Any subsequent changes to Bold objects in that system becomes part of the transaction. If successful, the transaction is ended with a call to <See Text="TBoldSystem.CommitTransaction" Method="CommitTransaction"/>. If some part of the transaction fails, it can be rolled back with a call to <See Text="TBoldSystem.RollbackTransaction" Method="RollbackTransaction"/>. In that case, all changes that were made since the transaction started are undone.
                  <P>You can have nested calls to <InlineCode>StartTransaction</InlineCode> and <InlineCode>CommitTransaction</InlineCode>/<InlineCode>RollbackTransaction</InlineCode>. In that case, the entire transaction is either commited or rolled back at the outmost level only. That is, if one of the inner transactions fail, then the entire transaction also fails.</P>
               </Desc>
               <Examples>
                  <Example>
                     <Body>The following code structure is recommended for transactions: 
                        <Code>aBoldSystem.StartTransaction;
try
  ...operations that are part of the transaction...
  aBoldSystem.CommitTransaction;
except
  aBoldSystem.RollbackTransaction;
  raise;
end;</Code>
                     </Body>
                  </Example>
               </Examples>
            </Method>
            <Method Name="StreamOut">
               <Summary></Summary>
               <Desc>private</Desc>
            </Method>
            <Method Name="TryCommitTransaction">
               <Summary>Commit that doesn't raise exceptions</Summary>
               <Desc><InlineCode>TrCommitTransaction</InlineCode> works like <See Method="CommitTransaction"/>, but will not raise an exception if the commit fails. Instead, it will rollback the transaction and return false.</Desc>
            </Method>
            <Method Name="UpdateDatabase">
               <Summary>Write changes to persistent storage</Summary>
               <Desc>Calling this method will cause every dirty object (new objects, deleted objects or objects that have been changed) to be sent to the persistence mechanism (normally a database).
                  <P>If <Jump Text="Optimistic Locking" ID="Mech_OptimisticLocking"/> is enabled, and this fails, an <InlineCode>EBoldOperationFailedforObjectList</InlineCode> exception will be raised</P>
               </Desc>
               <SeeAlso><See Method="UpdateDatabaseWithList"/></SeeAlso>
               <SeeAlso><See Method="Discard"/></SeeAlso>
            </Method>
            <Method Name="UpdateDatabaseWithList">
               <Summary>Write selected objects to persistent storage.</Summary>
               <Desc>Calling this method will cause the objects in the objectlist to be sent to the persistence mechanism (normally a database). An enclosure of objects will be added to ensure that no embedded links in the persistent storage point to invalid objects.
                  <P>It's the <See Class="TBoldSystemPersistenceHandler" Method="UpdateDatabaseWithList" Text="TBoldSystemPersistenceHandler.UpdateDatabaseWithList"/> that takes care of the actual saving of the objects in the list.</P>
                  <P>If <Jump Text="Optimistic Locking" ID="Mech_OptimisticLocking"/> is enabled, and this fails, an <InlineCode>EBoldOperationFailedforObjectList</InlineCode> exception will be raised</P>
               </Desc>
               <SeeAlso><See Method="UpdateDatabase"/></SeeAlso>
               <SeeAlso><See Method="Discard"/></SeeAlso>
            </Method>
         </Methods>
         <Properties>
            <Property Name="AsIBoldvalueSpace">
               <Summary>The value space view of the system</Summary>
               <Desc>Use this property to get an <InlineCode>IBoldValueSpace</InlineCode> interface to the system. This is used internally.</Desc>
            </Property>
            <Property Name="BoldSystemTypeInfo">
               <Summary>The run-time model for the system</Summary>
               <Desc>The run-time model for the system</Desc>
            </Property>
            <Property Name="ClassByExpressionName">
               <Summary>Gets the list of all instances of a given class.</Summary>
               <Desc>Gets the list of all instances of a given class.</Desc>
            </Property>
            <Property Name="Classes">
               <Summary>The lists of all instances of the classes</Summary>
               <Desc>Gets the list of all instances of a class with a given topsorted index.</Desc>
            </Property>
            <Property Name="DirtyObjects">
               <Summary>All objects that have changed in memory</Summary>
               <Desc>This list contains all objects, for this system, that have changed in memory, and needs to be updated in the persistent storage. </Desc>
            </Property>
            <Property Name="EnsuredLocatorByID">
               <Summary>The TBoldObjectLocator for the Bold object corresponding to ObjectID</Summary>
               <Desc>The <See Class="TBoldObjectLocator"/> for the Bold object corresponding to ObjectID. If none exists, the system creates one. </Desc>
            </Property>
            <Property Name="IsDefault">
               <Summary>If the system is the default system</Summary>
               <Desc>The default system is the system returned by <See Method="DefaultSystem"/>. Calling <See Method="MakeDefault"/> makes a system the default system.</Desc>
            </Property>
            <Property Name="Locators">
               <Summary>All loaded locators in the system</Summary>
               <Desc>This list contains all the locators that have been fetched, even if their objects have not.</Desc>
            </Property>
            <Property Name="NewDirtyList">
               <Summary>List that catches modified objects</Summary>
               <Desc>This property is typically assigned by the user from the <InlineCode>OnActivate</InlineCode> event of a form. The list will then contain all objects that have been made dirty by that form. Note that this is different from the <See Property="NewModifiedList"/> in that objects are added only when they first become dirty. </Desc>
            </Property>
            <Property Name="NewModifiedList">
               <Summary>List that catches modified objects</Summary>
               <Desc>This property is typically assigned by the user from the <InlineCode>OnActivate</InlineCode> event of a form. The list will then contain all objects that have been modfied by that form. Note that this is different from the <See Property="NewDirtyList"/> in that objects are added even if they were already dirty. </Desc>
            </Property>
            <Property Name="OnPreUpdate">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="OptimisticLockHandler">
               <Summary>Bold-internal</Summary>
               <Desc>Bold-internal</Desc>
            </Property>
            <Property Name="PersistenceController">
               <Summary>The persistence controller of the system</Summary>
               <Desc>The persistence controller of the system. If <InlineCode>PersistenceController</InlineCode> is <InlineCode>nil</InlineCode> the system is transient. </Desc>
            </Property>
            <Property Name="PessimisticLockHandler">
               <Summary>Used for pessimistic locking</Summary>
               <Desc>If assigned, the elements of the system will request locks pessimistically before being modified. Do not set the property directly. Instead use a <See Class="TBoldLockingHandle"/>, and connect it to the <See Class="TBoldSystemHandle"/>. </Desc>
            </Property>
            <Property Name="RegionFactory">
               <Summary>Bold-internal</Summary>
               <Desc>Bold-internal</Desc>
            </Property>
            <Property Name="SystemPersistenceHandler">
               <Summary>For internal use</Summary>
               <Desc>For internal use</Desc>
            </Property>
            <Property Name="TimeForTimestamp">
               <Summary>When a specified time stamp occurred.</Summary>
               <Desc>When a specified time stamp occurred.
                  <Note>Note! This feature is only available in the <Jump ID="mech_OVE" Text="Object Versioning Extension"/> to Bold for Delphi/Bold for C++.</Note>
               </Desc>
            </Property>
            <Property Name="TimeStampOfLatestUpdate">
               <Summary>The time stamp associated with the latest update operation performed on the system.</Summary>
               <Desc>The time stamp associated with the latest update operation performed on the system. The value is -1 if no update operation has been performed yet.
                  <Note>This feature is only available in the <Jump ID="mech_OVE" Text="Object Versioning Extension"/> to Bold for Delphi/Bold for C++.</Note>
               </Desc>
            </Property>
            <Property Name="TimestampForTime">
               <Summary>What time stamp occurred at a specified time.</Summary>
               <Desc>What time stamp occurred at a specified time.
                  <Note>This feature is only available in the <Jump ID="mech_OVE" Text="Object Versioning Extension"/> to Bold for Delphi/Bold for C++.</Note>
               </Desc>
            </Property>
            <Property Name="TransactionMode">
               <Summary>How the system uses transactions internally</Summary>
               <Desc>The system uses transactions internally for various operations, such as cascading delete and manipulating associations. It is possible to optimize perfomance by setting this property to <InlineCode>stmUnsafe</InlineCode>. This will cause the system not to use transactions. However, should any operation fail while in unsafe mode, the system becomes potentially unstable and inconsistent.</Desc>
            </Property>
            <Property Name="UndoHandler">
               <Summary>Bold-internal</Summary>
               <Desc>Bold-internal</Desc>
            </Property>
            <Property Name="UndoHandlerInterface">
               <Summary>The interface to Undo/Redo functionality of the system</Summary>
               <Desc>This interface allows the user to perform Undo/Redo of changes in the system. </Desc>
            </Property>
         </Properties>
         <Summary>The implementation of an object space</Summary>
         <Desc>This is the implementation of an object space. It holds all object instances for a model.</Desc>
      </Class>
      <Class Name="TBoldSystemExtension">
         <Methods>
            <Method Name="Create">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
         </Methods>
         <Properties>
            <Property Name="System">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
         </Properties>
         <Summary></Summary>
         <Desc></Desc>
      </Class>
      <Class Name="TBoldSystemLocatorList">
         <Methods>
            <Method Name="Create">
               <Summary></Summary>
               <Desc>You should never have to create a SystemLocatorList yourself. Instead, use a <See Class="TBoldObjectList"/>. </Desc>
            </Method>
            <Method Name="CreateTraverser">
               <Summary></Summary>
               <Desc>This function returns a traverser that you can use to loop over all the objects or locators in a system. Remember to free the traverser when you are done.</Desc>
            </Method>
            <Method Name="GetLocatorByID">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetObjectByID">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="TraverserClass">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="UpdateID">
               <Summary></Summary>
               <Desc>There is normally no need to call this method. it is called by the system during certain database operations. </Desc>
            </Method>
         </Methods>
         <Properties>
            <Property Name="LocatorByID">
               <Summary></Summary>
               <Desc>If the locator with this ObjectId is in the list, then it will be returned, otherwise nil. </Desc>
            </Property>
            <Property Name="ObjectByID">
               <Summary></Summary>
               <Desc>Finds a BoldObject by hashing on its id. </Desc>
            </Property>
         </Properties>
         <Summary></Summary>
         <Desc>This list is used by the system to keep track of all locators/objects in memory. If you want to traverse the objects or the locators of a system you must get hold of a traverser using the <See Method="CreateTraverser"/>-method, see the example. </Desc>
         <Examples>
            <Example>
               <Body>
                  <Code>var
  Traverser: TBoldLocatorListTraverser;
begin
  Traverser := System.Locators.CreateTraverser;
  while not Traverser.EndOfList do
  begin
    if assigned(Traverser.Locator.BoldObject) then
      // do something with the object.
    Traverser.Next;
  end;
  Traverser.Free;
end;</Code>
               </Body>
            </Example>
         </Examples>
      </Class>
      <Class Name="TBoldSystem_Proxy">
         <Methods>
            <Method Name="AllObjectIds">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="ApplyStreamedValueSpace">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="ApplyValueSpace">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="ApplytranslationList">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="EnsureObjectContents">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="EnsureObjectId">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="ExactifyIDs">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetEnsuredObjectContentsByObjectId">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetHasContentsForId">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetObjectContentsByObjectId">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetProxedSystem">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="StreamOut">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
         </Methods>
         <Properties>
            <Property Name="ProxedSystem">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
         </Properties>
         <Summary></Summary>
         <Desc></Desc>
      </Class>
      <Class Name="TBoldTimeMappingCache">
         <Methods>
            <Method Name="Add">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="Create">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="TimeForTimestamp">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="TimestampForTime">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
         </Methods>
         <Summary></Summary>
         <Desc></Desc>
      </Class>
      <Class Name="TBoldmemberDeriver">
         <Methods>
            <Method Name="GetInternalDeriverState">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="SetInternalDeriverState">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
         </Methods>
         <Summary></Summary>
         <Desc></Desc>
      </Class>
   </Classes>
   <Constants>
      <Const Name="bqBaseSystem">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="bqMaxSystem">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="bqMayClear">
         <Summary></Summary>
         <Desc>The query sent by the CanClear methods of TBoldList and TBoldObjectReference.
The Args parameter is empty. </Desc>
      </Const>
      <Const Name="bqMayCreateObject">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="bqMayDeleteObject">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="bqMayInsert">
         <Summary></Summary>
         <Desc>The query sent by the CanInsert and CanInsertLocator methods of TBoldList, TBoldObjectList and TBoldMemberList.
The following table shows the types of the items in the Args parameter:
            <Table Border="1">
               <TR><TH>Originator</TH><TH>Args</TH></TR>
               <TR><TD>TBoldMemberList</TD><TD>integer, TBoldMember</TD></TR>
               <TR><TD>TBoldObjectList</TD><TD>integer, TBoldObjectLocator</TD></TR>
            </Table>
         </Desc>
      </Const>
      <Const Name="bqMayMove">
         <Summary></Summary>
         <Desc>The query sent by the CanMove method of TBoldList.
The following table shows the types of the items in the Args parameter:
            <Table Border="1">
               <TR><TH>Originator</TH><TH>Args</TH></TR>
               <TR><TD>TBoldMemberList</TD><TD>integer, integer</TD></TR>
               <TR><TD>TBoldObjectList</TD><TD>TBoldObjectList integer, integer</TD></TR>
            </Table>
         </Desc>
      </Const>
      <Const Name="bqMayRead">
         <Summary></Summary>
         <Desc>The query sent by the CanRead method of TBoldMember.
The Args parameter is empty.</Desc>
      </Const>
      <Const Name="bqMayRemove">
         <Summary></Summary>
         <Desc>The query sent by the CanRemove method of TBoldList
The following table shows the types of the items in the Args parameter:
            <Table Border="1">
               <TR><TH>Originator</TH><TH>Args</TH></TR>
               <TR><TD>TBoldMemberList</TD><TD>integer</TD></TR>
               <TR><TD>TBoldObjectList</TD><TD>integer</TD></TR>
            </Table>
         </Desc>
      </Const>
      <Const Name="bqMayReplace">
         <Summary></Summary>
         <Desc>The query sent by the Can Replace and CanReplaceLocator methods of TBoldList, TBoldObjectList and TBoldMemberList.
The following table shows the types of the items in the Args parameter:
            <Table Border="1">
               <TR><TH>Originator</TH><TH>Args</TH></TR>
               <TR><TD>TBoldMemberList</TD><TD>integer, TBoldMember</TD></TR>
               <TR><TD>TBoldObjectList</TD><TD>integer, TBoldObjectLocator</TD></TR>
            </Table>
         </Desc>
      </Const>
      <Const Name="bqMaySetToNull">
         <Summary></Summary>
         <Desc> The query sent by the Can SetToNull method of TBoldAttribute.
The Args parameter is empty. </Desc>
      </Const>
      <Const Name="bqMaySetValue">
         <Summary></Summary>
         <Desc>The query sent by the CanSetValue methods of all TBoldAttribute subclasses and the CanSet method of TBoldObjectReference.
The type of the first (and only) item in the Args parameter is the same as the type of the argument to CanSetValue. For TBoldObjectReference the type is TBoldObjectLocator. </Desc>
      </Const>
   </Constants>
   <Interfaces>
   </Interfaces>
   <Routines>
      <Routine Name="BoldClearLastFailure">
         <Summary>Clear failure.</Summary>
         <Desc>Clear the TBoldFailureReason object by sending in nil to <see routine="SetBoldLastFailureReason"/>.</Desc>
      </Routine>
      <Routine Name="BoldRaiseLastFailure">
         <Summary>Raise failure.</Summary>
         <Desc>The reason why an operation was not allowed to be performed can be described, and saved for later presentation to the user. </Desc>
         <SeeAlso><See Routine="SetBoldLastFailureReason"/>.</SeeAlso>
         <SeeAlso><See Routine="ClearBoldLastFailure"/>.</SeeAlso>
      </Routine>
      <Routine Name="GetBoldLastFailureReason">
         <Summary>Get failure.</Summary>
         <Desc>The reason why an operation was not allowed to be performed can be described, and saved for later presentation to the user. </Desc>
         <SeeAlso><See Routine="SetBoldLastFailureReason"/></SeeAlso>
      </Routine>
      <Routine Name="SetBoldLastFailureReason">
         <Summary>Set failure.</Summary>
         <Desc>The reason why an operation was not allowed to be performed can be described, and saved for later presentation to the user. This is mostly used for Can- and May- functions, and bqMay- queries. When such a function returns false, the last failure reason should be set to a TBoldFailureReason object describing the reason why the operation was not allowed to perform. </Desc>
         <SeeAlso><See Method="GetBoldLastFailureReason"/></SeeAlso>
         <SeeAlso><See Method="BoldClearLastFailure"/></SeeAlso>
         <SeeAlso><See Method="BoldRaiseLastFailure"/></SeeAlso>
      </Routine>
   </Routines>
   <Summary></Summary>
   <Desc></Desc>
   <Types>
      <Type Name="TBoldAttributeClass">
         <Summary></Summary>
         <Desc></Desc>
      </Type>
      <Type Name="TBoldCreateApproximateObjectError">
         <Summary>Event type for TBoldSystem.OnCreateApproximateObjectError</Summary>
         <Desc>See <See Class="TBoldSystem" Event="OnCreateApproximateObjectError"/> for further details</Desc>
      </Type>
      <Type Name="TBoldElementCompare">
         <Summary></Summary>
         <Desc>Method pointer to a method that compares two Bold elements and returns a value &lt; 0 if Item1 is smaller than Item2, 0 if they are equal and > 0 if Item1 is greater than Item2. This is used as a parameter to sorting methods. </Desc>
      </Type>
      <Type Name="TBoldLinkUnlinkMode">
         <Summary>Mode for LinkTo/Unlink operations</Summary>
         <Desc>This type is intended as a Mode for the operations <See Class="TBoldAbstractController" Method="LinkTo"/> and <See Class="TBoldAbstractController" Method="Unlink"/>. The values have the following meaning: blulNone: No action, just set contents; blulMarkModified: The operation is performed as part of a set from the "front" side of the ObjectSpace, and thus all members changed shall be marked as modified; blulMarkAdjusted: The operation is performed as a sideeffect of fetching (or rather refetching) a single-link and thus any multilinks touched shall be marked as adjusted. </Desc>
      </Type>
      <Type Name="TBoldListClass">
         <Summary></Summary>
         <Desc></Desc>
      </Type>
      <Type Name="TBoldListDupMode">
         <Summary></Summary>
         <Desc></Desc>
      </Type>
      <Type Name="TBoldMemberClass">
         <Summary></Summary>
         <Desc></Desc>
      </Type>
      <Type Name="TBoldMember_ProxyClass">
         <Summary></Summary>
         <Desc></Desc>
      </Type>
      <Type Name="TBoldObjectClass">
         <Summary></Summary>
         <Desc></Desc>
      </Type>
      <Type Name="TBoldObjectListClass">
         <Summary></Summary>
         <Desc></Desc>
      </Type>
      <Type Name="TBoldOptimisticLockingFailedEvent">
         <Summary></Summary>
         <Desc></Desc>
      </Type>
      <Type Name="TBoldPrepareListOperation">
         <Summary></Summary>
         <Desc></Desc>
      </Type>
      <Type Name="TBoldSystemTransactionMode">
         <Summary></Summary>
         <Desc></Desc>
      </Type>
      <Type Name="TBoldTransactionState">
         <Summary></Summary>
         <Desc></Desc>
      </Type>
   </Types>
</DLUnitDoc>