object BoldGeneratorTemplatesDelphiDM: TBoldGeneratorTemplatesDelphiDM
  OldCreateOrder = False
  Left = 285
  Top = 161
  Height = 479
  Width = 741
  object UnitTemplate: TBoldTemplateHolder
    Template.Strings = (
      '(*****************************************)'
      '(*      This file is autogenerated       *)'
      '(*   Any manual changes will be LOST!    *)'
      '(*****************************************)'
      '(* Generated $(<28DATETIME)*)'
      '(*****************************************)'
      '(* This file should be stored in the     *)'
      '(* same directory as the form/datamodule *)'
      '(* with the corresponding model          *)'
      '(*****************************************)'
      '(* Copyright notice:                     *)'
      '(* $(<38COPYRIGHTNOTICE)*)'
      '(*****************************************)'
      ''
      'unit $(UNITNAME);'
      ''
      '{$DEFINE $(UNITNAME)_unitheader}'
      '{$INCLUDE $(UNITNAME)_Interface.inc}'
      ''
      '{ Includefile for methodimplementations }'
      ''
      '$(LOOPINCLUDEFILECOUNT)\'
      '{$INCLUDE $(INCLUDEFILE)}'
      '$(ENDLOOPINCLUDEFILECOUNT)\'
      ''
      'const'
      
        '  BoldMemberAssertInvalidObjectType: string = '#39'Object of singlel' +
        'ink (%s.%s) is of wrong type (is %s, should be %s)'#39';'
      ''
      '$(LOOPCLASSCOUNT)\'
      '{ $(CLASSNAME) }'
      ''
      '$(LOOPMEMBERCOUNT)\'
      '$(CASEMEMBERKIND)\'
      
        'Attribute |function $(CLASSNAME)._Get_M_$(MEMBERNAME): $(MEMBERT' +
        'YPE);'
      'Attribute |begin'
      
        'Attribute |  assert(ValidateMember('#39'$(CLASSNAME)'#39', '#39'$(MEMBERNAME' +
        ')'#39', $(MEMBERINDEX), $(MEMBERTYPE)));'
      
        'Attribute |  Result := $(MEMBERTYPE)(BoldMembers[$(MEMBERINDEX)]' +
        ');'
      'Attribute |end;'
      'Attribute |'
      'Attribute |$(CASEMEMBERHASNATIVE)\'
      
        'Attribute |1|function $(CLASSNAME)._Get$(MEMBERNAME): $(MEMBERNA' +
        'TIVETYPE);'
      'Attribute |1|begin'
      
        'Attribute |1|  Result := M_$(MEMBERNAME).$(MEMBERNATIVEACCESSOR)' +
        ';'
      'Attribute |1|end;'
      'Attribute |1|'
      'Attribute |1|$(CASEMEMBERISSETABLE)\'
      
        'Attribute |1|1|procedure $(CLASSNAME)._Set$(MEMBERNAME)(const Ne' +
        'wValue: $(MEMBERNATIVETYPE));'
      'Attribute |1|1|begin'
      
        'Attribute |1|1|  M_$(MEMBERNAME).$(MEMBERNATIVEACCESSOR) := NewV' +
        'alue;'
      'Attribute |1|1|end;'
      'Attribute |1|1|'
      'Attribute |1|$(ENDCASEMEMBERISSETABLE)\'
      'Attribute |$(ENDCASEMEMBERHASNATIVE)\'
      'SingleRole|$(CASEROLENAVIGABLE)\'
      
        'SingleRole|1|function $(CLASSNAME)._Get_M_$(MEMBERNAME): TBoldOb' +
        'jectReference;'
      'SingleRole|1|begin'
      
        'SingleRole|1|  assert(ValidateMember('#39'$(CLASSNAME)'#39', '#39'$(MEMBERNA' +
        'ME)'#39', $(MEMBERINDEX), TBoldObjectReference));'
      
        'SingleRole|1|  Result := TBoldObjectReference(BoldMembers[$(MEMB' +
        'ERINDEX)]);'
      'SingleRole|1|end;'
      'SingleRole|1|'
      
        'SingleRole|1|function $(CLASSNAME)._Get$(MEMBERNAME): $(MEMBERTY' +
        'PE);'
      'SingleRole|1|begin'
      
        'SingleRole|1|  assert(not assigned(M_$(MEMBERNAME).BoldObject) o' +
        'r (M_$(MEMBERNAME).BoldObject is $(MEMBERTYPE)), SysUtils.format' +
        '(BoldMemberAssertInvalidObjectType, [ClassName, '#39'$(MEMBERNAME)'#39',' +
        ' M_$(MEMBERNAME).BoldObject.ClassName, '#39'$(MEMBERTYPE)'#39']));'
      
        'SingleRole|1|  Result := $(MEMBERTYPE)(M_$(MEMBERNAME).BoldObjec' +
        't);'
      'SingleRole|1|end;'
      'SingleRole|1|'
      'SingleRole|1|$(CASEISTRUEROLE)\'
      
        'SingleRole|1|1|procedure $(CLASSNAME)._Set$(MEMBERNAME)(const va' +
        'lue: $(MEMBERTYPE));'
      'SingleRole|1|1|begin'
      'SingleRole|1|1|  M_$(MEMBERNAME).BoldObject := value;'
      'SingleRole|1|1|end;'
      'SingleRole|1|1|'
      'SingleRole|1|$(ENDCASEISTRUEROLE)\'
      'SingleRole|$(ENDCASEROLENAVIGABLE)\'
      'MultiRole |$(CASEROLENAVIGABLE)\'
      
        'MultiRole |1|function $(CLASSNAME)._Get$(MEMBERNAME): $(MEMBERTY' +
        'PE)List;'
      'MultiRole |1|begin'
      
        'MultiRole |1|  assert(ValidateMember('#39'$(CLASSNAME)'#39', '#39'$(MEMBERNA' +
        'ME)'#39', $(MEMBERINDEX), $(MEMBERTYPE)List));'
      
        'MultiRole |1|  Result := $(MEMBERTYPE)List(BoldMembers[$(MEMBERI' +
        'NDEX)]);'
      'MultiRole |1|end;'
      'MultiRole |1|'
      'MultiRole |1|$(CASEROLEQUALIFIED)\'
      
        'MultiRole |1|1|function $(CLASSNAME)._Get_Q_$(MEMBERNAME)($(QUAL' +
        'IFIERFUNCTIONPARAMS)): $(MEMBERTYPE);'
      'MultiRole |1|1|var'
      'MultiRole |1|1|  TempResult: TBoldObject;'
      'MultiRole |1|1|  TempList: TBoldMemberList;'
      'MultiRole |1|1|$(LOOPQUALIFIERCOUNT)\'
      'MultiRole |1|1|  Q_$(QUALIFIERNAME): $(QUALIFIERBOLDTYPE);'
      'MultiRole |1|1|$(ENDLOOPQUALIFIERCOUNT)\'
      'MultiRole |1|1|begin'
      'MultiRole |1|1|  TempList := TBoldMemberList.Create;'
      'MultiRole |1|1|  TempList.CloneMembers := false;'
      'MultiRole |1|1|$(LOOPQUALIFIERCOUNT)\'
      
        'MultiRole |1|1|  Q_$(QUALIFIERNAME) := $(QUALIFIERBOLDTYPE).Crea' +
        'te;'
      'MultiRole |1|1|$(ENDLOOPQUALIFIERCOUNT)\'
      'MultiRole |1|1|  try'
      'MultiRole |1|1|$(LOOPQUALIFIERCOUNT)\'
      
        'MultiRole |1|1|    Q_$(QUALIFIERNAME).$(QUALIFIERACCESSOR) := $(' +
        'QUALIFIERNAME);'
      'MultiRole |1|1|    TempList.add(Q_$(QUALIFIERNAME));'
      'MultiRole |1|1|$(ENDLOOPQUALIFIERCOUNT)\'
      
        'MultiRole |1|1|    TempResult := M_$(MEMBERNAME).GetByIndex(Temp' +
        'List);'
      
        'MultiRole |1|1|    assert(not assigned(TempResult) or (TempResul' +
        't is $(MEMBERTYPE)), '#39'Illegal object in multilink'#39');'
      'MultiRole |1|1|    result := $(MEMBERTYPE)(TempResult);'
      'MultiRole |1|1|  finally'
      'MultiRole |1|1|    TempList.Free;'
      'MultiRole |1|1|$(LOOPQUALIFIERCOUNT)\'
      'MultiRole |1|1|    Q_$(QUALIFIERNAME).Free;'
      'MultiRole |1|1|$(ENDLOOPQUALIFIERCOUNT)\'
      'MultiRole |1|1|  end;'
      'MultiRole |1|1|end;'
      'MultiRole |1|1|'
      'MultiRole |1|$(ENDCASEROLEQUALIFIED)\'
      'MultiRole |$(ENDCASEROLENAVIGABLE)\'
      '$(ENDCASEMEMBERKIND)\'
      '$(ENDLOOPMEMBERCOUNT)\'
      '\'
      '$(CASEISVERSIONED)\'
      
        '1|function $(CLASSNAME).AtTime(Time: TBoldTimestampType): $(CLAS' +
        'SNAME);'
      '1|begin'
      '1|  result := $(CLASSNAME)(inherited AtTime(Time));'
      '1|end;'
      '1|'
      '$(ENDCASEISVERSIONED)\'
      '\'
      '$(CASEUSETYPEDLISTS)\'
      '1|procedure $(CLASSNAME)List.Add(NewObject: $(CLASSNAME));'
      '1|begin'
      '1|  if Assigned(NewObject) then'
      '1|    AddElement(NewObject);'
      '1|end;'
      '1|'
      
        '1|function $(CLASSNAME)List.IndexOf(anObject: $(CLASSNAME)): Int' +
        'eger;'
      '1|begin'
      '1|  result := IndexOfElement(anObject);'
      '1|end;'
      '1|'
      
        '1|function $(CLASSNAME)List.Includes(anObject: $(CLASSNAME)) : B' +
        'oolean;'
      '1|begin'
      '1|  result := IncludesElement(anObject);'
      '1|end;'
      '1|'
      '1|function $(CLASSNAME)List.AddNew: $(CLASSNAME);'
      '1|begin'
      '1|  result := $(CLASSNAME)(InternalAddNew);'
      '1|end;'
      '1|'
      
        '1|procedure $(CLASSNAME)List.Insert(index: Integer; NewObject: $' +
        '(CLASSNAME));'
      '1|begin'
      '1|  if assigned(NewObject) then'
      '1|    InsertElement(index, NewObject);'
      '1|end;'
      '1|'
      
        '1|function $(CLASSNAME)List.GetBoldObject(index: Integer): $(CLA' +
        'SSNAME);'
      '1|begin'
      '1|  result := $(CLASSNAME)(GetElement(index));'
      '1|end;'
      '1|'
      
        '1|procedure $(CLASSNAME)List.SetBoldObject(index: Integer; NewOb' +
        'ject: $(CLASSNAME));'
      '1|begin;'
      '1|  SetElement(index, NewObject);'
      '1|end;'
      '1|'
      '$(ENDCASEUSETYPEDLISTS)\'
      '\'
      '$(CASECLASSINTRODUCESMANUALLYDERIVEDMEMBERS)\'
      
        'true|function $(CLASSNAME).GetDeriveMethodForMember(Member: TBol' +
        'dMember): TBoldDeriveAndResubscribe;'
      'true|begin'
      'true|$(LOOPDERIVEDMEMBERCOUNT)\'
      'true|$(CASEDERIVEDMEMBERINTRODUCEDHERE)\'
      
        'true|1|  if (Member = M_$(DERIVEDMEMBERNAME)) then result := _$(' +
        'DERIVEDMEMBERNAME)_DeriveAndSubscribe else'
      'true|$(ENDCASEDERIVEDMEMBERINTRODUCEDHERE)\'
      'true|$(ENDLOOPDERIVEDMEMBERCOUNT)\'
      'true|  result := inherited GetDeriveMethodForMember(Member);'
      'true|end;'
      'true|'
      
        'true|function $(CLASSNAME).GetReverseDeriveMethodForMember(Membe' +
        'r: TBoldMember): TBoldReverseDerive;'
      'true|begin'
      
        'true|  result := inherited GetReverseDeriveMethodForMember(Membe' +
        'r);'
      'true|$(LOOPDERIVEDMEMBERCOUNT)\'
      'true|$(CASEDERIVEDMEMBERINTRODUCEDHERE)\'
      'true|1|$(CASEDERIVEDMEMBERREVERSEDERIVED)\'
      
        'true|1|1|  if not assigned(result) and (Member = M_$(DERIVEDMEMB' +
        'ERNAME)) then result := _$(DERIVEDMEMBERNAME)_ReverseDerive;'
      'true|1|$(ENDCASEDERIVEDMEMBERREVERSEDERIVED)\'
      'true|$(ENDCASEDERIVEDMEMBERINTRODUCEDHERE)\'
      'true|$(ENDLOOPDERIVEDMEMBERCOUNT)\'
      'true|end;'
      'true|'
      '$(ENDCASECLASSINTRODUCESMANUALLYDERIVEDMEMBERS)\'
      '\'
      '$(ENDLOOPCLASSCOUNT)\'
      '\'
      'function GeneratedCodeCRC: String;'
      'begin'
      '  result := '#39'$(CRC)'#39';'
      'end;'
      ''
      '$(CASEUSETYPEDLISTS)\'
      
        '1|procedure InstallObjectListClasses(BoldObjectListClasses: TBol' +
        'dGeneratedClassList);'
      '1|begin'
      '1|$(LOOPCLASSCOUNT)\'
      
        '1|  BoldObjectListClasses.AddObjectEntry('#39'$(CLASSEXPRESSIONNAME)' +
        #39', $(CLASSNAME)List);'
      '1|$(ENDLOOPCLASSCOUNT)\'
      '1|end;'
      '1|'
      '$(ENDCASEUSETYPEDLISTS)\'
      '\'
      
        'procedure InstallBusinessClasses(BoldObjectClasses: TBoldGenerat' +
        'edClassList);'
      'begin'
      '$(LOOPCLASSCOUNT)\'
      
        '  BoldObjectClasses.AddObjectEntry('#39'$(CLASSEXPRESSIONNAME)'#39', $(C' +
        'LASSNAME));'
      '$(ENDLOOPCLASSCOUNT)\'
      'end;'
      ''
      'var'
      '  CodeDescriptor: TBoldGeneratedCodeDescriptor;'
      ''
      'initialization'
      
        '  CodeDescriptor := GeneratedCodes.AddGeneratedCodeDescriptorWit' +
        'hFunc('#39'$(MODELNAME)'#39', InstallBusinessClasses, $(?USETYPEDLISTS:I' +
        'nstallObjectListClasses,nil), GeneratedCodeCRC);'
      'finalization'
      '  GeneratedCodes.Remove(CodeDescriptor);'
      'end.')
    FileName = '$(COMPONENTNAME).pas'
    Description = 'Main Unit'
    Left = 40
    Top = 24
  end
  object InterfaceTemplate: TBoldTemplateHolder
    Template.Strings = (
      '$(MACROSTART M_Properties)$(CASEMEMBERKIND)\'
      
        'Attribute |    property M_$(MEMBERNAME): $(MEMBERTYPE) read _Get' +
        '_M_$(MEMBERNAME);'
      'SingleRole|$(CASEROLENAVIGABLE)\'
      
        'SingleRole|1|    property M_$(MEMBERNAME): TBoldObjectReference ' +
        'read _Get_M_$(MEMBERNAME);'
      'SingleRole|$(ENDCASEROLENAVIGABLE)\'
      'MultiRole|$(CASEROLENAVIGABLE)\'
      
        'MultiRole|1|    property M_$(MEMBERNAME): $(MEMBERTYPE)List read' +
        ' _Get$(MEMBERNAME);'
      'MultiRole|$(ENDCASEROLENAVIGABLE)\'
      '$(ENDCASEMEMBERKIND)$(MACROEND M_Properties)\'
      '\'
      '$(MACROSTART Properties)$(CASEMEMBERKIND)\'
      'Attribute |$(CASEMEMBERHASNATIVE)\'
      'Attribute |1|$(CASEMEMBERISSETABLE)\'
      
        'Attribute |1|1|    property $(MEMBERNAME): $(MEMBERNATIVETYPE) r' +
        'ead _Get$(MEMBERNAME) write _Set$(MEMBERNAME);'
      
        'Attribute |1|0|    property $(MEMBERNAME): $(MEMBERNATIVETYPE) r' +
        'ead _Get$(MEMBERNAME);'
      'Attribute |1|$(ENDCASEMEMBERISSETABLE)\'
      'Attribute |$(ENDCASEMEMBERHASNATIVE)\'
      'SingleRole|$(CASEROLENAVIGABLE)\'
      'SingleRole|1|$(CASEISTRUEROLE)\'
      
        'SingleRole|1|1|    property $(MEMBERNAME): $(MEMBERTYPE) read _G' +
        'et$(MEMBERNAME) write _Set$(MEMBERNAME);'
      
        'SingleRole|1|0|    property $(MEMBERNAME): $(MEMBERTYPE) read _G' +
        'et$(MEMBERNAME);'
      'SingleRole|1|$(ENDCASEISTRUEROLE)\'
      'SingleRole|$(ENDCASEROLENAVIGABLE)\'
      'MultiRole |$(CASEROLENAVIGABLE)\'
      'MultiRole |1|$(CASEROLEQUALIFIED)\'
      
        'MultiRole |1|1|    property $(MEMBERNAME)[$(QUALIFIERPROPERTYPAR' +
        'AMS)]: $(MEMBERTYPE) read _Get_Q_$(MEMBERNAME);'
      
        'MultiRole |1|0|    property $(MEMBERNAME): $(MEMBERTYPE)List rea' +
        'd _Get$(MEMBERNAME);'
      'MultiRole |1|$(ENDCASEROLEQUALIFIED)\'
      'MultiRole |$(ENDCASEROLENAVIGABLE)\'
      '$(ENDCASEMEMBERKIND)$(MACROEND Properties)\'
      '\'
      '$(MACROSTART DelphiAttribute)\'
      '    property $(DelphiAttributeName): $(DelphiAttributeType)\'
      '$(CASEDelphiAttributePropertyRead)\'
      'PrivateMethod         | read Get$(DelphiAttributeName)\'
      'ProtectedVirtualMethod| read Get$(DelphiAttributeName)\'
      'Field                 | read f$(DelphiAttributeName)\'
      '$(ENDCASEDelphiAttributePropertyRead)\'
      '\'
      '$(CASEDelphiAttributePropertyWrite)\'
      'PrivateMethod         | write Set$(DelphiAttributeName)\'
      'ProtectedVirtualMethod| write Set$(DelphiAttributeName)\'
      'Field                 | write f$(DelphiAttributeName)\'
      '$(ENDCASEDelphiAttributePropertyWrite)\'
      ';'
      '$(MACROEND DelphiAttribute)\'
      '\'
      '$(MACROSTART Visibilitystuff)\'
      '$(LOOPMETHODCOUNT)$(CASEMETHODVISIBILITY)\'
      '$(Visibility)|    $(InterfaceMethodHeader)'
      '$(ENDCASEMETHODVISIBILITY)$(ENDLOOPMETHODCOUNT)\'
      '\'
      '$(LOOPMEMBERCOUNT)$(CASEMemberVisibility)\'
      '$(Visibility)|$(M_Properties)\'
      '$(ENDCASEMemberVisibility)$(ENDLOOPMEMBERCOUNT)\'
      '\'
      '$(LOOPMEMBERCOUNT)$(CASEMemberVisibility)\'
      '$(Visibility)|$(Properties)\'
      '$(ENDCASEMemberVisibility)$(ENDLOOPMEMBERCOUNT)\'
      '\'
      '$(LOOPDelphiAttributeCount)$(CASEDelphiAttributeVisibility)\'
      '$(Visibility)|$(DelphiAttribute)\'
      
        '$(ENDCASEDelphiAttributeVisibility)$(ENDLOOPDelphiAttributeCount' +
        ')\'
      '$(MACROEND Visibilitystuff)\'
      '\'
      '\'
      '(*****************************************)'
      '(*      This file is autogenerated       *)'
      '(*   Any manual changes will be LOST!    *)'
      '(*****************************************)'
      '(* Generated $(<28DATETIME)*)'
      '(*****************************************)'
      '(* This file should be stored in the     *)'
      '(* same directory as the form/datamodule *)'
      '(* with the corresponding model          *)'
      '(*****************************************)'
      '(* Copyright notice:                     *)'
      '(* $(<38COPYRIGHTNOTICE)*)'
      '(*****************************************)'
      ''
      '{$IFNDEF $(UNITNAME)_Interface.inc}'
      '{$DEFINE $(UNITNAME)_Interface.inc}'
      ''
      '{$IFNDEF $(UNITNAME)_unitheader}'
      'unit $(UNITNAME);'
      '{$ENDIF}'
      ''
      'interface'
      ''
      'uses'
      '  // interface uses'
      '$(LOOPINTERFACEUSESCOUNT)\'
      '  $(INTERFACEUSES),'
      '$(ENDLOOPINTERFACEUSESCOUNT)\'
      '  // interface dependencies'
      '$(LOOPINTERFACEDEPENDENCIESCOUNT)\'
      '  $(INTERFACEDEPENDENCY),'
      '$(ENDLOOPINTERFACEDEPENDENCIESCOUNT)\'
      '  // attribute classes'
      '$(LOOPATTRIBUTECLASSDEPENDENCIESCOUNT)\'
      '  $(ATTRIBUTECLASSDEPENDENCY),'
      '$(ENDLOOPATTRIBUTECLASSDEPENDENCIESCOUNT)\'
      '  // other'
      '  Classes,'
      '  Controls, // for TDate'
      '  SysUtils,'
      '  BoldDefs,'
      '  BoldSubscription,'
      '  BoldDeriver,'
      '  BoldElements,'
      '  BoldDomainElement,'
      '  BoldSystemRT,'
      '  BoldSystem;'
      ''
      'type'
      '  { forward declarations of all classes }'
      ''
      '$(LOOPCLASSCOUNT)\'
      '  $(CLASSNAME) = class;'
      '$(CASEUSETYPEDLISTS)\'
      '1|  $(CLASSNAME)List = class;'
      '$(ENDCASEUSETYPEDLISTS)\'
      '$(ENDLOOPCLASSCOUNT)\'
      ''
      '$(LOOPCLASSCOUNT)\'
      '  $(CLASSNAME) = class($(SuperClassName))'
      '  private'
      '\'
      '$(LOOPDelphiAttributeCount)\'
      '$(CASEDelphiAttributeHasField)\'
      '1|    f$(DelphiAttributeName): $(DelphiAttributeType);'
      '$(ENDCASEDelphiAttributeHasField)\'
      '$(ENDLOOPDelphiAttributeCount)\'
      '\'
      '$(LOOPMEMBERCOUNT)$(CASEMEMBERKIND)\'
      '    Attribute |    function _Get_M_$(MEMBERNAME): $(MEMBERTYPE);'
      '    Attribute |$(CASEMEMBERHASNATIVE)\'
      
        '    Attribute |1|    function _Get$(MEMBERNAME): $(MEMBERNATIVET' +
        'YPE);'
      '    Attribute |1|$(CASEMEMBERISSETABLE)\'
      
        '    Attribute |1|1|    procedure _Set$(MEMBERNAME)(const NewValu' +
        'e: $(MEMBERNATIVETYPE));'
      '    Attribute |1|$(ENDCASEMEMBERISSETABLE)\'
      '    Attribute |$(ENDCASEMEMBERHASNATIVE)\'
      '    SingleRole|$(CASEROLENAVIGABLE)\'
      '    SingleRole|1|    function _Get$(MEMBERNAME): $(MEMBERTYPE);'
      
        '    SingleRole|1|    function _Get_M_$(MEMBERNAME): TBoldObjectR' +
        'eference;'
      '    SingleRole|1|$(CASEISTRUEROLE)\'
      
        '    SingleRole|1|1|    procedure _Set$(MEMBERNAME)(const value: ' +
        '$(MEMBERTYPE));'
      '    SingleRole|1|$(ENDCASEISTRUEROLE)\'
      '    SingleRole|$(ENDCASEROLENAVIGABLE)\'
      '    MultiRole |$(CASEROLENAVIGABLE)\'
      
        '    MultiRole |1|    function _Get$(MEMBERNAME): $(MEMBERTYPE)Li' +
        'st;'
      '    MultiRole |1|$(CASEROLEQUALIFIED)\'
      
        '    MultiRole |1|1|    function _Get_Q_$(MEMBERNAME)($(QUALIFIER' +
        'FUNCTIONPARAMS)): $(MEMBERTYPE);'
      '    MultiRole |1|$(ENDCASEROLEQUALIFIED)\'
      '    MultiRole |$(ENDCASEROLENAVIGABLE)\'
      '$(ENDCASEMEMBERKIND)$(ENDLOOPMEMBERCOUNT)\'
      '\'
      '$(LOOPDelphiAttributeCount)\'
      '$(CASEDelphiAttributePropertyRead)\'
      
        'PrivateMethod|    function Get$(DelphiAttributeName): $(DelphiAt' +
        'tributeType);'
      '$(ENDCASEDelphiAttributePropertyRead)\'
      '\'
      '$(CASEDelphiAttributePropertyWrite)\'
      
        'PrivateMethod|    procedure Set$(DelphiAttributeName)(NewValue: ' +
        '$(DelphiAttributeType));'
      '$(ENDCASEDelphiAttributePropertyWrite)\'
      '$(ENDLOOPDelphiAttributeCount)\'
      '\'
      '$(MACROSTART Visibility)private$(MACROEND Visibility)\'
      '$(VisibilityStuff)\'
      '\'
      '  protected'
      '\'
      '$(LOOPDERIVEDMEMBERCOUNT)\'
      
        '    procedure _$(DERIVEDMEMBERNAME)_DeriveAndSubscribe(DerivedOb' +
        'ject: TObject; Subscriber: TBoldSubscriber); $(?DERIVEDMEMBERINT' +
        'RODUCEDHERE:virtual,override);'
      '$(CASEDERIVEDMEMBERREVERSEDERIVED)\'
      
        '1|    procedure _$(DERIVEDMEMBERNAME)_ReverseDerive(DerivedObjec' +
        't: TObject); $(?DERIVEDMEMBERINTRODUCEDHERE:virtual,override);'
      '$(ENDCASEDERIVEDMEMBERREVERSEDERIVED)\'
      '$(ENDLOOPDERIVEDMEMBERCOUNT)\'
      '\'
      '$(CASECLASSINTRODUCESMANUALLYDERIVEDMEMBERS)\'
      
        '    true|    function GetDeriveMethodForMember(Member: TBoldMemb' +
        'er): TBoldDeriveAndResubscribe; override;'
      
        '    true|    function GetReverseDeriveMethodForMember(Member: TB' +
        'oldMember): TBoldReverseDerive; override;'
      '$(ENDCASECLASSINTRODUCESMANUALLYDERIVEDMEMBERS)\'
      '\'
      '$(LOOPDelphiAttributeCount)\'
      '$(CASEDelphiAttributePropertyRead)\'
      
        'ProtectedVirtualMethod|    function Get$(DelphiAttributeName): $' +
        '(DelphiAttributeType); virtual;'
      '$(ENDCASEDelphiAttributePropertyRead)\'
      '\'
      '$(CASEDelphiAttributePropertyWrite)\'
      
        'ProtectedVirtualMethod|    procedure Set$(DelphiAttributeName)(N' +
        'ewValue: $(DelphiAttributeType)); virtual;'
      '$(ENDCASEDelphiAttributePropertyWrite)\'
      '$(ENDLOOPDelphiAttributeCount)\'
      '\'
      '$(MACROSTART Visibility)protected$(MACROEND Visibility)\'
      '$(VisibilityStuff)\'
      '\'
      '  public'
      '\'
      '$(CASEISVERSIONED)\'
      '1|    function AtTime(Time: TBoldTimestampType): $(CLASSNAME);'
      '$(ENDCASEISVERSIONED)\'
      '\'
      '$(MACROSTART Visibility)public$(MACROEND Visibility)\'
      '$(VisibilityStuff)\'
      '  end;'
      ''
      '$(CASEDEBUGGERWORKAROUND)\'
      
        '1|  _TDebuggerWorkAroundClass$(CLASSCOUNT) = class(TInterfacedOb' +
        'ject, IUnknown) end;'
      '1|  {$EXTERNALSYM _TDebuggerWorkAroundClass$(CLASSCOUNT)}'
      '1|'
      '$(ENDCASEDEBUGGERWORKAROUND)\'
      '$(ENDLOOPCLASSCOUNT)\'
      '\'
      '$(LOOPCLASSCOUNT)\'
      '$(CASEUSETYPEDLISTS)\'
      '1|  $(CLASSNAME)List = class($(SUPERCLASSNAME)List)'
      '1|  protected'
      '1|    function GetBoldObject(index: Integer): $(CLASSNAME);'
      
        '1|    procedure SetBoldObject(index: Integer; NewObject: $(CLASS' +
        'NAME));'
      '1|  public'
      '1|    function Includes(anObject: $(CLASSNAME)): Boolean;'
      '1|    function IndexOf(anObject: $(CLASSNAME)): Integer;'
      '1|    procedure Add(NewObject: $(CLASSNAME));'
      '1|    function AddNew: $(CLASSNAME);'
      '1|    procedure Insert(index: Integer; NewObject: $(CLASSNAME));'
      
        '1|    property BoldObjects[index: Integer]: $(CLASSNAME) read Ge' +
        'tBoldObject write SetBoldObject; default;'
      '1|  end;'
      '1|'
      '1|$(CASEDEBUGGERWORKAROUND)\'
      
        '1|1|  _TDebuggerWorkAroundListClass$(CLASSCOUNT) = class(TInterf' +
        'acedObject, IUnknown) end;'
      '1|1|  {$EXTERNALSYM _TDebuggerWorkAroundListClass$(CLASSCOUNT)}'
      '1|1|'
      '1|$(ENDCASEDEBUGGERWORKAROUND)\'
      '$(ENDCASEUSETYPEDLISTS)\'
      '$(ENDLOOPCLASSCOUNT)\'
      'function GeneratedCodeCRC: String;'
      ''
      'implementation'
      ''
      'uses'
      '  // implementation uses'
      '$(LOOPIMPLEMENTATIONUSESCOUNT)\'
      '  $(IMPLEMENTATIONUSES),'
      '$(ENDLOOPIMPLEMENTATIONUSESCOUNT)\'
      '  // implementation dependencies'
      '$(LOOPIMPLEMENTATIONDEPENDENCIESCOUNT)\'
      '  $(IMPLEMENTATIONDEPENDENCY),'
      '$(ENDLOOPIMPLEMENTATIONDEPENDENCIESCOUNT)\'
      '  // other'
      '  BoldGeneratedCodeDictionary;'
      ''
      '{$ENDIF}')
    FileName = '$(COMPONENTNAME)_Interface.inc'
    Description = 'Interface file'
    Left = 40
    Top = 80
  end
  object MethodTemplate: TBoldTemplateHolder
    Template.Strings = (
      '$(METHODHEADER)'
      'begin'
      '$(CASECALLINHERITED)\'
      '1|  $(INHERITEDCALL);'
      '$(ENDCASECALLINHERITED)\'
      'end;')
    Left = 208
    Top = 24
  end
  object DeriveAndSubscribeTemplate: TBoldTemplateHolder
    Template.Strings = (
      
        'procedure $(CLASSNAME)._$(MEMBERNAME)_DeriveAndSubscribe(Derived' +
        'Object: TObject; Subscriber: TBoldSubscriber);'
      '$(CASEINTRODUCEDHERE)'
      '1|$(CASEMEMBERHASNATIVE)'
      '1|1|//var'
      '1|1|//  Result: $(MEMBERNATIVETYPE);'
      '1|1|begin'
      
        '1|1|  // Calculate value into Result and place the required subs' +
        'criptions'
      '1|1|  // Result := <<formula>>'
      '1|1|  // M_$(MEMBERNAME).$(MEMBERNATIVEACCESSOR) := Result;'
      '1|1|end;'
      '1|0|begin'
      '1|0|end;'
      '1|$(ENDCASEMEMBERHASNATIVE)'
      '0|begin'
      '0|  inherited;'
      '0|end;'
      '$(ENDCASEINTRODUCEDHERE)')
    Left = 208
    Top = 80
  end
  object OCLWrapperTemplate: TBoldTemplateHolder
    Template.Strings = (
      'unit $(UNITNAME)_OCL;'
      ''
      'interface'
      ''
      'uses'
      '  $(ALLCOMPONENTS),'
      '  BoldSystemRT,'
      '  BoldSystem,'
      '  BoldAttributes,'
      '  BoldOcl,'
      '  BoldOclSymbol;'
      ''
      'type'
      '$(LOOPCLASSCOUNT)\'
      '$(LOOPMETHODCOUNT)\'
      '$(CASEMETHODISOCLCOMPATIBLE)\'
      
        '1|  $(CLASSNAME)_$(METHODNAME)_OclWrapper = class(TBoldOclSymbol' +
        ')'
      '1|  protected'
      '1|    procedure Init; override;'
      '1|  public'
      
        '1|    procedure Evaluate( Params : TBoldOclSymbolParameters ); o' +
        'verride;'
      '1|  end;'
      ''
      '$(ENDCASEMETHODISOCLCOMPATIBLE)\'
      '$(ENDLOOPMETHODCOUNT)\'
      '$(ENDLOOPCLASSCOUNT)\'
      ''
      'implementation'
      ''
      'procedure InstallMethodObjects(SystemRTInfo: TBoldSystemRTInfo);'
      'var'
      '  help : TBoldOclSymbolHelp;'
      'begin'
      
        '  help := TBoldOcl(SystemRTInfo.SystemTypeInfo.Evaluator).Symbol' +
        'Table.help;'
      '$(LOOPCLASSCOUNT)\'
      '$(LOOPMETHODCOUNT)\'
      '$(CASEMETHODISOCLCOMPATIBLE)\'
      
        '1|  SystemRTInfo.ClassByExpressionName['#39'$(CLASSEXPRESSIONNAME)'#39']' +
        '.Methods.ItemsByExpressionName['#39'$(METHODNAME)'#39'].MethodEvaluator ' +
        ':='
      '1|      $(CLASSNAME)_$(METHODNAME)_OclWrapper.Create(Help);'
      '$(ENDCASEMETHODISOCLCOMPATIBLE)\'
      '$(ENDLOOPMETHODCOUNT)\'
      '$(ENDLOOPCLASSCOUNT)\'
      'end;'
      ''
      ''
      '$(LOOPCLASSCOUNT)\'
      '$(LOOPMETHODCOUNT)\'
      '$(CASEMETHODISOCLCOMPATIBLE)\'
      '1|'
      
        '1|procedure $(CLASSNAME)_$(METHODNAME)_OclWrapper.Evaluate( Para' +
        'ms : TBoldOclSymbolParameters );'
      '1|$(CASEMETHODKIND)\'
      '1|function| var LocalResult: $(METHODRETURNTYPE);'
      '1|$(ENDCASEMETHODKIND)\'
      '1|begin'
      '1|$(CASEMETHODKIND)\'
      '1|function|  LocalResult :='
      '1|$(ENDCASEMETHODKIND)\'
      '1|  (params.args[0].Value as $(CLASSNAME)).$(METHODNAME)( \'
      '1|$(LOOPMETHODPARAMETERCOUNT)\'
      '1|$(CASEMETHODPARAMETERCOUNT)'
      '1|0|'
      '1|else|,'
      '1|$(ENDCASEMETHODPARAMETERCOUNT)\'
      
        '1|    (params.args[$(METHODPARAMETERCOUNT)+1].Value as $(METHODP' +
        'ARAMETERBOLDTYPE))$(METHODPARAMETERACCESSOR)\'
      '1|$(ENDLOOPMETHODPARAMETERCOUNT) );'
      '1|'
      '1|$(CASEMETHODKIND)\'
      
        '1|function|  params.result.SetOwnedValue( $(METHODRESULTBOLDTYPE' +
        ').create( (params.args[0].Value as TBoldObject).BoldSystem) );'
      
        '1|function|  (params.result.value as $(METHODRESULTBOLDTYPE)).$(' +
        'METHODRESULTACCESSOR) := localResult;'
      
        '1|procedure|  params.result.SetOwnedValue( TBAInteger.create( (p' +
        'arams.args[0].Value as TBoldObject).BoldSystem) );'
      '1|$(ENDCASEMETHODKIND)\'
      '1|end;'
      '1|'
      '1|procedure $(CLASSNAME)_$(METHODNAME)_OclWrapper.Init;'
      '1|begin'
      '1|  InternalInit('#39'$(METHODNAME)'#39', ['
      
        '1|    DefaultBoldSystem.BoldSystemRTInfo.ClassByDelphiName['#39'$(CL' +
        'ASSNAME)'#39'].BoldType\'
      '1|$(LOOPMETHODPARAMETERCOUNT),'
      
        '1|    DefaultBoldSystem.BoldSystemTypeInfo.ValueTypeInfoByDelphi' +
        'Name['#39'$(METHODPARAMETERBOLDTYPE)'#39']\'
      '1|$(ENDLOOPMETHODPARAMETERCOUNT) ],'
      '1|    tbodNo,'
      
        '1|    DefaultBoldSystem.BoldSystemTypeInfo.ValueTypeInfoByDelphi' +
        'Name['#39'$(METHODRESULTBOLDTYPE)'#39'],'
      '1|    true, 0 );'
      '1|end;'
      '1|'
      '1|'
      '$(ENDCASEMETHODISOCLCOMPATIBLE)\'
      '$(ENDLOOPMETHODCOUNT)\'
      '$(ENDLOOPCLASSCOUNT)\'
      ''
      'initialization'
      'end.')
    FileName = '$(COMPONENTNAME)_OCL.pas'
    Description = 'OCL method wrappers'
    Left = 358
    Top = 22
  end
  object IncFileHeaderTemplate: TBoldTemplateHolder
    Template.Strings = (
      '(*****************************************************)'
      '(*                                                   *)'
      '(*  Bold for Delphi Stub File                        *)'
      '(*                                                   *)'
      '(*  Autogenerated file for method implementations    *)'
      '(*                                                   *)'
      '(*****************************************************)'
      ''
      '// $(COPYRIGHTNOTICE)\'
      ''
      '{$INCLUDE $(UNITNAME)_Interface.inc}')
    Left = 40
    Top = 144
  end
  object ReverseDeriveTemplate: TBoldTemplateHolder
    Template.Strings = (
      
        'procedure $(CLASSNAME)._$(MEMBERNAME)_ReverseDerive(DerivedObjec' +
        't: TObject);'
      'begin'
      '  $(?INTRODUCEDHERE:,inherited;)'
      'end;')
    Left = 208
    Top = 144
  end
  object ComAdaptersTemplate: TBoldTemplateHolder
    Template.Strings = (
      '(************************************)'
      '(*    This file is autogenerated    *)'
      '(* Any manual changes will be LOST! *)'
      '(************************************)'
      ''
      '(* This file should be stored in the same directory    *)'
      '(* as the form/datamodule with the corresponding model *)'
      ''
      '// IMPORTANT NOTE:'
      '// This unit needs $(UNITNAME)_TLB.pas to be generated.'
      
        '// The procedure to generate this file differs depending on whet' +
        'her you have'
      
        '// generated a Microsoft compatible file (MIDL), or a Borland co' +
        'mpatible file (the latter'
      '// does not support forward declarations)'
      ''
      '// Instructions for Borland compatible IDL'
      '// ---------------------------------------'
      '// >> NOTE! This applies only to Delphi 5! <<'
      '// >> The TLB-editor in Delphi 6 and 7 does not <<'
      '// >> support editing the text of the IDL-file <<'
      '//'
      
        '// To generate this from Borland compatible file, follow the fol' +
        'lowing steps:'
      
        '// * create a new TypeLibrary (In Delphi: File->New->ActiveX tab' +
        '->Type Library)'
      '// * Switch to the Uses-tab in the Type Library editor'
      '// * RightClick and select "Show All Type Libraries"'
      '// * Check the "Bold ObjectSpace Type Library'
      '// * RightClick and select "Show Selected"'
      '// * Switch to the Text-tab'
      '// * Paste the text from $(UNITNAME).idl'
      
        '// * Save the TypeLibrary (CTRL-S) as $(UNITNAME).tlb in the sam' +
        'e catalog as this unit'
      ''
      '// Instructions for Microsoft (MIDL) compatible IDL'
      '// ------------------------------------------------'
      
        '// If you have a MIDL-compatible file, then compile the IDL-file' +
        ' using your'
      
        '// Microsoft IDL compiler (midl.exe). It ships with C++ builder ' +
        'and with Ms Visual Studio.'
      
        '// If you have C++ Builder installed, you will have a copy of mi' +
        'dl.exe in the'
      '// bin-directory, the following command line should work:'
      '//'
      
        '// midl /cpp_cmd "cpp32" /cpp_opt "-P- -oCON" /I "<CPP dir>\incl' +
        'ude\idl" /I "<CPP dir>\include" /I "<BfD dir>\Bin" /I "<BfD dir>' +
        '\Res" $(UNITNAME).idl'
      '//'
      
        '// With MS Visual Studio 2003, the following commandline should ' +
        'work:'
      '//'
      
        '// midl /I "C:\Progra~1\MICROS~3.NET\Vc7\include" /I "C:\Progra~' +
        '1\MICROS~3.NET\Vc7\PlatformSDK\Include" /I"<BfD dir>\Bin" /I "<B' +
        'fD dir>\Res" $(UNITNAME).idl'
      '//'
      '//'
      '// * Open the resulting tlb-file in delphi'
      
        '// * Press F12 to generate the pascal implementation ($(UNITNAME' +
        ')_TLB.pas)'
      ''
      '// $(COPYRIGHTNOTICE)'
      ''
      '{ File generated $(DATETIME) }'
      ''
      'unit $(UNITNAME)_Adapters;'
      ''
      'interface'
      ''
      'uses'
      '  ActiveX,'
      '  Classes,'
      '  Controls,'
      '  SysUtils,'
      '  // interface uses'
      '$(LOOPINTERFACEUSESCOUNT)\'
      '  $(INTERFACEUSES),'
      '$(ENDLOOPINTERFACEUSESCOUNT)\'
      '  // other'
      '  BoldDefs,'
      '  BoldComAdapter,'
      '  BoldComObjectSpace_TLB,'
      '  BoldComObjectSpaceAdapters,'
      '  BoldSubscription,'
      '  BoldDeriver,'
      '  BoldElements,'
      '  BoldSystemRT,'
      '  BoldDomainElement,'
      '  BoldSystem,'
      '  BoldAttributes,'
      '  $(UNITNAME),'
      '  $(UNITNAME)_TLB;'
      ''
      'type'
      ''
      '$(LOOPCLASSCOUNT)\'
      '  $(CLASSNAME)Adapter = class;'
      '$(CASEUSETYPEDLISTS)\'
      '1|  $(CLASSNAME)ListAdapter = class;'
      '$(ENDCASEUSETYPEDLISTS)\'
      '$(ENDLOOPCLASSCOUNT)\'
      ''
      '$(LOOPCLASSCOUNT)\'
      
        '  $(CLASSNAME)Adapter = class($(SUPERADAPTERNAME)Adapter, $(INTE' +
        'RFACENAME))'
      '  private'
      '    function GetAs$(CLASSEXPRESSIONNAME): $(CLASSNAME);'
      '  protected'
      '$(LOOPMEMBERCOUNT)\'
      '$(CASEMEMBERVISIBILITY)\'
      'public|$(CASEMEMBERKIND)\'
      'public|Attribute |$(CASEMEMBERHASNATIVE)\'
      
        'public|Attribute |1|    function Get_$(MEMBERNAME): $(MEMBERNATI' +
        'VECOMTYPE); safecall;'
      'public|Attribute |1|$(CASEMEMBERISSETABLE)\'
      
        'public|Attribute |1|1|    procedure Set_$(MEMBERNAME)($(SETMEMBE' +
        'RASCONST)NewValue: $(MEMBERNATIVECOMTYPE)); safecall;'
      'public|Attribute |1|$(ENDCASEMEMBERISSETABLE)\'
      'public|Attribute |$(ENDCASEMEMBERHASNATIVE)\'
      'public|SingleRole|$(CASEROLENAVIGABLE)\'
      
        'public|SingleRole|1|    function Get_$(MEMBERNAME): $(MEMBERCOMT' +
        'YPE); safecall;'
      'public|SingleRole|1|$(CASEISTRUEROLE)\'
      
        'public|SingleRole|1|1|    procedure Set_$(MEMBERNAME)(const NewV' +
        'alue: $(MEMBERCOMTYPE)); safecall;'
      'public|SingleRole|1|$(ENDCASEISTRUEROLE)\'
      'public|SingleRole|$(ENDCASEROLENAVIGABLE)\'
      'public|MultiRole |$(CASEROLENAVIGABLE)\'
      
        'public|MultiRole |1|    function Get_$(MEMBERNAME): $(MEMBERCOMT' +
        'YPE)List; safecall;'
      'public|MultiRole |$(ENDCASEROLENAVIGABLE)\'
      'public|$(ENDCASEMEMBERKIND)\'
      '$(ENDCASEMEMBERVISIBILITY)\'
      '$(ENDLOOPMEMBERCOUNT)\'
      '$(LOOPDISPIDMETHODCOUNT)\'
      '    $(COMMETHODHEADERINTERFACE)'
      '$(ENDLOOPDISPIDMETHODCOUNT)\'
      '  public'
      
        '    constructor Create(AdaptableObject: TBoldAdaptableObject; Ow' +
        'ner: Boolean; const TypeLib: ITypeLib; const DispIntf: TGUID); o' +
        'verride;'
      
        '    property As$(CLASSEXPRESSIONNAME): $(CLASSNAME) read GetAs$(' +
        'CLASSEXPRESSIONNAME);'
      '  end;'
      ''
      '$(CASEUSETYPEDLISTS)\'
      
        '1|  $(CLASSNAME)ListAdapter = class(TBoldComListAdapter, $(INTER' +
        'FACENAME)List)'
      '1|  protected'
      
        '1|    function Get_$(CLASSEXPRESSIONNAME)(index: Integer): $(INT' +
        'ERFACENAME); safecall;'
      
        '1|    procedure Set_$(CLASSEXPRESSIONNAME)(index: Integer; const' +
        ' New$(CLASSEXPRESSIONNAME): $(INTERFACENAME)); safecall;'
      
        '1|    procedure Add(const New$(CLASSEXPRESSIONNAME): $(INTERFACE' +
        'NAME)); safecall;'
      
        '1|    function Includes(const $(CLASSEXPRESSIONNAME): $(INTERFAC' +
        'ENAME)): WordBool; safecall;'
      
        '1|    function IndexOf(const $(CLASSEXPRESSIONNAME): $(INTERFACE' +
        'NAME)): Integer; safecall;'
      
        '1|    procedure Insert(Index: Integer; const New$(CLASSEXPRESSIO' +
        'NNAME): $(INTERFACENAME)); safecall;'
      
        '1|    procedure Remove(const $(CLASSEXPRESSIONNAME): $(INTERFACE' +
        'NAME)); safecall;'
      '1|  end;'
      '1|'
      '$(ENDCASEUSETYPEDLISTS)\'
      ''
      '$(ENDLOOPCLASSCOUNT)\'
      'implementation'
      ''
      'uses'
      '  // implementation uses'
      '$(LOOPIMPLEMENTATIONUSESCOUNT)\'
      '  $(IMPLEMENTATIONUSES),'
      '$(ENDLOOPIMPLEMENTATIONUSESCOUNT)\'
      '  // other'
      '  BoldComUtils;'
      ''
      'var'
      '  G_TypeLibrary: ITypeLib = nil;'
      ''
      'function $(UNITNAME)_TypeLibrary: ITypeLib;'
      'begin'
      '  if not Assigned(G_TypeLibrary) then'
      '  begin'
      
        '    if Failed(LoadRegTypeLib(LIBID_$(UNITNAME),1,0,0,G_TypeLibra' +
        'ry)) then'
      
        '      raise EBoldCom.Create('#39'Unable to load type library ($(UNIT' +
        'NAME))'#39');'
      '  end;'
      '  Result := G_TypeLibrary;'
      'end;'
      ''
      '$(LOOPCLASSCOUNT)\'
      ''
      '{ $(CLASSNAME)Adapter }'
      ''
      
        'constructor $(CLASSNAME)Adapter.Create(AdaptableObject: TBoldAda' +
        'ptableObject; Owner: Boolean; const TypeLib: ITypeLib; const Dis' +
        'pIntf: TGUID);'
      'begin'
      '  if Assigned(TypeLib) then'
      '    inherited Create(AdaptableObject, Owner, TypeLib, DispIntf)'
      '  else'
      
        '    inherited Create(AdaptableObject, Owner, $(UNITNAME)_TypeLib' +
        'rary, $(INTERFACENAME));'
      'end;'
      ''
      
        'function $(CLASSNAME)Adapter.GetAs$(CLASSEXPRESSIONNAME): $(CLAS' +
        'SNAME);'
      'begin'
      '  Result := EnsuredAdaptee as $(CLASSNAME);'
      'end;'
      ''
      '$(LOOPMEMBERCOUNT)\'
      '$(CASEMEMBERVISIBILITY)\'
      'public|$(CASEMEMBERKIND)\'
      'public|Attribute |$(CASEMEMBERHASNATIVE)\'
      'public|Attribute |1|'
      
        'public|Attribute |1|function $(CLASSNAME)Adapter.Get_$(MEMBERNAM' +
        'E): $(MEMBERNATIVECOMTYPE);'
      'public|Attribute |1|begin'
      
        'public|Attribute |1|  result := As$(CLASSEXPRESSIONNAME).$(MEMBE' +
        'RNAME);'
      'public|Attribute |1|end;'
      'public|Attribute |1|$(CASEMEMBERISSETABLE)\'
      'public|Attribute |1|1|'
      
        'public|Attribute |1|1|procedure $(CLASSNAME)Adapter.Set_$(MEMBER' +
        'NAME)($(SETMEMBERASCONST)NewValue: $(MEMBERNATIVECOMTYPE));'
      'public|Attribute |1|1|begin'
      
        'public|Attribute |1|1|  As$(CLASSEXPRESSIONNAME).$(MEMBERNAME) :' +
        '= NewValue;'
      'public|Attribute |1|1|end;'
      'public|Attribute |1|$(ENDCASEMEMBERISSETABLE)\'
      'public|Attribute |$(ENDCASEMEMBERHASNATIVE)\'
      'public|SingleRole|$(CASEROLENAVIGABLE)\'
      'public|SingleRole|1|'
      
        'public|SingleRole|1|function $(CLASSNAME)Adapter.Get_$(MEMBERNAM' +
        'E): $(MEMBERCOMTYPE);'
      'public|SingleRole|1|begin'
      
        'public|SingleRole|1|  BoldComCreateAdapter(As$(CLASSEXPRESSIONNA' +
        'ME).$(MEMBERNAME), False, $(MEMBERCOMTYPE), Result);'
      'public|SingleRole|1|end;'
      'public|SingleRole|1|$(CASEISTRUEROLE)\'
      'public|SingleRole|1|1|'
      
        'public|SingleRole|1|1|procedure $(CLASSNAME)Adapter.Set_$(MEMBER' +
        'NAME)(const NewValue: $(MEMBERCOMTYPE));'
      'public|SingleRole|1|1|begin'
      
        'public|SingleRole|1|1|  As$(CLASSEXPRESSIONNAME).$(MEMBERNAME) :' +
        '= BoldComInterfaceToObject(NewValue) as $(MEMBERTYPE);'
      'public|SingleRole|1|1|end;'
      'public|SingleRole|1|$(ENDCASEISTRUEROLE)\'
      'public|SingleRole|$(ENDCASEROLENAVIGABLE)\'
      'public|MultiRole |$(CASEROLENAVIGABLE)\'
      'public|MultiRole |1|'
      
        'public|MultiRole |1|function $(CLASSNAME)Adapter.Get_$(MEMBERNAM' +
        'E): $(MEMBERCOMTYPE)List;'
      'public|MultiRole |1|begin'
      
        'public|MultiRole |1|  BoldComCreateAdapter(As$(CLASSEXPRESSIONNA' +
        'ME).M_$(MEMBERNAME), False, $(MEMBERCOMTYPE)List, Result);'
      'public|MultiRole |1|end;'
      'public|MultiRole |$(ENDCASEROLENAVIGABLE)\'
      'public|$(ENDCASEMEMBERKIND)\'
      '$(ENDCASEMEMBERVISIBILITY)\'
      '$(ENDLOOPMEMBERCOUNT)\'
      '$(LOOPDISPIDMETHODCOUNT)\'
      ''
      '$(COMMETHODHEADERIMPLEMENTATION)'
      '$(COMMETHOD_TEMPVARS)\'
      'begin'
      '$(COMMETHOD_TEMPVARSCONVERT)\'
      '  $(METHODWRAPPERCALL)'
      '$(COMMETHOD_TEMPVARSCONVERTBACK)\'
      'end;'
      '$(ENDLOOPDISPIDMETHODCOUNT)\'
      ''
      '$(CASEUSETYPEDLISTS)\'
      
        '1|function $(CLASSNAME)ListAdapter.Get_$(CLASSEXPRESSIONNAME)(in' +
        'dex: Integer): $(INTERFACENAME);'
      '1|begin'
      '1|  result := Get_Elements( index ) as $(INTERFACENAME);'
      '1|end;'
      '1|'
      
        '1|procedure $(CLASSNAME)ListAdapter.Set_$(CLASSEXPRESSIONNAME)(i' +
        'ndex: Integer; const New$(CLASSEXPRESSIONNAME): $(INTERFACENAME)' +
        ');'
      '1|begin'
      '1|  Set_Elements(Index, New$(CLASSEXPRESSIONNAME));'
      '1|end;'
      '1|'
      
        '1|procedure $(CLASSNAME)ListAdapter.Add(const New$(CLASSEXPRESSI' +
        'ONNAME): $(INTERFACENAME));'
      '1|begin'
      '1|  inherited Add(New$(CLASSEXPRESSIONNAME));'
      '1|end;'
      '1|'
      
        '1|procedure $(CLASSNAME)ListAdapter.Insert(index: Integer; const' +
        ' New$(CLASSEXPRESSIONNAME): $(INTERFACENAME));'
      '1|begin'
      '1|  inherited Insert(Index, New$(CLASSEXPRESSIONNAME));'
      '1|end;'
      '1|'
      
        '1|function $(CLASSNAME)ListAdapter.Includes(const $(CLASSEXPRESS' +
        'IONNAME): $(INTERFACENAME)): WordBool;'
      '1|begin'
      '1|  result := inherited Includes($(CLASSEXPRESSIONNAME));'
      '1|end;'
      '1|'
      
        '1|function $(CLASSNAME)ListAdapter.IndexOf(const $(CLASSEXPRESSI' +
        'ONNAME): $(INTERFACENAME)): Integer;'
      '1|begin'
      '1|  result := inherited IndexOf($(CLASSEXPRESSIONNAME));'
      '1|end;'
      '1|'
      
        '1|procedure $(CLASSNAME)ListAdapter.Remove(const $(CLASSEXPRESSI' +
        'ONNAME): $(INTERFACENAME));'
      '1|begin'
      '1|  inherited Remove($(CLASSEXPRESSIONNAME));'
      '1|end;'
      '1|'
      '1|'
      '$(ENDCASEUSETYPEDLISTS)\'
      ''
      '$(ENDLOOPCLASSCOUNT)\'
      ''
      'initialization'
      '$(LOOPCLASSCOUNT)\'
      '  BoldComRegisterAdapter($(CLASSNAME)Adapter, $(CLASSNAME));'
      '$(CASEUSETYPEDLISTS)\'
      
        '1|  BoldComRegisterAdapter($(CLASSNAME)ListAdapter, $(CLASSNAME)' +
        'List);'
      '$(ENDCASEUSETYPEDLISTS)\'
      '$(ENDLOOPCLASSCOUNT)\'
      'end.')
    FileName = '$(COMPONENTNAME)_Adapters.pas'
    Left = 40
    Top = 248
  end
  object IDLTemplate: TBoldTemplateHolder
    Template.Strings = (
      '['
      '  uuid($(UNITGUID)),'
      '  version(1.0),'
      '  helpstring("$(UNITNAME) Library")'
      ']'
      'library $(UNITNAME)'
      '{'
      ''
      '  importlib("BoldComObjectSpace.dll");'
      '  importlib("stdole2.tlb");'
      '  importlib("STDVCL40.DLL");'
      ''
      '$(CASEFORWARDDECLAREINTERFACES)\'
      '1|$(LOOPCLASSCOUNT)\'
      '1|  interface $(INTERFACENAME);'
      '1|$(CASEUSETYPEDLISTS)\'
      '1|1|  interface $(INTERFACENAME)List;'
      '1|$(ENDCASEUSETYPEDLISTS)\'
      '1|$(ENDLOOPCLASSCOUNT)\'
      '$(ENDCASEFORWARDDECLAREINTERFACES)\'
      ''
      '$(LOOPCLASSCOUNT)\'
      '  ['
      '    uuid($(CLASSGUID)),'
      '    version(1.0),'
      '    dual,'
      '    oleautomation'
      '  ]'
      '  interface $(INTERFACENAME): $(SUPERINTERFACE)'
      '  {'
      '$(LOOPMEMBERCOUNT)\'
      '$(CASEMEMBERVISIBILITY)\'
      'public|$(CASEMEMBERKIND)\'
      'public|Attribute |$(CASEMEMBERHASNATIVE)\'
      'public|Attribute |1|    [propget, id(0x$(DISPID))]'
      
        'public|Attribute |1|    HRESULT _stdcall $(MEMBERNAME)([out, ret' +
        'val] $(MEMBERNATIVEIDLTYPE) * Value );'
      'public|Attribute |1|$(CASEMEMBERISSETABLE)\'
      'public|Attribute |1|1|    [propput, id(0x$(DISPID))]'
      
        'public|Attribute |1|1|    HRESULT _stdcall $(MEMBERNAME)([in] $(' +
        'MEMBERNATIVEIDLTYPE) Value );'
      'public|Attribute |1|$(ENDCASEMEMBERISSETABLE)\'
      'public|Attribute |$(ENDCASEMEMBERHASNATIVE)\'
      'public|SingleRole|$(CASEROLENAVIGABLE)\'
      'public|SingleRole|1|    [propget, id(0x$(DISPID)),'
      
        'public|SingleRole|1|     helpstring("Real type of Role: $(MEMBER' +
        'REALCOMTYPE)")]'
      
        'public|SingleRole|1|    HRESULT _stdcall $(MEMBERNAME)([out, ret' +
        'val] $(MEMBERCOMTYPE) ** Value );'
      'public|SingleRole|1|$(CASEISTRUEROLE)\'
      'public|SingleRole|1|1|    [propput, id(0x$(DISPID)),'
      
        'public|SingleRole|1|1|     helpstring("Real type of Role: $(MEMB' +
        'ERREALCOMTYPE)")]'
      
        'public|SingleRole|1|1|    HRESULT _stdcall $(MEMBERNAME)([in] $(' +
        'MEMBERCOMTYPE) * Value );'
      'public|SingleRole|1|$(ENDCASEISTRUEROLE)\'
      'public|SingleRole|$(ENDCASEROLENAVIGABLE)\'
      'public|MultiRole |$(CASEROLENAVIGABLE)\'
      'public|MultiRole |1|    [propget, id(0x$(DISPID)),'
      
        'public|MultiRole |1|     helpstring("Real type of Role: $(MEMBER' +
        'REALCOMTYPE)List")]'
      
        'public|MultiRole |1|    HRESULT _stdcall $(MEMBERNAME)([out, ret' +
        'val] $(MEMBERCOMTYPE)List ** Value );'
      'public|MultiRole |$(ENDCASEROLENAVIGABLE)\'
      'public|$(ENDCASEMEMBERKIND)\'
      '$(ENDCASEMEMBERVISIBILITY)\'
      '$(ENDLOOPMEMBERCOUNT)\'
      '$(LOOPDISPIDMETHODCOUNT)\'
      '    [id(0x$(METHODDISPID))]'
      '    HRESULT _stdcall $(IDLMETHODHEADER);'
      '$(ENDLOOPDISPIDMETHODCOUNT)\'
      '  };'
      ''
      '$(CASEUSETYPEDLISTS)\'
      '1|  ['
      '1|    uuid($(LISTGUID)),'
      '1|    version(1.0),'
      '1|    dual,'
      '1|    oleautomation'
      '1|  ]'
      '1|  interface $(INTERFACENAME)List: IBoldListCore'
      '1|  {'
      '1|    [propget, id(0x000001F5)]'
      
        '1|    HRESULT _stdcall $(CLASSEXPRESSIONNAME)([in] LONG index, [' +
        'out, retval] $(INTERFACENAME) ** Value );'
      '1|    [propput, id(0x000001F5)]'
      
        '1|    HRESULT _stdcall $(CLASSEXPRESSIONNAME)([in] LONG index, [' +
        'in] $(INTERFACENAME) * Value );'
      '1|    [id(0x00001F6)]'
      
        '1|    HRESULT _stdcall Add([in] $(INTERFACENAME)* New$(CLASSEXPR' +
        'ESSIONNAME));'
      '1|    [id(0x00001F7)]'
      
        '1|    HRESULT _stdcall Includes([in] $(INTERFACENAME) * $(CLASSE' +
        'XPRESSIONNAME), [out, retval] VARIANT_BOOL * value);'
      '1|    [id(0x00001F8)]'
      
        '1|    HRESULT _stdcall IndexOf([in] $(INTERFACENAME) * $(CLASSEX' +
        'PRESSIONNAME), [out, retval] LONG * value);'
      '1|    [id(0x00001F9)]'
      
        '1|    HRESULT _stdcall Insert([in] LONG index, [in] $(INTERFACEN' +
        'AME) * New$(CLASSEXPRESSIONNAME));'
      '1|    [id(0x00001FA)]'
      
        '1|    HRESULT _stdcall Remove([in] $(INTERFACENAME) * $(CLASSEXP' +
        'RESSIONNAME));'
      '1|  }'
      '$(ENDCASEUSETYPEDLISTS)\'
      ''
      '$(ENDLOOPCLASSCOUNT)\'
      ''
      '};')
    FileName = '$(COMPONENTNAME).idl'
    Left = 40
    Top = 312
  end
  object PersistenceInterfaceTemplate: TBoldTemplateHolder
    Template.Strings = (
      '(************************************)'
      '(*    This file is autogenerated    *)'
      '(* Any manual changes will be LOST! *)'
      '(************************************)'
      ''
      '(* This file should be stored in the same directory    *)'
      '(* as the form/datamodule with the corresponding model *)'
      ''
      '// $(COPYRIGHTNOTICE)'
      ''
      '{ File generated $(DATETIME) }'
      ''
      'unit $(UNITNAME)_PersistenceInterfaces;'
      ''
      'interface'
      ''
      'uses'
      '  // interface uses'
      '$(LOOPINTERFACEUSESCOUNT)\'
      '  $(INTERFACEUSES),'
      '$(ENDLOOPINTERFACEUSESCOUNT)\'
      '  // interface dependencies'
      '$(LOOPINTERFACEDEPENDENCIESCOUNT)\'
      '  $(INTERFACEDEPENDENCY)_PersistenceInterfaces,'
      '$(ENDLOOPINTERFACEDEPENDENCIESCOUNT)\'
      '  // other'
      '  BoldValueInterfaces,'
      '  BoldValueSpaceInterfaces,'
      '  BoldMeta,'
      '  BoldId,'
      '  BoldExternalPersistenceSupport;'
      ''
      'type'
      '$(LOOPCLASSCOUNT)\'
      '  $(PERSISTENCEINTERFACENAME) = interface;'
      '$(ENDLOOPCLASSCOUNT)\'
      ''
      '$(LOOPCLASSCOUNT)\'
      '  $(CLASSNAME)PersistenceAdapter = class;'
      '$(ENDLOOPCLASSCOUNT)\'
      ''
      '$(LOOPCLASSCOUNT)\'
      
        '  $(PERSISTENCEINTERFACENAME) = interface($(SUPERPERSISTENCEINTE' +
        'RFACENAME))'
      '  ['#39'$(PERSISTENCEINTERFACEGUID)'#39']  '
      '$(LOOPMEMBERCOUNT)\'
      '$(CASEMEMBERPERSISTENT)\'
      '1|$(CASEMEMBERKIND)\'
      
        '1|Attribute |    function Get_M_$(MEMBERNAME): $(MEMBERVALUEINTE' +
        'RFACE);'
      '1|Attribute |$(CASEMEMBERHASVALUEINTERFACENATIVE)'
      
        '1|Attribute |1|    function Get_$(MEMBERNAME): $(MEMBERVALUEINTE' +
        'RFACENATIVETYPE);'
      
        '1|Attribute |1|    procedure Set_$(MEMBERNAME)(NewValue: $(MEMBE' +
        'RVALUEINTERFACENATIVETYPE));'
      '1|Attribute |$(ENDCASEMEMBERHASVALUEINTERFACENATIVE)'
      '1|SingleRole|    function Get_M_$(MEMBERNAME): IBoldObjectIdRef;'
      
        '1|SingleRole|    function Get_$(MEMBERNAME): $(MEMBERPERSISTENCE' +
        'INTERFACE);'
      
        '1|SingleRole|    procedure Set_$(MEMBERNAME)(const NewValue: $(M' +
        'EMBERPERSISTENCEINTERFACE));'
      '1|SingleRole|    function Get_$(MEMBERNAME)_Type: TMoldClass;'
      
        '1|MultiRole |    function Get_$(MEMBERNAME): IBoldObjectIdListRe' +
        'f;'
      '1|MultiRole |    function Get_$(MEMBERNAME)_Type: TMoldClass;'
      '1|$(ENDCASEMEMBERKIND)\'
      '$(ENDCASEMEMBERPERSISTENT)\'
      '$(ENDLOOPMEMBERCOUNT)\'
      ''
      '$(LOOPMEMBERCOUNT)\'
      '$(CASEMEMBERPERSISTENT)\'
      '1|$(CASEMEMBERKIND)\'
      
        '1|Attribute |    property M_$(MEMBERNAME): $(MEMBERVALUEINTERFAC' +
        'E) read Get_M_$(MEMBERNAME);'
      '1|Attribute |$(CASEMEMBERHASVALUEINTERFACENATIVE)'
      
        '1|Attribute |1|    property $(MEMBERNAME): $(MEMBERVALUEINTERFAC' +
        'ENATIVETYPE) read Get_$(MEMBERNAME) write Set_$(MEMBERNAME);'
      '1|Attribute |$(ENDCASEMEMBERHASVALUEINTERFACENATIVE)'
      
        '1|SingleRole|    property M_$(MEMBERNAME): IBoldObjectIdRef read' +
        ' Get_M_$(MEMBERNAME);'
      
        '1|SingleRole|    property $(MEMBERNAME): $(MEMBERPERSISTENCEINTE' +
        'RFACE) read Get_$(MEMBERNAME) write Set_$(MEMBERNAME);'
      
        '1|SingleRole|    property $(MEMBERNAME)_Type: TMoldClass read Ge' +
        't_$(MEMBERNAME)_Type;'
      
        '1|MultiRole |    property $(MEMBERNAME): IBoldObjectIdListRef re' +
        'ad Get_$(MEMBERNAME);'
      
        '1|MultiRole |    property $(MEMBERNAME)_Type: TMoldClass read Ge' +
        't_$(MEMBERNAME)_Type;'
      '1|$(ENDCASEMEMBERKIND)\'
      '$(ENDCASEMEMBERPERSISTENT)\'
      '$(ENDLOOPMEMBERCOUNT)\'
      '  end;'
      ''
      '$(ENDLOOPCLASSCOUNT)\'
      '$(LOOPCLASSCOUNT)\'
      
        '  $(CLASSNAME)PersistenceAdapter = class($(SUPERCLASSNAME)Persis' +
        'tenceAdapter, $(PERSISTENCEINTERFACENAME))'
      '  private'
      '$(LOOPMEMBERCOUNT)\'
      '$(CASEMEMBERPERSISTENT)\'
      '1|$(CASEMEMBERKIND)\'
      
        '1|Attribute |    function Get_M_$(MEMBERNAME): $(MEMBERVALUEINTE' +
        'RFACE);'
      '1|Attribute |$(CASEMEMBERHASVALUEINTERFACENATIVE)'
      
        '1|Attribute |1|    function Get_$(MEMBERNAME): $(MEMBERVALUEINTE' +
        'RFACENATIVETYPE);'
      
        '1|Attribute |1|    procedure Set_$(MEMBERNAME)(NewValue: $(MEMBE' +
        'RVALUEINTERFACENATIVETYPE));'
      '1|Attribute |$(ENDCASEMEMBERHASVALUEINTERFACENATIVE)'
      '1|SingleRole|    function Get_M_$(MEMBERNAME): IBoldObjectIdRef;'
      
        '1|SingleRole|    function Get_$(MEMBERNAME): $(MEMBERPERSISTENCE' +
        'INTERFACE);'
      
        '1|SingleRole|    procedure Set_$(MEMBERNAME)(const NewValue: $(M' +
        'EMBERPERSISTENCEINTERFACE));'
      '1|SingleRole|    function Get_$(MEMBERNAME)_Type: TMoldClass;'
      
        '1|MultiRole |    function Get_$(MEMBERNAME): IBoldObjectIdListRe' +
        'f;'
      '1|MultiRole |    function Get_$(MEMBERNAME)_Type: TMoldClass;'
      '$(ENDCASEMEMBERKIND)\'
      '$(ENDCASEMEMBERPERSISTENT)\'
      '$(ENDLOOPMEMBERCOUNT)\'
      '  end;'
      ''
      '$(ENDLOOPCLASSCOUNT)\'
      'implementation'
      ''
      'uses'
      '  // implementation uses'
      '$(LOOPIMPLEMENTATIONUSESCOUNT)\'
      '  $(IMPLEMENTATIONUSES),'
      '$(ENDLOOPIMPLEMENTATIONUSESCOUNT)\'
      '  // other'
      '  bolddefs;'
      ''
      '$(LOOPCLASSCOUNT)\'
      '$(LOOPMEMBERCOUNT)\'
      '$(CASEMEMBERPERSISTENT)\'
      '1|$(CASEMEMBERKIND)\'
      
        '1|Attribute |function $(CLASSNAME)PersistenceAdapter.Get_M_$(MEM' +
        'BERNAME): $(MEMBERVALUEINTERFACE);'
      '1|Attribute |var'
      '1|Attribute |  value: IBoldValue;'
      '1|Attribute |begin'
      
        '1|Attribute |  Value := AdaptedInterface.ValueByIndex[$(MEMBERIN' +
        'DEX)];'
      
        '1|Attribute |  if not value.QueryInterface($(MEMBERVALUEINTERFAC' +
        'E), result) = S_OK then'
      
        '1|Attribute |    raise EBold.Create('#39'$(CLASSNAME)PersistenceAdap' +
        'ter.Get_M_$(MEMBERNAME): Invalid interface... does not support $' +
        '(MEMBERVALUEINTERFACE)'#39');'
      '1|Attribute |end;'
      '1|Attribute |'
      '1|Attribute |$(CASEMEMBERHASVALUEINTERFACENATIVE)'
      
        '1|Attribute |1|function $(CLASSNAME)PersistenceAdapter.Get_$(MEM' +
        'BERNAME): $(MEMBERVALUEINTERFACENATIVETYPE);'
      '1|Attribute |1|begin'
      
        '1|Attribute |1|  result := Get_M_$(MemberName).$(MEMBERVALUEINTE' +
        'RFACENATIVEACCESSOR);'
      '1|Attribute |1|end;'
      '1|Attribute |1|'
      
        '1|Attribute |1|procedure $(CLASSNAME)PersistenceAdapter.Set_$(ME' +
        'MBERNAME)(NewValue: $(MEMBERVALUEINTERFACENATIVETYPE));'
      '1|Attribute |1|begin'
      
        '1|Attribute |1|  Get_M_$(MemberName).$(MEMBERVALUEINTERFACENATIV' +
        'EACCESSOR) := NewValue;'
      '1|Attribute |1|end;'
      '1|Attribute |1|'
      '1|Attribute |$(ENDCASEMEMBERHASVALUEINTERFACENATIVE)'
      
        '1|SingleRole|function $(CLASSNAME)PersistenceAdapter.Get_M_$(MEM' +
        'BERNAME): IBoldObjectIdRef;'
      '1|SingleRole|var'
      '1|SingleRole|  value: IBoldValue;'
      '1|SingleRole|begin'
      
        '1|SingleRole|  Value := AdaptedInterface.ValueByIndex[$(MEMBERIN' +
        'DEX)];'
      
        '1|SingleRole|  if not value.QueryInterface(IBoldObjectIdRef, res' +
        'ult) = S_OK then'
      
        '1|SingleRole|    raise EBold.Create('#39'$(CLASSNAME)PersistenceAdap' +
        'ter.Get_M_$(MEMBERNAME): Invalid interface... does not support I' +
        'BoldObjectIdRef'#39');'
      '1|SingleRole|end;'
      '1|SingleRole|'
      
        '1|SingleRole|function $(CLASSNAME)PersistenceAdapter.Get_$(MEMBE' +
        'RNAME): $(MEMBERPERSISTENCEINTERFACE);'
      '1|SingleRole|var'
      '1|SingleRole|  id: TBoldObjectId;'
      '1|SingleRole|  ObjectContents: IBoldObjectContents;'
      '1|SingleRole|begin'
      '1|SingleRole|  result := nil;'
      '1|SingleRole|  Id := Get_M_$(MemberName).Id;'
      '1|SingleRole|  if assigned(Id) then'
      '1|SingleRole|  begin'
      
        '1|SingleRole|    ObjectContents := ValueSpace.ObjectContentsByOb' +
        'jectId[Id];'
      '1|SingleRole|    if assigned(ObjectContents) then'
      
        '1|SingleRole|      result := $(MEMBERTYPE)PersistenceAdapter.Cre' +
        'ate(ObjectContents, ValueSpace, Get_$(MEMBERNAME)_Type);'
      '1|SingleRole|  end;'
      '1|SingleRole|end;'
      '1|SingleRole|'
      
        '1|SingleRole|procedure $(CLASSNAME)PersistenceAdapter.Set_$(MEMB' +
        'ERNAME)(const NewValue: $(MEMBERPERSISTENCEINTERFACE));'
      '1|SingleRole|begin'
      '1|SingleRole|  if assigned(NewValue) then'
      
        '1|SingleRole|    Get_M_$(MemberName).SetFromId(NewValue.AsObject' +
        'Contents.ObjectId)'
      '1|SingleRole|  else'
      '1|SingleRole|    Get_M_$(MemberName).SetFromId(nil);'
      '1|SingleRole|end;'
      '1|SingleRole|'
      
        '1|SingleRole|function $(CLASSNAME)PersistenceAdapter.Get_$(MEMBE' +
        'RNAME)_Type: TMoldClass;'
      '1|SingleRole|begin'
      
        '1|SingleRole|  result := (MoldClass.AllBoldMembers[$(MEMBERINDEX' +
        ')] as TMoldRole).OtherEnd.MoldClass;'
      '1|SingleRole|end;'
      '1|SingleRole|'
      
        '1|MultiRole |function $(CLASSNAME)PersistenceAdapter.Get_$(MEMBE' +
        'RNAME): IBoldObjectIdListRef;'
      '1|MultiRole |var'
      '1|MultiRole |  value: IBoldValue;'
      '1|MultiRole |begin'
      
        '1|MultiRole |  Value := AdaptedInterface.ValueByIndex[$(MEMBERIN' +
        'DEX)];'
      
        '1|MultiRole |  if not value.QueryInterface(IBoldObjectIdListRef,' +
        ' result) = S_OK then'
      
        '1|MultiRole |    raise EBold.Create('#39'$(CLASSNAME)PersistenceAdap' +
        'ter.Get_M_$(MEMBERNAME): Invalid interface... does not support I' +
        'BoldObjectIdListRef'#39');'
      '1|MultiRole |end;'
      '1|MultiRole |'
      
        '1|MultiRole |function $(CLASSNAME)PersistenceAdapter.Get_$(MEMBE' +
        'RNAME)_Type: TMoldClass;'
      '1|MultiRole |begin'
      
        '1|MultiRole |  result := (MoldClass.AllBoldMembers[$(MEMBERINDEX' +
        ')] as TMoldRole).OtherEnd.MoldClass;'
      '1|MultiRole |end;'
      ''
      '$(ENDCASEMEMBERKIND)\'
      '$(ENDCASEMEMBERPERSISTENT)\'
      '$(ENDLOOPMEMBERCOUNT)\'
      ''
      '$(ENDLOOPCLASSCOUNT)\'
      ''
      'initialization'
      '$(LOOPCLASSCOUNT)\'
      
        '  TBoldObjectPersistenceAdapter.RegisterPersistenceInterface($(C' +
        'LASSNAME)PersistenceAdapter, '#39'$(CLASSEXPRESSIONNAME)'#39');'
      '$(ENDLOOPCLASSCOUNT)\'
      'end.')
    FileName = '$(COMPONENTNAME)_PersistenceInterfaces.pas'
    Left = 264
    Top = 272
  end
end
