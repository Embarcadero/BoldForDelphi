<!DOCTYPE DLUnitDoc>
<DLUnitDoc ExplicitSummary="true" Version="$Header: /BfD/Source/Handles/Manipulators/BoldManipulators.UnitDoc 4     01-12-12 17:12 Jano $">
   <Classes>
      <Class Name="TBoldManipulator">
         <Events>
            <Event Name="OnDecrypt">
               <Summary></Summary>
               <Desc>Implement this event handler if you want to decrypt previously encrypted IdStrings. </Desc>
            </Event>
            <Event Name="OnEncrypt">
               <Summary></Summary>
               <Desc>Implement this event handler if you want to encrypt the IdStrings generated by the TBoldManipulator. The main reasof for doing this is both to avoid exposing internal information in the document, and more importantly to make it impossible to fake an id and modify something other that the value recieved. </Desc>
            </Event>
         </Events>
         <Methods>
            <Method Name="AddMapping">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="Create">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="CreateObject">
               <Summary>Create object using name of class.</Summary>
               <Desc>Creates an object of class Classname in <See Property="BoldSystemHandle"/>.System  and returns the IdString identifying the newly created object. </Desc>
            </Method>
            <Method Name="DefaultTagForElement">
               <Summary>Default tag for element.</Summary>
               <Desc>Returns a string that can be used as the XML tag namefor Element. The default tag name of a TBoldElement is the element's expression name. </Desc>
            </Method>
            <Method Name="DeleteObject">
               <Summary>Delete object with id IdString.</Summary>
               <Desc>Deletes the object <See Property="BoldSystemHandle"/>.System identified by IdString. </Desc>
            </Method>
            <Method Name="Destroy">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="ElementForIdString">
               <Summary>Returns the TBoldElement identified by IdString. </Summary>
               <Desc>The method will return the element identified by IdString
                  <BH>Usage</BH>
Im most cases a user will use <See Method="SetValue"/> or <See Method="SelectObject"/> rather than calling this method.</Desc>
            </Method>
            <Method Name="ElementForRawIdString">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetMapping">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetValueAndId">
               <Summary></Summary>
               <Desc> This function takes a TBoldElement and returns its IdString and text representation using the OnGet event of the mapper spcecified by the Mapping parameter to render the value of the Element. If no mapper is specified, the default text representation is used. The manipulator finds the mapper by matching the MappingName property of the mapper with the value of the Mapping argument. The id produced will contain the name of the mapper, so that the correct reverse mapper is used by <see method=SetValue>.
</Desc>
            </Method>
            <Method Name="IdStringForElement">
               <Summary></Summary>
               <Desc>This function takes a TBoldElement and a mapping name and returns an IdString for identifying the element. The mapper's id is appended to the IdString for reverse rendering.
                  <BH>Usage</BH>
This method will in general only be used for objects, while <see method=GetValueAndId> will be used for members.</Desc>
            </Method>
            <Method Name="Notification">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="RawIdStringForElement">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="SetBoldSystemHandle">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="SetFromList">
               <Summary>Set multiple values from list.</Summary>
               <Desc>Use this method to update a set of object space values from a list of strings in the form Name=Value where Name represents an IdString and Value represents the text representation of a value in the object space. </Desc>
            </Method>
            <Method Name="SetMappers">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="SetValue">
               <Summary></Summary>
               <Desc>Use this method to update a value in the object space defined IdString with the modified text representation of the value denoted by the IdString. If the id contains a mapper, the OnSet event of that manipluator is used for setting the value.</Desc>
            </Method>
            <Method Name="StripMapping">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
         </Methods>
         <Properties>
            <Property Name="BoldSystemHandle">
               <Summary>The system handle to which the manipulator is connected to. </Summary>
               <Desc> A manipulator manipulates only objects residing in the object space it is connected to.</Desc>
            </Property>
            <Property Name="IdStringRepresentation">
               <Summary>Determines the format of the IdStrings generated by the manipulator. </Summary>
               <Desc>IdStringRepresentation determines the format of the IdStrings generated by the manipulator to identify the text representations of the values in the object space. </Desc>
               <SeeAlso><See Type="TBoldIdStringRepresentation"/></SeeAlso>
            </Property>
            <Property Name="Mappers">
               <Summary>Represents the collection of mappers managed by the TBoldmanipulator object. </Summary>
               <Desc> Use the methods of Mappers to add mappers for use by the manipulator, to clear the set of mappers managed by the manipulator, or to access the attributes of the mappers. Normally this will be done through the object inspector in the IDE.</Desc>
            </Property>
         </Properties>
         <Summary>TBoldManipulator is used to manipulate an object space via strings</Summary>
         <Desc>TBoldManipulator provides an interface for manipulating an objectspace via strings. While is is mainly intended for producing XML documents, it may be used in any context where a string representation is needed. 
The the two complementary methods <See Method="GetValueAndId"/> and <See Method="SetValue"/> provide a (potentially bidirectional) mapping from an element in an objectspace to a pair of strings (id + value), and back. The default mapping of values to strings is via the default stringrepresentation. However, the user can define <See Property="Mappers"/> to allow any mapping. This concept is similar to the renderers used in the GUI part of Bold.
Since using ID:s directly in the documents provides a potential safety risk, there are also events allowing encryption of the id.  </Desc>
      </Class>
      <Class Name="TBoldManipulatorMapper">
         <Events>
            <Event Name="OnGet">
               <Summary>Occurs when TBoldManipulator uses the mapper to render a value in the object space as a string. </Summary>
               <Desc> Write an OnGet event handler to return a string representation for a Element in the object space. If OnGet is set, it will be called by the TBoldManipulator when asked to use the mapper for rendering a value.
In the OnGet event handler Element is the value to be rendered.</Desc>
            </Event>
            <Event Name="OnSet">
               <Summary>Occurs when TBoldManipulator is asked to update an element in the object space that's been previously rendered with the mapper.</Summary>
               <Desc> Write an OnSet event handler to update a value in the object space that 's been previously rendered using the mapper.
In the OnSet event handler, Element is the value to be updated, NewValue is the modified value of the Element's string representation. </Desc>
            </Event>
         </Events>
         <Methods>
            <Method Name="GetAsString">
               <Summary>Executes the OnGet event handler if it's set.
.</Summary>
               <Desc> Executes the OnGet event handler if it's set and returns the result</Desc>
            </Method>
            <Method Name="GetDisplayName">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="SetFromString">
               <Summary>Executes the OnSet event handler if it's set.</Summary>
               <Desc> </Desc>
            </Method>
         </Methods>
         <Properties>
            <Property Name="MappingName">
               <Summary></Summary>
               <Desc>Choose a mapping name that reflects the representation of the rendered values. The value of the MappingName property is used in the methods of the TBoldXMLProducer to specify the mapper to be used when rendering a TBoldElement. </Desc>
            </Property>
         </Properties>
         <Summary>The TBoldManipulatorMapper allows rendering of values in the object space as strings. </Summary>
         <Desc> Use TBoldManipulatorMapper to render a value in the object space as a string in an XML document. The manipulator chooses an appropriate action item to render a value by matching the MappingName property in the TBoldManipulatorMapper object with the value of the Mapping argument passed to the its (manipulator's) methods.
Two way rendering can be achieved by using the xpoIncludeBoldID option in the method calls on the manipulator that take an argument of type <See Type="TBoldXMLProducerOptions"/>. The default behavior of the manipulator is to two way render all values.</Desc>
      </Class>
      <Class Name="TBoldManipulatorMapperCollection">
         <Methods>
            <Method Name="Create">
               <Summary>Creates an instance of TBoldManipulatorMapperCollection. </Summary>
               <Desc> Do not call the constructor for TBoldManipulatorMapperCollection. TBoldManipulatorMapperCollection is tailored to work with TBoldManipulator. The TBoldManipulator object creates TBoldManipulatorMapperCollection in its own constructor.</Desc>
            </Method>
            <Method Name="GetItemByname">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetItems">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetOwner">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
         </Methods>
         <Properties>
            <Property Name="ItemByname">
               <Summary>Lists the TBoldManipulatorMapper objects stored by this TBoldManipulatorMapperCollection object.</Summary>
               <Desc> Use Item ByName to get access to the individual action items stored by the T BoldManipulatorMapperCollection object by the using the mappers' MappingName property. </Desc>
            </Property>
            <Property Name="Items">
               <Summary>Lists the TBoldManipulatorMapper objects stored by this TBoldManipulatorMapperCollection object. </Summary>
               <Desc> Use Items to get access to the individual mappers stored by the TBoldManipulatorCollection object. Items is an indexed array, where the first action item has index 0, the second action item has index 1, and so on. Use Items with the Count property to iterate over all the mappers in the collection. </Desc>
            </Property>
         </Properties>
         <Summary>TBoldManipulatorMapperCollection is a collection of TBoldManipulatorMapper objects.</Summary>
         <Desc> TBoldManipulator uses TBoldManipulatorCollection to store and manipulate the individual mappers it manages. TBoldManipulatorCollection provides properties and events to:
            <UL>
               <LI>Add new mappers to the collection.</LI>
               <LI>Copy the list of mappers from another T BoldManipulatorCollection.</LI>
               <LI>Get the attributes of specified mappers in the collection.</LI>
               <LI>Empty the collection of mappers.</LI>
            </UL>
         </Desc>
      </Class>
   </Classes>
   <Interfaces>
   </Interfaces>
   <Summary></Summary>
   <Desc></Desc>
   <Types>
      <Type Name="TBoldIdStringRepresentation">
         <Summary></Summary>
         <Desc></Desc>
         <Enumeration>
            <EnumItem Name="isrVerbose">
               <Desc>The generated IdString will include the value's expression name (long format), e.g. 'Person.23'</Desc>
            </EnumItem>
            <EnumItem Name="isrTerse">
               <Desc>The generated IdString won't contain any expression names, e.g. '23' </Desc>
            </EnumItem>
         </Enumeration>
      </Type>
      <Type Name="TBoldManipulatorGetter">
         <Summary></Summary>
         <Desc></Desc>
      </Type>
      <Type Name="TBoldManipulatorSetter">
         <Summary></Summary>
         <Desc></Desc>
      </Type>
      <Type Name="TBoldStringStringFunction">
         <Summary></Summary>
         <Desc></Desc>
      </Type>
   </Types>
</DLUnitDoc>