object BoldGeneratorTemplateCPPDM: TBoldGeneratorTemplateCPPDM
  OldCreateOrder = False
  Left = 285
  Top = 161
  Height = 479
  Width = 741
  object UnitTemplate: TBoldTemplateHolder
    Template.Strings = (
      '/*****************************************/'
      '/*      This file is autogenerated       */'
      '/*   Any manual changes will be LOST!    */'
      '/*****************************************/'
      '/* Generated $(<28DATETIME)*/'
      '/*****************************************/'
      '/* This file should be stored in the     */'
      '/* same directory as the form/datamodule */'
      '/* with the corresponding model          */'
      '/*****************************************/'
      '/* Copyright notice:                     */'
      '/* $(<38COPYRIGHTNOTICE)*/'
      '/*****************************************/'
      ''
      '#include <vcl.h>'
      '#pragma hdrstop'
      ''
      '#include "$(UNITNAME).hpp"'
      ''
      '// interface uses'
      '$(LOOPINTERFACEUSESCOUNT)\'
      '#pragma link "$(INTERFACEUSES)"'
      '$(ENDLOOPINTERFACEUSESCOUNT)\'
      ''
      '// interface dependencies'
      '$(LOOPINTERFACEDEPENDENCIESCOUNT)\'
      '#pragma link "$(INTERFACEDEPENDENCY)"'
      '$(ENDLOOPINTERFACEDEPENDENCIESCOUNT)\'
      ''
      '// attribute dependencies'
      '$(LOOPATTRIBUTECLASSDEPENDENCIESCOUNT)\'
      '#pragma link "$(ATTRIBUTECLASSDEPENDENCY)"'
      '$(ENDLOOPATTRIBUTECLASSDEPENDENCIESCOUNT)\'
      ''
      '#pragma link "BoldDefs"'
      '#pragma link "BoldSubscription"'
      '#pragma link "BoldDeriver"'
      '#pragma link "BoldElements"'
      '#pragma link "BoldDomainElement"'
      '#pragma link "BoldSystemRT"'
      '#pragma link "BoldSystem"'
      '#pragma link "BoldGeneratedCodeDictionary"'
      ''
      '// implementation uses'
      '$(LOOPIMPLEMENTATIONUSESCOUNT)\'
      '#pragma link "$(IMPLEMENTATIONUSES)"'
      '$(ENDLOOPIMPLEMENTATIONUSESCOUNT)\'
      ''
      '// implementation dependancies'
      '$(LOOPIMPLEMENTATIONDEPENDANCIESCOUNT)\'
      '#pragma link "$(IMPLEMENTATIONDEPENDANCIES)"'
      '$(ENDLOOPIMPLEMENTATIONDEPENDANCIESCOUNT)\'
      ''
      '#include "BoldGeneratedCodeDictionary.hpp"'
      ''
      '// Includefiles for methodimplementations'
      ''
      '$(LOOPINCLUDEFILECOUNT)\'
      '#include "$(INCLUDEFILE)"'
      '$(ENDLOOPINCLUDEFILECOUNT)\'
      ''
      
        '#define BoldMemberAssertInvalidObjectType = "Object of singlelin' +
        'k (%s.%s) is of wrong type (is %s, should be %s)";'
      ''
      '$(LOOPCLASSCOUNT)\'
      '// $(CLASSNAME)'
      ''
      '$(LOOPMEMBERCOUNT)\'
      '$(CASEMEMBERKIND)\'
      
        'Attribute |$(MEMBERTYPE)* __fastcall $(CLASSNAME)::_Get_M_$(MEMB' +
        'ERNAME)()'
      'Attribute |{'
      
        'Attribute |  // assert(ValidateMember("$(CLASSNAME)", "$(MEMBERN' +
        'AME)", $(MEMBERINDEX), __classid($(MEMBERTYPE))));'
      
        'Attribute |  $(MEMBERTYPE) *result = dynamic_cast<$(MEMBERTYPE)*' +
        '>(BoldMembers[$(MEMBERINDEX)]);'
      'Attribute |  return result;'
      'Attribute |};'
      'Attribute |'
      'Attribute |$(CASEMEMBERHASNATIVE)\'
      
        'Attribute |1|$(MEMBERNATIVETYPE) __fastcall $(CLASSNAME)::_Get$(' +
        'MEMBERNAME)()'
      'Attribute |1|{'
      
        'Attribute |1|  $(MEMBERNATIVETYPE) result = M_$(MEMBERNAME)->$(M' +
        'EMBERNATIVEACCESSOR);'
      'Attribute |1|  return result;'
      'Attribute |1|}'
      'Attribute |1|'
      'Attribute |1|$(CASEMEMBERISSETABLE)\'
      
        'Attribute |1|1|void __fastcall $(CLASSNAME)::_Set$(MEMBERNAME)($' +
        '(MEMBERNATIVETYPE) NewValue)'
      'Attribute |1|1|{'
      
        'Attribute |1|1|  M_$(MEMBERNAME)->$(MEMBERNATIVEACCESSOR) = NewV' +
        'alue;'
      'Attribute |1|1|}'
      'Attribute |1|1|'
      'Attribute |1|$(ENDCASEMEMBERISSETABLE)\'
      'Attribute |$(ENDCASEMEMBERHASNATIVE)\'
      'SingleRole|$(CASEROLENAVIGABLE)\'
      
        'SingleRole|1|TBoldObjectReference* __fastcall $(CLASSNAME)::_Get' +
        '_M_$(MEMBERNAME)()'
      'SingleRole|1|{'
      
        'SingleRole|1|  // assert(ValidateMember("$(CLASSNAME)", "$(MEMBE' +
        'RNAME)", $(MEMBERINDEX), __classid(TBoldObjectReference)));'
      
        'SingleRole|1|  TBoldObjectReference *result = dynamic_cast<TBold' +
        'ObjectReference*>(BoldMembers[$(MEMBERINDEX)]);'
      'SingleRole|1|  return result;'
      'SingleRole|1|}'
      'SingleRole|1|'
      
        'SingleRole|1|$(MEMBERTYPE)* _fastcall $(CLASSNAME)::_Get$(MEMBER' +
        'NAME)()'
      'SingleRole|1|{'
      
        'SingleRole|1|  // assert(not assigned(M_$(MEMBERNAME)->BoldObjec' +
        't) or (M_$(MEMBERNAME)->BoldObject is $(MEMBERTYPE)), SysUtils.f' +
        'ormat(BoldMemberAssertInvalidObjectType, [ClassName, $(MEMBERNAM' +
        'E), M_$(MEMBERNAME)->BoldObject->ClassName, __classid($(MEMBERTY' +
        'PE))]));'
      
        'SingleRole|1|  $(MEMBERTYPE) *result = dynamic_cast<$(MEMBERTYPE' +
        ')*>(M_$(MEMBERNAME)->BoldObject);'
      'SingleRole|1|  return result;'
      'SingleRole|1|}'
      'SingleRole|1|'
      'SingleRole|1|$(CASEISTRUEROLE)\'
      
        'SingleRole|1|1|void __fastcall $(CLASSNAME)::_Set$(MEMBERNAME)($' +
        '(MEMBERTYPE) *value)'
      'SingleRole|1|1|{'
      'SingleRole|1|1|  M_$(MEMBERNAME)->BoldObject = value;'
      'SingleRole|1|1|}'
      'SingleRole|1|1|'
      'SingleRole|1|$(ENDCASEISTRUEROLE)\'
      'SingleRole|$(ENDCASEROLENAVIGABLE)\'
      'MultiRole |$(CASEROLENAVIGABLE)\'
      
        'MultiRole |1|$(MEMBERTYPE)List* __fastcall $(CLASSNAME)::_Get$(M' +
        'EMBERNAME)()'
      'MultiRole |1|{'
      
        'MultiRole |1|  // assert(ValidateMember("$(CLASSNAME)", "$(MEMBE' +
        'RNAME)", $(MEMBERINDEX), __classid($(MEMBERTYPE)List)));'
      
        'MultiRole |1|  $(MEMBERTYPE)List *result = dynamic_cast<$(MEMBER' +
        'TYPE)List*>(BoldMembers[$(MEMBERINDEX)]);'
      'MultiRole |1|  return result;'
      'MultiRole |1|}'
      'MultiRole |1|'
      'MultiRole |1|$(CASEROLEQUALIFIED)\'
      
        'MultiRole |1|1|$(MEMBERTYPE)* __fastcall $(CLASSNAME)::_Get_Q_$(' +
        'MEMBERNAME)($(QUALIFIERFUNCTIONPARAMS))'
      'MultiRole |1|1|{'
      'MultiRole |1|1|  TBoldObject* TempResult;'
      
        'MultiRole |1|1|  TBoldMemberList* TempList = new TBoldMemberList' +
        ';'
      'MultiRole |1|1|  TempList->CloneMembers = false;'
      'MultiRole |1|1|$(LOOPQUALIFIERCOUNT)\'
      
        'MultiRole |1|1|  $(QUALIFIERBOLDTYPE)* Q_$(QUALIFIERNAME) = new ' +
        '$(QUALIFIERBOLDTYPE);'
      'MultiRole |1|1|$(ENDLOOPQUALIFIERCOUNT)\'
      'MultiRole |1|1|  try'
      'MultiRole |1|1|  {'
      'MultiRole |1|1|$(LOOPQUALIFIERCOUNT)\'
      
        'MultiRole |1|1|    Q_$(QUALIFIERNAME)->$(QUALIFIERACCESSOR) = $(' +
        'QUALIFIERNAME);'
      'MultiRole |1|1|    TempList->Add(Q_$(QUALIFIERNAME));'
      'MultiRole |1|1|$(ENDLOOPQUALIFIERCOUNT)\'
      
        'MultiRole |1|1|    TempResult = M_$(MEMBERNAME)->GetByIndex(Temp' +
        'List);'
      
        'MultiRole |1|1|    // assert(not assigned(TempResult) or (TempRe' +
        'sult is $(MEMBERTYPE)), "Illegal object in multilink");'
      'MultiRole |1|1|  }'
      'MultiRole |1|1|  __finally'
      'MultiRole |1|1|  {'
      'MultiRole |1|1|    delete TempList;'
      'MultiRole |1|1|$(LOOPQUALIFIERCOUNT)\'
      'MultiRole |1|1|    delete Q_$(QUALIFIERNAME);'
      'MultiRole |1|1|$(ENDLOOPQUALIFIERCOUNT)\'
      'MultiRole |1|1|  }'
      
        'MultiRole |1|1|  return dynamic_cast<$(MEMBERTYPE)*>(TempResult)' +
        ';'
      'MultiRole |1|1|}'
      'MultiRole |1|1|'
      'MultiRole |1|$(ENDCASEROLEQUALIFIED)\'
      'MultiRole |$(ENDCASEROLENAVIGABLE)\'
      '$(ENDCASEMEMBERKIND)\'
      '$(ENDLOOPMEMBERCOUNT)\'
      '\'
      '$(CASEISVERSIONED)\'
      
        '1|$(CLASSNAME)* __fastcall $(CLASSNAME)::AtTime(TBoldTimeStampTy' +
        'pe Time)'
      '1|{'
      
        '1|  $(CLASSNAME)* result = dynamic_cast<$(CLASSNAME)*>($(SUPERCL' +
        'ASSNAME)::AtTime(Time));'
      '1|  return result;'
      '1|}'
      '1|'
      '$(ENDCASEISVERSIONED)\'
      '\'
      '$(CASEUSETYPEDLISTS)\'
      '1|void __fastcall $(CLASSNAME)List::Add($(CLASSNAME) *NewObject)'
      '1|{'
      '1|  if (NewObject != NULL)'
      '1|  {'
      '1|    AddElement(NewObject);'
      '1|  }'
      '1|}'
      '1|'
      
        '1|int __fastcall $(CLASSNAME)List::IndexOf($(CLASSNAME) *anObjec' +
        't)'
      '1|{'
      '1|  int result = IndexOfElement(anObject);'
      '1|  return result;'
      '1|}'
      '1|'
      
        '1|int __fastcall $(CLASSNAME)List::Includes($(CLASSNAME) *anObje' +
        'ct) // boolean?'
      '1|{'
      '1|  int result = IncludesElement(anObject);'
      '1|  return result;'
      '1|}'
      '1|'
      '1|$(CLASSNAME)* __fastcall $(CLASSNAME)List::AddNew()'
      '1|{'
      
        '1|  $(CLASSNAME) *result = dynamic_cast<$(CLASSNAME)*>(InternalA' +
        'ddNew());'
      '1|  return result;'
      '1|}'
      '1|'
      
        '1|void __fastcall $(CLASSNAME)List::Insert(int index, $(CLASSNAM' +
        'E) *NewObject)'
      '1|{'
      '1|  if (NewObject != NULL)'
      '1|  {'
      '1|    InsertElement(index, NewObject);'
      '1|  }'
      '1|}'
      '1|'
      
        '1|$(CLASSNAME)* __fastcall $(CLASSNAME)List::GetBoldObject(int i' +
        'ndex)'
      '1|{'
      
        '1|  $(CLASSNAME) *result = dynamic_cast<$(CLASSNAME)*>(GetElemen' +
        't(index));'
      '1|  return result;'
      '1|}'
      '1|'
      
        '1|void __fastcall $(CLASSNAME)List::SetBoldObject(int index, $(C' +
        'LASSNAME) *NewObject)'
      '1|{'
      '1|  SetElement(index, NewObject);'
      '1|}'
      '1|'
      '$(ENDCASEUSETYPEDLISTS)\'
      '\'
      '$(CASECLASSINTRODUCESMANUALLYDERIVEDMEMBERS)\'
      
        'true|TBoldDeriveAndResubscribe __fastcall $(CLASSNAME)::GetDeriv' +
        'eMethodForMember(TBoldMember *Member)'
      'true|{'
      'true|  TBoldDeriveAndResubscribe result = NULL;'
      'true|$(LOOPDERIVEDMEMBERCOUNT)\'
      'true|$(CASEDERIVEDMEMBERINTRODUCEDHERE)\'
      
        'true|1|  if ((result == NULL) && (Member == M_$(DERIVEDMEMBERNAM' +
        'E))) {result = &_$(DERIVEDMEMBERNAME)_DeriveAndSubscribe;}'
      'true|$(ENDCASEDERIVEDMEMBERINTRODUCEDHERE)\'
      'true|$(ENDLOOPDERIVEDMEMBERCOUNT)\'
      
        'true|  if (result == NULL) {result = $(SUPERCLASSNAME)::GetDeriv' +
        'eMethodForMember(Member);}'
      'true|  return result;'
      'true|}'
      'true|'
      
        'true|TBoldReverseDerive __fastcall $(CLASSNAME)::GetReverseDeriv' +
        'eMethodForMember(TBoldMember *Member)'
      'true|{'
      'true|  TBoldReverseDerive result = NULL;'
      'true|$(LOOPDERIVEDMEMBERCOUNT)\'
      'true|$(CASEDERIVEDMEMBERINTRODUCEDHERE)\'
      'true|1|$(CASEDERIVEDMEMBERREVERSEDERIVED)\'
      
        'true|1|1|  if ((result == NULL) && (Member == M_$(DERIVEDMEMBERN' +
        'AME))) {result = &_$(DERIVEDMEMBERNAME)_ReverseDerive;}'
      'true|1|$(ENDCASEDERIVEDMEMBERREVERSEDERIVED)\'
      'true|$(ENDCASEDERIVEDMEMBERINTRODUCEDHERE)\'
      'true|$(ENDLOOPDERIVEDMEMBERCOUNT)\'
      
        'true|  if (result == NULL) {result = $(SUPERCLASSNAME)::GetRever' +
        'seDeriveMethodForMember(Member);}'
      'true|  return result;'
      'true|}'
      'true|'
      '$(ENDCASECLASSINTRODUCESMANUALLYDERIVEDMEMBERS)\'
      '\'
      '$(ENDLOOPCLASSCOUNT)\'
      '\'
      'char *GeneratedCodeCRC()'
      '{'
      '  return "$(CRC)";'
      '}'
      ''
      '$(CASEUSETYPEDLISTS)\'
      
        '1|void __fastcall InstallObjectListClasses(TBoldGeneratedClassLi' +
        'st *BoldObjectListClasses)'
      '1|{'
      '1|$(LOOPCLASSCOUNT)\'
      
        '1|  BoldObjectListClasses->AddObjectEntry("$(CLASSEXPRESSIONNAME' +
        ')", __classid($(CLASSNAME)List));'
      '1|$(ENDLOOPCLASSCOUNT)\'
      '1|}'
      '1|'
      '$(ENDCASEUSETYPEDLISTS)\'
      '\'
      
        'void __fastcall InstallBusinessClasses(TBoldGeneratedClassList *' +
        'BoldObjectClasses)'
      '{'
      '$(LOOPCLASSCOUNT)\'
      
        '  BoldObjectClasses->AddObjectEntry("$(CLASSEXPRESSIONNAME)", __' +
        'classid($(CLASSNAME)));'
      '$(ENDLOOPCLASSCOUNT)\'
      '}'
      ''
      '// the codedestricptor is initialized automatically'
      ''
      
        'TBoldGeneratedCodeDescriptor *CodeDescriptor_$(UNITNAME) = Gener' +
        'atedCodes()->AddGeneratedCodeDescriptorWithFunc("$(MODELNAME)", ' +
        '&InstallBusinessClasses, $(?USETYPEDLISTS:&InstallObjectListClas' +
        'ses,NULL), GeneratedCodeCRC());'
      ''
      '// but should be unloaded manually when it is not needed anymore'
      ''
      'void unregisterCode()'
      '{'
      '  if (CodeDescriptor_$(UNITNAME) != NULL)'
      '  {'
      '    GeneratedCodes()->Remove(CodeDescriptor_$(UNITNAME));'
      '  }'
      '}')
    FileName = '$(COMPONENTNAME).cpp'
    Description = 'Main Unit'
    Left = 80
    Top = 16
  end
  object InterfaceTemplate: TBoldTemplateHolder
    Template.Strings = (
      '$(MACROSTART M_Properties)$(CASEMEMBERKIND)\'
      
        'Attribute |  __property $(MEMBERTYPE)* M_$(MEMBERNAME) = {read=_' +
        'Get_M_$(MEMBERNAME)};'
      'SingleRole|$(CASEROLENAVIGABLE)\'
      
        'SingleRole|1|  __property TBoldObjectReference* M_$(MEMBERNAME) ' +
        '= {read=_Get_M_$(MEMBERNAME)};'
      'SingleRole|$(ENDCASEROLENAVIGABLE)\'
      'MultiRole|$(CASEROLENAVIGABLE)\'
      
        'MultiRole|1|  __property $(MEMBERTYPE)List* M_$(MEMBERNAME) = {r' +
        'ead=_Get$(MEMBERNAME)};'
      'MultiRole|$(ENDCASEROLENAVIGABLE)\'
      '$(ENDCASEMEMBERKIND)$(MACROEND M_Properties)\'
      '\'
      '$(MACROSTART Properties)$(CASEMEMBERKIND)\'
      'Attribute |$(CASEMEMBERHASNATIVE)\'
      'Attribute |1|$(CASEMEMBERISSETABLE)\'
      
        'Attribute |1|1|  __property $(MEMBERNATIVETYPE) $(MEMBERNAME) = ' +
        '{read=_Get$(MEMBERNAME), write=_Set$(MEMBERNAME)};'
      
        'Attribute |1|0|  __property $(MEMBERNATIVETYPE) $(MEMBERNAME) = ' +
        '{read=_Get$(MEMBERNAME)};'
      'Attribute |1|$(ENDCASEMEMBERISSETABLE)\'
      'Attribute |$(ENDCASEMEMBERHASNATIVE)\'
      'SingleRole|$(CASEROLENAVIGABLE)\'
      'SingleRole|1|$(CASEISTRUEROLE)\'
      
        'SingleRole|1|1|  __property $(MEMBERTYPE)* $(MEMBERNAME) = {read' +
        '=_Get$(MEMBERNAME), write=_Set$(MEMBERNAME)};'
      
        'SingleRole|1|0|  __property $(MEMBERTYPE)* $(MEMBERNAME) = {read' +
        '=_Get$(MEMBERNAME)};'
      'SingleRole|1|$(ENDCASEISTRUEROLE)\'
      'SingleRole|$(ENDCASEROLENAVIGABLE)\'
      'MultiRole |$(CASEROLENAVIGABLE)\'
      'MultiRole |1|$(CASEROLEQUALIFIED)\'
      
        'MultiRole |1|1|  __property $(MEMBERTYPE)* $(MEMBERNAME)[$(QUALI' +
        'FIERPROPERTYPARAMS)] = {read=_Get_Q_$(MEMBERNAME)};'
      
        'MultiRole |1|0|  __property $(MEMBERTYPE)List* $(MEMBERNAME) = {' +
        'read=_Get$(MEMBERNAME)};'
      'MultiRole |1|$(ENDCASEROLEQUALIFIED)\'
      'MultiRole |$(ENDCASEROLENAVIGABLE)\'
      '$(ENDCASEMEMBERKIND)$(MACROEND Properties)\'
      '\'
      '$(MACROSTART DelphiAttribute)\'
      '  __property $(DelphiAttributeType) $(DelphiAttributeName) = {\'
      '$(CASEDelphiAttributePropertyRead)\'
      'PrivateMethod         | read=Get$(DelphiAttributeName)\'
      'ProtectedVirtualMethod| read=Get$(DelphiAttributeName)\'
      'Field                 | read=f$(DelphiAttributeName)\'
      '$(ENDCASEDelphiAttributePropertyRead)\'
      '\'
      '$(CASEDelphiAttributePropertyWrite)\'
      'PrivateMethod         |, write=Set$(DelphiAttributeName)\'
      'ProtectedVirtualMethod|, write=Set$(DelphiAttributeName)\'
      'Field                 |, write=f$(DelphiAttributeName)\'
      '$(ENDCASEDelphiAttributePropertyWrite)\'
      '};'
      '$(MACROEND DelphiAttribute)\'
      '\'
      '$(MACROSTART Visibilitystuff)\'
      '$(LOOPMETHODCOUNT)$(CASEMETHODVISIBILITY)\'
      '$(Visibility)|  $(InterfaceMethodHeader);'
      '$(ENDCASEMETHODVISIBILITY)$(ENDLOOPMETHODCOUNT)\'
      '\'
      '$(LOOPMEMBERCOUNT)$(CASEMemberVisibility)\'
      '$(Visibility)|$(M_Properties)\'
      '$(ENDCASEMemberVisibility)$(ENDLOOPMEMBERCOUNT)\'
      '\'
      '$(LOOPMEMBERCOUNT)$(CASEMemberVisibility)\'
      '$(Visibility)|$(Properties)\'
      '$(ENDCASEMemberVisibility)$(ENDLOOPMEMBERCOUNT)\'
      '\'
      '$(LOOPDelphiAttributeCount)$(CASEDelphiAttributeVisibility)\'
      '$(Visibility)|$(DelphiAttribute)\'
      
        '$(ENDCASEDelphiAttributeVisibility)$(ENDLOOPDelphiAttributeCount' +
        ')\'
      '$(MACROEND Visibilitystuff)\'
      '\'
      '\'
      '/*****************************************/'
      '/*      This file is autogenerated       */'
      '/*   Any manual changes will be LOST!    */'
      '/*****************************************/'
      '/* Generated $(<28DATETIME)*/'
      '/*****************************************/'
      '/* This file should be stored in the     */'
      '/* same directory as the form/datamodule */'
      '/* with the corresponding model          */'
      '/*****************************************/'
      '/* Copyright notice:                     */'
      '/* $(<38COPYRIGHTNOTICE)*/'
      '/*****************************************/'
      ''
      '#if !defined ($(UNITNAME)_HPP)'
      '#define $(UNITNAME)_HPP'
      ''
      '// interface uses'
      '$(LOOPINTERFACEUSESCOUNT)\'
      '#include "$(INTERFACEUSES).hpp"'
      '$(ENDLOOPINTERFACEUSESCOUNT)\'
      ''
      '// interface dependencies'
      '$(LOOPINTERFACEDEPENDENCIESCOUNT)\'
      '#include "$(INTERFACEDEPENDENCY).hpp"'
      '$(ENDLOOPINTERFACEDEPENDENCIESCOUNT)\'
      ''
      '// attribute dependencies'
      '$(LOOPATTRIBUTECLASSDEPENDENCIESCOUNT)\'
      '#include "$(ATTRIBUTECLASSDEPENDENCY).hpp"'
      '$(ENDLOOPATTRIBUTECLASSDEPENDENCIESCOUNT)\'
      ''
      '#include <Classes.hpp>'
      '#include <Controls.hpp>'
      '#include <SysUtils.hpp>'
      '#include "BoldDefs.hpp"'
      '#include "BoldSubscription.hpp"'
      '#include "BoldDeriver.hpp"'
      '#include "BoldElements.hpp"'
      '#include "BoldDomainElement.hpp"'
      '#include "BoldSystemRT.hpp"'
      '#include "BoldSystem.hpp"'
      ''
      'void unregisterCode();'
      ''
      '// forward declarations of all classes }'
      ''
      '$(LOOPCLASSCOUNT)\'
      'class $(CLASSNAME);'
      '$(CASEUSETYPEDLISTS)\'
      '1|class $(CLASSNAME)List;'
      '$(ENDCASEUSETYPEDLISTS)\'
      '$(ENDLOOPCLASSCOUNT)\'
      ''
      '$(LOOPCLASSCOUNT)\'
      'class DELPHICLASS $(CLASSNAME);'
      
        'class $(CLASSNAME) : public $(SuperClassNameSpacePrefix)$(SuperC' +
        'lassName)'
      '{'
      'typedef $(SuperClassNameSpacePrefix)$(SuperClassName) inherited;'
      'private:'
      '\'
      '$(LOOPDelphiAttributeCount)\'
      '$(CASEDelphiAttributeHasField)\'
      '1|    $(DelphiAttributeType) f$(DelphiAttributeName);'
      '$(ENDCASEDelphiAttributeHasField)\'
      '$(ENDLOOPDelphiAttributeCount)\'
      '\'
      '$(LOOPMEMBERCOUNT)$(CASEMEMBERKIND)\'
      
        '    Attribute |  $(MEMBERTYPE)* __fastcall _Get_M_$(MEMBERNAME)(' +
        ');'
      '    Attribute |$(CASEMEMBERHASNATIVE)\'
      
        '    Attribute |1|  $(MEMBERNATIVETYPE) __fastcall _Get$(MEMBERNA' +
        'ME)();'
      '    Attribute |1|$(CASEMEMBERISSETABLE)\'
      
        '    Attribute |1|1|  void __fastcall _Set$(MEMBERNAME)($(MEMBERN' +
        'ATIVETYPE) NewValue);'
      '    Attribute |1|$(ENDCASEMEMBERISSETABLE)\'
      '    Attribute |$(ENDCASEMEMBERHASNATIVE)\'
      '    SingleRole|$(CASEROLENAVIGABLE)\'
      
        '    SingleRole|1|  $(MEMBERTYPE)* __fastcall _Get$(MEMBERNAME)()' +
        ';'
      
        '    SingleRole|1|  TBoldObjectReference* __fastcall _Get_M_$(MEM' +
        'BERNAME)();'
      '    SingleRole|1|$(CASEISTRUEROLE)\'
      
        '    SingleRole|1|1|  void __fastcall _Set$(MEMBERNAME)($(MEMBERT' +
        'YPE) *value);'
      '    SingleRole|1|$(ENDCASEISTRUEROLE)\'
      '    SingleRole|$(ENDCASEROLENAVIGABLE)\'
      '    MultiRole |$(CASEROLENAVIGABLE)\'
      
        '    MultiRole |1|  $(MEMBERTYPE)List* __fastcall _Get$(MEMBERNAM' +
        'E)();'
      '    MultiRole |1|$(CASEROLEQUALIFIED)\'
      
        '    MultiRole |1|1|  $(MEMBERTYPE)* __fastcall _Get_Q_$(MEMBERNA' +
        'ME)($(QUALIFIERFUNCTIONPARAMS));'
      '    MultiRole |1|$(ENDCASEROLEQUALIFIED)\'
      '    MultiRole |$(ENDCASEROLENAVIGABLE)\'
      '$(ENDCASEMEMBERKIND)$(ENDLOOPMEMBERCOUNT)\'
      '\'
      '$(LOOPDelphiAttributeCount)\'
      '$(CASEDelphiAttributePropertyRead)\'
      
        'PrivateMethod|  $(DelphiAttributeType) __fastcall Get$(DelphiAtt' +
        'ributeName)();'
      '$(ENDCASEDelphiAttributePropertyRead)\'
      '\'
      '$(CASEDelphiAttributePropertyWrite)\'
      
        'PrivateMethod|  void __fastcall Set$(DelphiAttributeName)($(Delp' +
        'hiAttributeType) NewValue);'
      '$(ENDCASEDelphiAttributePropertyWrite)\'
      '$(ENDLOOPDelphiAttributeCount)\'
      '\'
      '$(MACROSTART Visibility)private$(MACROEND Visibility)\'
      '$(VisibilityStuff)\'
      '\'
      'protected:'
      '\'
      '$(LOOPDERIVEDMEMBERCOUNT)\'
      
        '  virtual void __fastcall _$(DERIVEDMEMBERNAME)_DeriveAndSubscri' +
        'be(TObject *DerivedObject, TBoldSubscriber *Subscriber);'
      '$(CASEDERIVEDMEMBERREVERSEDERIVED)\'
      
        '1|  virtual void __fastcall _$(DERIVEDMEMBERNAME)_ReverseDerive(' +
        'TObject *DerivedObject); '
      '$(ENDCASEDERIVEDMEMBERREVERSEDERIVED)\'
      '$(ENDLOOPDERIVEDMEMBERCOUNT)\'
      '\'
      '$(CASECLASSINTRODUCESMANUALLYDERIVEDMEMBERS)\'
      
        '    true|  virtual TBoldDeriveAndResubscribe __fastcall GetDeriv' +
        'eMethodForMember(TBoldMember *Member);'
      
        '    true|  virtual TBoldReverseDerive __fastcall GetReverseDeriv' +
        'eMethodForMember(TBoldMember *Member);'
      '$(ENDCASECLASSINTRODUCESMANUALLYDERIVEDMEMBERS)\'
      '\'
      '$(LOOPDelphiAttributeCount)\'
      '$(CASEDelphiAttributePropertyRead)\'
      
        'ProtectedVirtualMethod|  $(DelphiAttributeType) Get$(DelphiAttri' +
        'buteName); virtual;'
      '$(ENDCASEDelphiAttributePropertyRead)\'
      '\'
      '$(CASEDelphiAttributePropertyWrite)\'
      
        'ProtectedVirtualMethod|  void Set$(DelphiAttributeName)($(Delphi' +
        'AttributeType) NewValue); virtual;'
      '$(ENDCASEDelphiAttributePropertyWrite)\'
      '$(ENDLOOPDelphiAttributeCount)\'
      '\'
      '$(MACROSTART Visibility)protected$(MACROEND Visibility)\'
      '$(VisibilityStuff)\'
      '\'
      'public:'
      '\'
      '  #pragma option push -w-inl'
      
        '  inline __fastcall $(CLASSNAME)(Boldsystem::TBoldSystem* aBoldS' +
        'ystem) : $(SuperClassNameSpacePrefix)$(SuperClassName)(aBoldSyst' +
        'em$(CONSTRUCTORPARAMETER)) { }'
      '  #pragma option pop'
      ''
      '$(CASEISVERSIONED)\'
      '1|  $(CLASSNAME)* __fastcall AtTime(TBoldTimeStampType Time);'
      '$(ENDCASEISVERSIONED)\'
      '\'
      '$(MACROSTART Visibility)public$(MACROEND Visibility)\'
      '$(VisibilityStuff)\'
      '};'
      ''
      '$(ENDLOOPCLASSCOUNT)\'
      '\'
      '$(LOOPCLASSCOUNT)\'
      '$(CASEUSETYPEDLISTS)\'
      '1|class DELPHICLASS $(CLASSNAME)List;'
      '1|class $(CLASSNAME)List : public $(SUPERCLASSNAME)List'
      '1|{'
      '1|protected:'
      '1|  $(CLASSNAME)* __fastcall GetBoldObject(int index);'
      
        '1|  void __fastcall SetBoldObject(int index, $(CLASSNAME) *NewOb' +
        'ject);'
      '1|public:'
      '1|  int __fastcall Includes($(CLASSNAME) *anObject);'
      '1|  int __fastcall IndexOf($(CLASSNAME) *anObject);'
      '1|  void __fastcall Add($(CLASSNAME) *NewObject);'
      '1|  $(CLASSNAME)* __fastcall AddNew();'
      '1|  void __fastcall Insert(int index, $(CLASSNAME) *NewObject);'
      
        '1|  __property $(CLASSNAME)* BoldObjects[int index] = {read=GetB' +
        'oldObject, write=SetBoldObject};'
      '1|};'
      '1|'
      '$(ENDCASEUSETYPEDLISTS)\'
      '$(ENDLOOPCLASSCOUNT)\'
      ''
      '// implementation uses'
      '$(LOOPIMPLEMENTATIONUSESCOUNT)\'
      '#include "$(IMPLEMENTATIONUSES).hpp"'
      '$(ENDLOOPIMPLEMENTATIONUSESCOUNT)\'
      ''
      '// implementation dependancies'
      '$(LOOPIMPLEMENTATIONDEPENDANCIESCOUNT)\'
      '#include "$(IMPLEMENTATIONDEPENDANCIES).hpp"'
      '$(ENDLOOPIMPLEMENTATIONDEPENDANCIESCOUNT)\'
      ''
      ''
      'char* GeneratedCodeCRC();'
      ''
      '#endif')
    FileName = '$(COMPONENTNAME).hpp'
    Description = 'Interface file'
    Left = 80
    Top = 76
  end
  object MethodTemplate: TBoldTemplateHolder
    Template.Strings = (
      '$(METHODHEADER)'
      '{'
      '$(CASECALLINHERITED)\'
      '1|  $(INHERITEDCALL);'
      '$(ENDCASECALLINHERITED)\'
      '}')
    Left = 248
    Top = 16
  end
  object DeriveAndSubscribeTemplate: TBoldTemplateHolder
    Template.Strings = (
      
        'void __fastcall $(CLASSNAME)::_$(MEMBERNAME)_DeriveAndSubscribe(' +
        'TObject* DerivedObject, TBoldSubscriber* Subscriber)'
      '{'
      '$(CASEINTRODUCEDHERE)\'
      
        '0|  $(SUPERCLASSNAME)::_$(MEMBERNAME)_DeriveAndSubscribe(Derived' +
        'Object, Subscriber);'
      '$(ENDCASEINTRODUCEDHERE)\'
      '}')
    Left = 248
    Top = 128
  end
  object OCLWrapperTemplate: TBoldTemplateHolder
    Template.Strings = (
      'unit $(UNITNAME)_OCL;'
      ''
      'interface'
      ''
      'uses'
      '  $(ALLCOMPONENTS),'
      '  BoldSystemRT,'
      '  BoldSystem,'
      '  BoldAttributes,'
      '  BoldOcl,'
      '  BoldOclSymbol;'
      ''
      'type'
      '$(LOOPCLASSCOUNT)\'
      '$(LOOPMETHODCOUNT)\'
      '$(CASEMETHODISOCLCOMPATIBLE)\'
      
        '1|  $(CLASSNAME)_$(METHODNAME)_OclWrapper = class(TBoldOclSymbol' +
        ')'
      '1|  protected'
      '1|    procedure Init; override;'
      '1|  public'
      
        '1|    procedure Evaluate( Params : TBoldOclSymbolParameters ); o' +
        'verride;'
      '1|  end;'
      ''
      '$(ENDCASEMETHODISOCLCOMPATIBLE)\'
      '$(ENDLOOPMETHODCOUNT)\'
      '$(ENDLOOPCLASSCOUNT)\'
      ''
      'implementation'
      ''
      'procedure InstallMethodObjects(SystemRTInfo: TBoldSystemRTInfo);'
      'var'
      '  help : TBoldOclSymbolHelp;'
      'begin'
      
        '  help := TBoldOcl(SystemRTInfo.SystemTypeInfo.Evaluator).Symbol' +
        'Table.help;'
      '$(LOOPCLASSCOUNT)\'
      '$(LOOPMETHODCOUNT)\'
      '$(CASEMETHODISOCLCOMPATIBLE)\'
      
        '1|  SystemRTInfo.ClassByExpressionName['#39'$(CLASSEXPRESSIONNAME)'#39']' +
        '.Methods.ItemsByExpressionName['#39'$(METHODNAME)'#39'].MethodEvaluator ' +
        ':='
      '1|      $(CLASSNAME)_$(METHODNAME)_OclWrapper.Create(Help);'
      '$(ENDCASEMETHODISOCLCOMPATIBLE)\'
      '$(ENDLOOPMETHODCOUNT)\'
      '$(ENDLOOPCLASSCOUNT)\'
      'end;'
      ''
      ''
      '$(LOOPCLASSCOUNT)\'
      '$(LOOPMETHODCOUNT)\'
      '$(CASEMETHODISOCLCOMPATIBLE)\'
      '1|'
      
        '1|procedure $(CLASSNAME)_$(METHODNAME)_OclWrapper.Evaluate( Para' +
        'ms : TBoldOclSymbolParameters );'
      '1|$(CASEMETHODKIND)\'
      '1|function| var LocalResult: $(METHODRETURNTYPE);'
      '1|$(ENDCASEMETHODKIND)\'
      '1|begin'
      '1|$(CASEMETHODKIND)\'
      '1|function|  LocalResult :='
      '1|$(ENDCASEMETHODKIND)\'
      '1|  (params.args[0].Value as $(CLASSNAME)).$(METHODNAME)( \'
      '1|$(LOOPMETHODPARAMETERCOUNT)\'
      '1|$(CASEMETHODPARAMETERCOUNT)'
      '1|0|'
      '1|else|,'
      '1|$(ENDCASEMETHODPARAMETERCOUNT)\'
      
        '1|    (params.args[$(METHODPARAMETERCOUNT)+1].Value as $(METHODP' +
        'ARAMETERBOLDTYPE))$(METHODPARAMETERACCESSOR)\'
      '1|$(ENDLOOPMETHODPARAMETERCOUNT) );'
      '1|'
      '1|$(CASEMETHODKIND)\'
      
        '1|function|  params.result.SetOwnedValue( $(METHODRESULTBOLDTYPE' +
        ').create( (params.args[0].Value as TBoldObject).BoldSystem) );'
      
        '1|function|  (params.result.value as $(METHODRESULTBOLDTYPE)).$(' +
        'METHODRESULTACCESSOR) := localResult;'
      
        '1|procedure|  params.result.SetOwnedValue( TBAInteger.create( (p' +
        'arams.args[0].Value as TBoldObject).BoldSystem) );'
      '1|$(ENDCASEMETHODKIND)\'
      '1|end;'
      '1|'
      '1|procedure $(CLASSNAME)_$(METHODNAME)_OclWrapper.Init;'
      '1|begin'
      '1|  InternalInit('#39'$(METHODNAME)'#39', ['
      
        '1|    DefaultBoldSystem.BoldSystemRTInfo.ClassByDelphiName['#39'$(CL' +
        'ASSNAME)'#39'].BoldType\'
      '1|$(LOOPMETHODPARAMETERCOUNT),'
      
        '1|    DefaultBoldSystem.BoldSystemTypeInfo.ValueTypeInfoByDelphi' +
        'Name['#39'$(METHODPARAMETERBOLDTYPE)'#39']\'
      '1|$(ENDLOOPMETHODPARAMETERCOUNT) ],'
      '1|    tbodNo,'
      
        '1|    DefaultBoldSystem.BoldSystemTypeInfo.ValueTypeInfoByDelphi' +
        'Name['#39'$(METHODRESULTBOLDTYPE)'#39'],'
      '1|    true, 0 );'
      '1|end;'
      '1|'
      '1|'
      '$(ENDCASEMETHODISOCLCOMPATIBLE)\'
      '$(ENDLOOPMETHODCOUNT)\'
      '$(ENDLOOPCLASSCOUNT)\'
      ''
      'initialization'
      'end.')
    FileName = '$(COMPONENTNAME)_OCL.pas'
    Description = 'OCL method wrappers'
    Left = 454
    Top = 14
  end
  object IncFileHeaderTemplate: TBoldTemplateHolder
    Template.Strings = (
      '//****************************************************//'
      '//                                                    //'
      '//   Bold for Delphi Stub File                        //'
      '//                                                    //'
      '//   Autogenerated file for method implementations    //'
      '//                                                    //'
      '//****************************************************//'
      ''
      '// $(COPYRIGHTNOTICE)\'
      ''
      '#include "$(UNITNAME).hpp"')
    Left = 80
    Top = 128
  end
  object ReverseDeriveTemplate: TBoldTemplateHolder
    Template.Strings = (
      
        'void __fastcall $(CLASSNAME)::_$(MEMBERNAME)_ReverseDerive(TObje' +
        'ct* DerivedObject)'
      '{'
      '$(CASEINTRODUCEDHERE)\'
      
        '0|  $(SUPERCLASSNAME)::_$(MEMBERNAME)_ReverseDerive(DerivedObjec' +
        't);'
      '$(ENDCASEINTRODUCEDHERE)\'
      '}')
    Left = 248
    Top = 72
  end
  object ComAdaptersImplTemplate: TBoldTemplateHolder
    Template.Strings = (
      '/************************************/'
      '/*    This file is autogenerated    */'
      '/* Any manual changes will be LOST! */'
      '/************************************/'
      '// File generated $(DATETIME)'
      '//'
      '// IMPORTANT NOTICE'
      '// This file is currently generated as a Pascal-file.'
      '//'
      '// This file should be stored in the same directory'
      '// as the form/datamodule with the corresponding model'
      '//'
      '// IMPORTANT NOTE:'
      
        '// This unit needs $(UNITNAME)_TLB.cpp and $(UNITNAME)_TLB.h to ' +
        'be generated.'
      
        '// The procedure to generate this file differs depending on whet' +
        'her you have'
      
        '// generated a Microsoft compatible file (MIDL), or a Borland co' +
        'mpatible file (the latter'
      '// does not support forward declarations)'
      '//'
      '// Instructions for Borland compatible IDL'
      '// ---------------------------------------'
      
        '// To generate this from Borland compatible file, follow the fol' +
        'lowing steps:'
      
        '// * create a new TypeLibrary (In CBuilder: File->New->ActiveX t' +
        'ab->Type Library)'
      '// * Switch to the Uses-tab in the Type Library editor'
      '// * RightClick and select "Show All Type Libraries"'
      '// * Check the "Bold ObjectSpace Type Library"'
      '// * RightClick and select "Show Selected"'
      '// * Switch to the Text-tab'
      '// * Paste the text from $(UNITNAME).idl'
      
        '// * Save the TypeLibrary (CTRL-S) as $(UNITNAME).tlb in the sam' +
        'e catalog as this unit'
      '//'
      '// Instructions for Microsoft (MIDL) compatible IDL'
      '// ------------------------------------------------'
      
        '// If you have a MIDL-compatible file, then compile the IDL-file' +
        ' using your'
      
        '// Microsoft IDL compiler (midl.exe). It ships with C++ builder ' +
        'and with Ms Visual studio.'
      
        '// You should have a copy of midl.exe in the CBuilder\bin direct' +
        'ory. Run the following command line:'
      '//'
      
        '// midl /cpp_cmd "cpp32" /cpp_opt "-P- -oCON" /I "<CPP dir>\incl' +
        'ude\idl" /I "<CPP dir>\include" $(UNITNAME).idl'
      '//'
      '// * Open the resulting tlb-file in CBuilder'
      
        '// * Press F12 to generate the c++ implementation ($(UNITNAME)_T' +
        'LB.cpp/$(UNITNAME)_TLB.h)'
      '//'
      '// $(COPYRIGHTNOTICE)'
      
        '/***************************************************************' +
        '******************/'
      ''
      '#include <vcl.h>'
      '#pragma hdrstop'
      ''
      '#include "$(UNITNAME)_Adapters.h"'
      
        '//--------------------------------------------------------------' +
        '-------------'
      '#pragma link "BoldDefs"'
      '#pragma link "BoldComAdapter"'
      '#pragma link "BoldComObjectSpaceAdapters"'
      '#pragma link "BoldSubscription"'
      '#pragma link "BoldDeriver"'
      '#pragma link "BoldElements"'
      '#pragma link "BoldSystemRT"'
      '#pragma link "BoldDomainElement"'
      '#pragma link "BoldSystem"'
      '#pragma link "BoldAttributes"'
      '#pragma link "BoldComUtils"'
      
        '//--------------------------------------------------------------' +
        '--------------'
      ''
      'ITypeLib* G_TypeLibrary = NULL;'
      ''
      'ITypeLib* $(UNITNAME)_TypeLibrary()'
      '{'
      '  if (!G_TypeLibrary)'
      '  {'
      
        '    if ( (LoadRegTypeLib(LIBID_$(UNITNAME),1,0,0,&G_TypeLibrary)' +
        ') != S_OK )'
      
        '      throw new EBoldCom("Unable to load type library ($(UNITNAM' +
        'E))");'
      '  }'
      '  return G_TypeLibrary;'
      '}'
      ''
      '$(LOOPCLASSCOUNT)\'
      ''
      '// $(CLASSNAME)Adapter'
      ''
      
        '__fastcall $(CLASSNAME)Adapter::$(CLASSNAME)Adapter(TBoldAdaptab' +
        'leObject* AdaptableObject,'
      
        '  Boolean Owner, ITypeLib* TypeLib, const TGUID DispIntf) : $(SU' +
        'PERADAPTERNAME)Adapter(AdaptableObject, Owner, (TypeLib) ? TypeL' +
        'ib : $(UNITNAME)_TypeLibrary(), (TypeLib) ? DispIntf : __uuidof(' +
        '$(INTERFACENAME)))'
      '{'
      '  if (TypeLib)'
      
        '    $(SUPERADAPTERNAME)Adapter::$(SUPERADAPTERNAME)Adapter(Adapt' +
        'ableObject, Owner, TypeLib, DispIntf);'
      '  else'
      
        '    $(SUPERADAPTERNAME)Adapter::$(SUPERADAPTERNAME)Adapter(Adapt' +
        'ableObject, Owner, $(UNITNAME)_TypeLibrary(), __uuidof($(INTERFA' +
        'CENAME)));'
      '}'
      ''
      
        '$(CLASSNAME)* __fastcall $(CLASSNAME)Adapter::GetAs$(CLASSEXPRES' +
        'SIONNAME)()'
      '{'
      '  return ($(CLASSNAME)*)EnsuredAdaptee;'
      '}'
      ''
      '$(LOOPMEMBERCOUNT)\'
      '$(CASEMEMBERVISIBILITY)\'
      'public|$(CASEMEMBERKIND)\'
      'public|Attribute |$(CASEMEMBERHASNATIVE)\'
      'public|Attribute |1|'
      
        'public|Attribute |1|$(MEMBERNATIVECOMTYPE) __safecall $(CLASSNAM' +
        'E)Adapter::Get_$(MEMBERNAME)()'
      'public|Attribute |1|{'
      
        'public|Attribute |1|  return As$(CLASSEXPRESSIONNAME)->$(MEMBERN' +
        'AME);'
      'public|Attribute |1|}'
      'public|Attribute |1|$(CASEMEMBERISSETABLE)\'
      'public|Attribute |1|1|'
      
        'public|Attribute |1|1|void __safecall $(CLASSNAME)Adapter::Set_$' +
        '(MEMBERNAME)($(MEMBERNATIVECOMTYPE) $(SETMEMBERASCONST)NewValue)'
      'public|Attribute |1|1|{'
      
        'public|Attribute |1|1|  As$(CLASSEXPRESSIONNAME)->$(MEMBERNAME) ' +
        '= NewValue;'
      'public|Attribute |1|1|}'
      'public|Attribute |1|$(ENDCASEMEMBERISSETABLE)\'
      'public|Attribute |$(ENDCASEMEMBERHASNATIVE)\'
      'public|SingleRole|$(CASEROLENAVIGABLE)\'
      'public|SingleRole|1|'
      
        'public|SingleRole|1|$(MEMBERCOMTYPE)* __safecall $(CLASSNAME)Ada' +
        'pter::Get_$(MEMBERNAME)()'
      'public|SingleRole|1|{'
      'public|SingleRole|1|  $(MEMBERCOMTYPE)* Result;'
      
        'public|SingleRole|1|  BoldComCreateAdapter(As$(CLASSEXPRESSIONNA' +
        'ME)->$(MEMBERNAME), False, __uuidof($(MEMBERCOMTYPE)), Result);'
      'public|SingleRole|1|  return Result;'
      'public|SingleRole|1|}'
      'public|SingleRole|1|$(CASEISTRUEROLE)\'
      'public|SingleRole|1|1|'
      
        'public|SingleRole|1|1|void __safecall $(CLASSNAME)Adapter::Set_$' +
        '(MEMBERNAME)($(MEMBERCOMTYPE)* NewValue)'
      'public|SingleRole|1|1|{'
      
        'public|SingleRole|1|1|  As$(CLASSEXPRESSIONNAME)->$(MEMBERNAME) ' +
        '= ($(MEMBERTYPE)*)(BoldComInterfaceToObject((IUnknown*)NewValue)' +
        ');'
      'public|SingleRole|1|1|}'
      'public|SingleRole|1|$(ENDCASEISTRUEROLE)\'
      'public|SingleRole|$(ENDCASEROLENAVIGABLE)\'
      'public|MultiRole |$(CASEROLENAVIGABLE)\'
      'public|MultiRole |1|'
      
        'public|MultiRole |1|$(MEMBERCOMTYPE)List* __safecall $(CLASSNAME' +
        ')Adapter::Get_$(MEMBERNAME)()'
      'public|MultiRole |1|{'
      'public|MultiRole |1|  $(MEMBERCOMTYPE)List* Result;'
      
        'public|MultiRole |1|  BoldComCreateAdapter(As$(CLASSEXPRESSIONNA' +
        'ME)->M_$(MEMBERNAME), False, __uuidof($(MEMBERCOMTYPE)List), Res' +
        'ult);'
      'public|MultiRole |1|  return Result;'
      'public|MultiRole |1|}'
      'public|MultiRole |$(ENDCASEROLENAVIGABLE)\'
      'public|$(ENDCASEMEMBERKIND)\'
      '$(ENDCASEMEMBERVISIBILITY)\'
      '$(ENDLOOPMEMBERCOUNT)\'
      '$(LOOPDISPIDMETHODCOUNT)\'
      ''
      '$(COMMETHODHEADERIMPLEMENTATION)'
      '$(COMMETHOD_TEMPVARS)\'
      '{'
      '$(COMMETHOD_TEMPVARSCONVERT)\'
      '  $(METHODWRAPPERCALL)'
      '$(COMMETHOD_TEMPVARSCONVERTBACK)\'
      '}'
      '$(ENDLOOPDISPIDMETHODCOUNT)\'
      ''
      '$(CASEUSETYPEDLISTS)\'
      
        '1|$(INTERFACENAME)* __safecall $(CLASSNAME)ListAdapter::Get_$(CL' +
        'ASSEXPRESSIONNAME)(Integer index)'
      '1|{'
      '1|  return ($(INTERFACENAME)*)(Get_Elements(index, NULL));'
      '1|}'
      '1|'
      
        '1|void __safecall $(CLASSNAME)ListAdapter::Set_$(CLASSEXPRESSION' +
        'NAME)(Integer index, const $(INTERFACENAME)* New$(CLASSEXPRESSIO' +
        'NNAME))'
      '1|{'
      
        '1|  Set_Elements(index, (IBoldElement*)New$(CLASSEXPRESSIONNAME)' +
        ');'
      '1|}'
      '1|'
      
        '1|void __safecall $(CLASSNAME)ListAdapter::Add(const $(INTERFACE' +
        'NAME)* New$(CLASSEXPRESSIONNAME))'
      '1|{'
      
        '1|  TBoldComListAdapter::Add((IBoldElement*)New$(CLASSEXPRESSION' +
        'NAME));'
      '1|}'
      '1|'
      
        '1|void __safecall $(CLASSNAME)ListAdapter::Insert(Integer index,' +
        ' const $(INTERFACENAME)* New$(CLASSEXPRESSIONNAME))'
      '1|{'
      
        '1|  TBoldComListAdapter::Insert(index, (IBoldElement*)New$(CLASS' +
        'EXPRESSIONNAME));'
      '1|}'
      '1|'
      
        '1|WordBool __safecall $(CLASSNAME)ListAdapter::Includes(const $(' +
        'INTERFACENAME)* $(CLASSEXPRESSIONNAME))'
      '1|{'
      
        '1|  return TBoldComListAdapter::Includes((IBoldElement*)$(CLASSE' +
        'XPRESSIONNAME), NULL);'
      '1|}'
      '1|'
      
        '1|Integer __safecall $(CLASSNAME)ListAdapter::IndexOf(const $(IN' +
        'TERFACENAME)* $(CLASSEXPRESSIONNAME))'
      '1|{'
      
        '1|  return TBoldComListAdapter::IndexOf((IBoldElement*)$(CLASSEX' +
        'PRESSIONNAME));'
      '1|}'
      '1|'
      
        '1|void __safecall $(CLASSNAME)ListAdapter::Remove(const $(INTERF' +
        'ACENAME)* $(CLASSEXPRESSIONNAME))'
      '1|{'
      
        '1|  TBoldComListAdapter::Remove((IBoldElement*)$(CLASSEXPRESSION' +
        'NAME));'
      '1|}'
      '1|'
      '1|'
      '$(ENDCASEUSETYPEDLISTS)\'
      ''
      '$(ENDLOOPCLASSCOUNT)\'
      ''
      '// initialization'
      '$(LOOPCLASSCOUNT)\'
      '  BoldComRegisterAdapter($(CLASSNAME)Adapter, $(CLASSNAME));'
      '$(CASEUSETYPEDLISTS)\'
      
        '1|  BoldComRegisterAdapter($(CLASSNAME)ListAdapter, $(CLASSNAME)' +
        'List);'
      '$(ENDCASEUSETYPEDLISTS)\'
      '$(ENDLOOPCLASSCOUNT)\'
      '// end.')
    FileName = '$(COMPONENTNAME)_Adapters.cpp'
    Left = 80
    Top = 216
  end
  object IDLTemplate: TBoldTemplateHolder
    Template.Strings = (
      '['
      '  uuid($(UNITGUID)),'
      '  version(1.0),'
      '  helpstring("$(UNITNAME) Library")'
      ']'
      'library $(UNITNAME)'
      '{'
      ''
      '  importlib("BoldComObjectSpace.dll");'
      '  importlib("stdole2.tlb");'
      '  importlib("STDVCL40.DLL");'
      ''
      '$(CASEFORWARDDECLAREINTERFACES)\'
      '1|$(LOOPCLASSCOUNT)\'
      '1|  interface $(INTERFACENAME);'
      '1|$(CASEUSETYPEDLISTS)\'
      '1|1|  interface $(INTERFACENAME)List;'
      '1|$(ENDCASEUSETYPEDLISTS)\'
      '1|$(ENDLOOPCLASSCOUNT)\'
      '$(ENDCASEFORWARDDECLAREINTERFACES)\'
      ''
      '$(LOOPCLASSCOUNT)\'
      '  ['
      '    uuid($(CLASSGUID)),'
      '    version(1.0),'
      '    dual,'
      '    oleautomation'
      '  ]'
      '  interface $(INTERFACENAME): $(SUPERINTERFACE)'
      '  {'
      '$(LOOPMEMBERCOUNT)\'
      '$(CASEMEMBERVISIBILITY)\'
      'public|$(CASEMEMBERKIND)\'
      'public|Attribute |$(CASEMEMBERHASNATIVE)\'
      'public|Attribute |1|    [propget, id(0x$(DISPID))]'
      
        'public|Attribute |1|    HRESULT _stdcall $(MEMBERNAME)([out, ret' +
        'val] $(MEMBERNATIVEIDLTYPE) * Value );'
      'public|Attribute |1|$(CASEMEMBERISSETABLE)\'
      'public|Attribute |1|1|    [propput, id(0x$(DISPID))]'
      
        'public|Attribute |1|1|    HRESULT _stdcall $(MEMBERNAME)([in] $(' +
        'MEMBERNATIVEIDLTYPE) Value );'
      'public|Attribute |1|$(ENDCASEMEMBERISSETABLE)\'
      'public|Attribute |$(ENDCASEMEMBERHASNATIVE)\'
      'public|SingleRole|$(CASEROLENAVIGABLE)\'
      'public|SingleRole|1|    [propget, id(0x$(DISPID)),'
      
        'public|SingleRole|1|     helpstring("Real type of Role: $(MEMBER' +
        'REALCOMTYPE)")]'
      
        'public|SingleRole|1|    HRESULT _stdcall $(MEMBERNAME)([out, ret' +
        'val] $(MEMBERCOMTYPE) ** Value );'
      'public|SingleRole|1|$(CASEISTRUEROLE)\'
      'public|SingleRole|1|1|    [propput, id(0x$(DISPID)),'
      
        'public|SingleRole|1|1|     helpstring("Real type of Role: $(MEMB' +
        'ERREALCOMTYPE)")]'
      
        'public|SingleRole|1|1|    HRESULT _stdcall $(MEMBERNAME)([in] $(' +
        'MEMBERCOMTYPE) * Value );'
      'public|SingleRole|1|$(ENDCASEISTRUEROLE)\'
      'public|SingleRole|$(ENDCASEROLENAVIGABLE)\'
      'public|MultiRole |$(CASEROLENAVIGABLE)\'
      'public|MultiRole |1|    [propget, id(0x$(DISPID)),'
      
        'public|MultiRole |1|     helpstring("Real type of Role: $(MEMBER' +
        'REALCOMTYPE)List")]'
      
        'public|MultiRole |1|    HRESULT _stdcall $(MEMBERNAME)([out, ret' +
        'val] $(MEMBERCOMTYPE)List ** Value );'
      'public|MultiRole |$(ENDCASEROLENAVIGABLE)\'
      'public|$(ENDCASEMEMBERKIND)\'
      '$(ENDCASEMEMBERVISIBILITY)\'
      '$(ENDLOOPMEMBERCOUNT)\'
      '$(LOOPDISPIDMETHODCOUNT)\'
      '    [id(0x$(METHODDISPID))]'
      '    HRESULT _stdcall $(IDLMETHODHEADER);'
      '$(ENDLOOPDISPIDMETHODCOUNT)\'
      '  };'
      ''
      '$(CASEUSETYPEDLISTS)\'
      '1|  ['
      '1|    uuid($(LISTGUID)),'
      '1|    version(1.0),'
      '1|    dual,'
      '1|    oleautomation'
      '1|  ]'
      '1|  interface $(INTERFACENAME)List: IBoldListCore'
      '1|  {'
      '1|    [propget, id(0x000001F5)]'
      
        '1|    HRESULT _stdcall $(CLASSEXPRESSIONNAME)([in] LONG index, [' +
        'out, retval] $(INTERFACENAME) ** Value );'
      '1|    [propput, id(0x000001F5)]'
      
        '1|    HRESULT _stdcall $(CLASSEXPRESSIONNAME)([in] LONG index, [' +
        'in] $(INTERFACENAME) * Value );'
      '1|    [id(0x00001F6)]'
      
        '1|    HRESULT _stdcall Add([in] $(INTERFACENAME)* New$(CLASSEXPR' +
        'ESSIONNAME));'
      '1|    [id(0x00001F7)]'
      
        '1|    HRESULT _stdcall Includes([in] $(INTERFACENAME) * $(CLASSE' +
        'XPRESSIONNAME), [out, retval] VARIANT_BOOL * value);'
      '1|    [id(0x00001F8)]'
      
        '1|    HRESULT _stdcall IndexOf([in] $(INTERFACENAME) * $(CLASSEX' +
        'PRESSIONNAME), [out, retval] LONG * value);'
      '1|    [id(0x00001F9)]'
      
        '1|    HRESULT _stdcall Insert([in] LONG index, [in] $(INTERFACEN' +
        'AME) * New$(CLASSEXPRESSIONNAME));'
      '1|    [id(0x00001FA)]'
      
        '1|    HRESULT _stdcall Remove([in] $(INTERFACENAME) * $(CLASSEXP' +
        'RESSIONNAME));'
      '1|  }'
      '$(ENDCASEUSETYPEDLISTS)\'
      ''
      '$(ENDLOOPCLASSCOUNT)\'
      ''
      '};')
    FileName = '$(COMPONENTNAME).idl'
    Left = 80
    Top = 288
  end
  object ComAdaptersHdrTemplate: TBoldTemplateHolder
    Template.Strings = (
      '//************************************//'
      '//*    This file is autogenerated    *//'
      '//* Any manual changes will be LOST! *//'
      '//************************************//'
      '// File generated $(DATETIME)'
      '//'
      '// IMPORTANT NOTICE'
      '// This file is currently generated as a Pascal-file.'
      '//'
      '// This file should be stored in the same directory'
      '// as the form/datamodule with the corresponding model.'
      '//'
      '// IMPORTANT NOTE:'
      
        '// This unit needs $(UNITNAME)_TLB.cpp and $(UNITNAME)_TLB.h to ' +
        'be generated.'
      
        '// The procedure to generate this file differs depending on whet' +
        'her you have'
      
        '// generated a Microsoft compatible file (MIDL), or a Borland co' +
        'mpatible file (the latter'
      '// does not support forward declarations)'
      '//'
      '// Instructions for Borland compatible IDL'
      '// ---------------------------------------'
      
        '// To generate this from Borland compatible file, follow the fol' +
        'lowing steps:'
      
        '// * create a new TypeLibrary (In CBuilder: File->New->ActiveX t' +
        'ab->Type Library)'
      '// * Switch to the Uses-tab in the Type Library editor'
      '// * RightClick and select "Show All Type Libraries"'
      '// * Check the "Bold ObjectSpace Type Library'
      '// * RightClick and select "Show Selected"'
      '// * Switch to the Text-tab'
      '// * Paste the text from $(UNITNAME).idl'
      
        '// * Save the TypeLibrary (CTRL-S) as $(UNITNAME).tlb in the sam' +
        'e catalog as this unit'
      '//'
      '// Instructions for Microsoft (MIDL) compatible IDL'
      '// ------------------------------------------------'
      
        '// If you have a MIDL-compatible file, then compile the IDL-file' +
        ' using your'
      
        '// Microsoft IDL compiler (midl.exe). It ships with C++ builder ' +
        'and with Ms Visual studio.'
      
        '// You should have a copy of midl.exe in the CBuilder\bin direct' +
        'ory. Run the following command line:'
      '//'
      
        '// midl /cpp_cmd "cpp32" /cpp_opt "-P- -oCON" /I "<CPP dir>\incl' +
        'ude\idl" /I "<CPP dir>\include" $(UNITNAME).idl'
      '//'
      '// * Open the resulting tlb-file in CBuilder'
      
        '// * Press F12 to generate the c++ implementation ($(UNITNAME)_T' +
        'LB.cpp/$(UNITNAME)_TLB.h)'
      '//'
      '// $(COPYRIGHTNOTICE)'
      
        '//**************************************************************' +
        '**********************'
      ''
      '#if !defined ($(UNITNAME)Adapters_HPP)'
      '#define $(UNITNAME)Adapters_HPP'
      ''
      '#include <ActiveX.hpp>'
      '#include <Classes.hpp>'
      '#include <Controls.hpp>'
      '#include <SysUtils.hpp>'
      '#include "BoldDefs.hpp"'
      '#include "BoldComAdapter.hpp"'
      '#include "BoldComObjectSpaceAdapters.hpp"'
      '#include "BoldSubscription.hpp"'
      '#include "BoldDeriver.hpp"'
      '#include "BoldElements.hpp"'
      '#include "BoldSystemRT.hpp"'
      '#include "BoldDomainElement.hpp"'
      '#include "BoldSystem.hpp"'
      '#include "BoldAttributes.hpp"'
      '#include "BoldComUtils.hpp"'
      '#include "$(UNITNAME)_TLB.h"'
      '#include "$(UNITNAME).hpp"'
      '#include "ExpandBoldComObjectSpace_TLB.h"'
      ''
      'ITypeLib* $(UNITNAME)_TypeLibrary();'
      ''
      '$(LOOPCLASSCOUNT)\'
      'class $(CLASSNAME)Adapter;'
      '$(CASEUSETYPEDLISTS)\'
      '1|class $(CLASSNAME)ListAdapter;'
      '$(ENDCASEUSETYPEDLISTS)\'
      '$(ENDLOOPCLASSCOUNT)\'
      ''
      '$(LOOPCLASSCOUNT)\'
      'class DELPHICLASS $(CLASSNAME)Adapter;'
      
        'class $(CLASSNAME)Adapter : public $(SUPERADAPTERNAME)Adapter //' +
        ' , public $(INTERFACENAME)'
      '{'
      'private:'
      '  $(CLASSNAME)* __fastcall GetAs$(CLASSEXPRESSIONNAME)();'
      'protected:'
      '  $(LOOPMEMBERCOUNT)\'
      '    $(CASEMEMBERVISIBILITY)\'
      '  public|$(CASEMEMBERKIND)\'
      '  public|Attribute |$(CASEMEMBERHASNATIVE)\'
      
        '  public|Attribute |1|$(MEMBERNATIVECOMTYPE) __safecall Get_$(ME' +
        'MBERNAME)();'
      '  public|Attribute |1|$(CASEMEMBERISSETABLE)\'
      
        '  public|Attribute |1|1|  void __safecall Set_$(MEMBERNAME)($(ME' +
        'MBERNATIVECOMTYPE) $(SETMEMBERASCONST)NewValue);'
      '  public|Attribute |1|$(ENDCASEMEMBERISSETABLE)\'
      '  public|Attribute |$(ENDCASEMEMBERHASNATIVE)\'
      '  public|SingleRole|$(CASEROLENAVIGABLE)\'
      
        '  public|SingleRole|1|$(MEMBERCOMTYPE)* __safecall Get_$(MEMBERN' +
        'AME)();'
      '  public|SingleRole|1|$(CASEISTRUEROLE)\'
      
        '  public|SingleRole|1| void __safecall Set_$(MEMBERNAME)($(MEMBE' +
        'RCOMTYPE)* NewValue);'
      '  public|SingleRole|1|$(ENDCASEISTRUEROLE)\'
      '  public|SingleRole|$(ENDCASEROLENAVIGABLE)\'
      '  public|MultiRole |$(CASEROLENAVIGABLE)\'
      
        '  public|MultiRole |1|$(MEMBERCOMTYPE)List* __safecall Get_$(MEM' +
        'BERNAME)();'
      '  public|MultiRole |$(ENDCASEROLENAVIGABLE)\'
      '  public|$(ENDCASEMEMBERKIND)\'
      '  $(ENDCASEMEMBERVISIBILITY)\'
      '$(ENDLOOPMEMBERCOUNT)\'
      '$(LOOPDISPIDMETHODCOUNT)\'
      '    $(COMMETHODHEADERINTERFACE);'
      '$(ENDLOOPDISPIDMETHODCOUNT)\'
      'public:'
      '  #pragma option push -w-inl'
      
        '  __fastcall $(CLASSNAME)Adapter(TBoldAdaptableObject* Adaptable' +
        'Object, Boolean Owner, ITypeLib* TypeLib, const TGUID DispIntf);'
      '  #pragma option pop'
      ''
      
        '  __property $(CLASSNAME)* As$(CLASSEXPRESSIONNAME) = {read=GetA' +
        's$(CLASSEXPRESSIONNAME)};'
      '};'
      ''
      '$(CASEUSETYPEDLISTS)\'
      'class DELPHICLASS $(CLASSNAME)ListAdapter;'
      
        'class $(CLASSNAME)ListAdapter : public TBoldComListAdapter // , ' +
        'public $(INTERFACENAME)List'
      '{'
      'protected:'
      
        '  $(INTERFACENAME)* __safecall Get_$(CLASSEXPRESSIONNAME)(Intege' +
        'r index);'
      
        '  void __safecall Set_$(CLASSEXPRESSIONNAME)(Integer index, cons' +
        't $(INTERFACENAME)* New$(CLASSEXPRESSIONNAME));'
      
        '  void __safecall Add(const $(INTERFACENAME)* New$(CLASSEXPRESSI' +
        'ONNAME));'
      
        '  WordBool __safecall Includes(const $(INTERFACENAME)* $(CLASSEX' +
        'PRESSIONNAME));'
      
        '  Integer __safecall IndexOf(const $(INTERFACENAME)* $(CLASSEXPR' +
        'ESSIONNAME));'
      
        '  void __safecall Insert(Integer Index, const $(INTERFACENAME)* ' +
        'New$(CLASSEXPRESSIONNAME));'
      
        '  void __safecall Remove(const $(INTERFACENAME)* $(CLASSEXPRESSI' +
        'ONNAME));'
      '};'
      ''
      '$(ENDCASEUSETYPEDLISTS)\'
      ''
      '$(ENDLOOPCLASSCOUNT)\'
      ''
      '#endif')
    FileName = '$(COMPONENTNAME)_Adapters.h'
    Left = 180
    Top = 260
  end
end
