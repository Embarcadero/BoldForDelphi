(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 13.11.2022 09:28:10         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

{$IFNDEF BoldUMLModel_Interface.inc}
{$DEFINE BoldUMLModel_Interface.inc}

{$IFNDEF BoldUMLModel_unitheader}
unit BoldUMLModel;
{$ENDIF}

interface

uses
  // interface uses
  BoldTaggedValueSupport,
  BoldUMLTypes,
  // interface dependencies
  // attribute classes
  BoldAttributes,
  BoldUMLAttributes,
  // other
  Classes,
  Controls, // for TDate
  SysUtils,
  BoldDefs,
  BoldSubscription,
  BoldDeriver,
  BoldElements,
  BoldDomainElement,
  BoldSystemRT,
  BoldSystem;

type
  { forward declarations of all classes }

  TUMLModelRoot = class;
  TUMLModelRootList = class;
  TUMLElement = class;
  TUMLElementList = class;
  TUMLElementImport = class;
  TUMLElementImportList = class;
  TUMLElementResidence = class;
  TUMLElementResidenceList = class;
  TUMLPresentationElement = class;
  TUMLPresentationElementList = class;
  TUMLTemplateParameter = class;
  TUMLTemplateParameterList = class;
  TValidator = class;
  TValidatorList = class;
  TViolation = class;
  TViolationList = class;
  Targumentstimulus1 = class;
  Targumentstimulus1List = class;
  TassociationEndRoleavailableQualifier = class;
  TassociationEndRoleavailableQualifierList = class;
  TclassifierInStateinState = class;
  TclassifierInStateinStateList = class;
  TclassifierRole_availableFeature = class;
  TclassifierRole_availableFeatureList = class;
  TclassifierRoleavailableContents = class;
  TclassifierRoleavailableContentsList = class;
  TclassifierclassifierRole_ = class;
  TclassifierclassifierRole_List = class;
  TclientclientDependency = class;
  TclientclientDependencyList = class;
  TcollaborationconstrainingElement = class;
  TcollaborationconstrainingElementList = class;
  TcommentannotatedElement = class;
  TcommentannotatedElementList = class;
  TconstrainedElementconstraint = class;
  TconstrainedElementconstraintList = class;
  Tcontentspartition = class;
  TcontentspartitionList = class;
  TcontextraisedSignal = class;
  TcontextraisedSignalList = class;
  TdeploymentLocationresident = class;
  TdeploymentLocationresidentList = class;
  TextensionPointextend = class;
  TextensionPointextendList = class;
  Tinstanceclassifier = class;
  TinstanceclassifierList = class;
  Tparameterstate = class;
  TparameterstateList = class;
  Tparticipantspecification = class;
  TparticipantspecificationList = class;
  Tpredecessormessage3 = class;
  Tpredecessormessage3List = class;
  Tpresentationsubject = class;
  TpresentationsubjectList = class;
  TsourceFlowsource = class;
  TsourceFlowsourceList = class;
  TstatedeferrableEvent = class;
  TstatedeferrableEventList = class;
  TsuppliersupplierDependency = class;
  TsuppliersupplierDependencyList = class;
  TtargetFlowtarget = class;
  TtargetFlowtargetList = class;
  TUMLModelElement = class;
  TUMLModelElementList = class;
  TUMLAction = class;
  TUMLActionList = class;
  TUMLArgument = class;
  TUMLArgumentList = class;
  TUMLAssociationEnd = class;
  TUMLAssociationEndList = class;
  TUMLAttributeLink = class;
  TUMLAttributeLinkList = class;
  TUMLComment = class;
  TUMLCommentList = class;
  TUMLConstraint = class;
  TUMLConstraintList = class;
  TUMLEvent = class;
  TUMLEventList = class;
  TUMLExtensionPoint = class;
  TUMLExtensionPointList = class;
  TUMLFeature = class;
  TUMLFeatureList = class;
  TUMLGuard = class;
  TUMLGuardList = class;
  TUMLInstance = class;
  TUMLInstanceList = class;
  TUMLInteraction = class;
  TUMLInteractionList = class;
  TUMLLink = class;
  TUMLLinkList = class;
  TUMLLinkEnd = class;
  TUMLLinkEndList = class;
  TUMLMessage = class;
  TUMLMessageList = class;
  TUMLNamespace = class;
  TUMLNamespaceList = class;
  TUMLParameter = class;
  TUMLParameterList = class;
  TUMLPartition = class;
  TUMLPartitionList = class;
  TUMLRelationship = class;
  TUMLRelationshipList = class;
  TUMLStateMachine = class;
  TUMLStateMachineList = class;
  TUMLStateVertex = class;
  TUMLStateVertexList = class;
  TUMLStimulus = class;
  TUMLStimulusList = class;
  TUMLTaggedValue = class;
  TUMLTaggedValueList = class;
  TUMLTransition = class;
  TUMLTransitionList = class;
  TUMLActionSequence = class;
  TUMLActionSequenceList = class;
  TUMLCallAction = class;
  TUMLCallActionList = class;
  TUMLCreateAction = class;
  TUMLCreateActionList = class;
  TUMLDestroyAction = class;
  TUMLDestroyActionList = class;
  TUMLReturnAction = class;
  TUMLReturnActionList = class;
  TUMLSendAction = class;
  TUMLSendActionList = class;
  TUMLTerminateAction = class;
  TUMLTerminateActionList = class;
  TUMLUninterpretedAction = class;
  TUMLUninterpretedActionList = class;
  TUMLAssociationEndRole = class;
  TUMLAssociationEndRoleList = class;
  TUMLCallEvent = class;
  TUMLCallEventList = class;
  TUMLChangeEvent = class;
  TUMLChangeEventList = class;
  TUMLSignalEvent = class;
  TUMLSignalEventList = class;
  TUMLTimeEvent = class;
  TUMLTimeEventList = class;
  TUMLBehavioralFeature = class;
  TUMLBehavioralFeatureList = class;
  TUMLStructuralFeature = class;
  TUMLStructuralFeatureList = class;
  TUMLComponentInstance = class;
  TUMLComponentInstanceList = class;
  TUMLDataValue = class;
  TUMLDataValueList = class;
  TUMLNodeInstance = class;
  TUMLNodeInstanceList = class;
  TUMLObject = class;
  TUMLObjectList = class;
  TUMLUseCaseInstance = class;
  TUMLUseCaseInstanceList = class;
  TUMLGeneralizableElement = class;
  TUMLGeneralizableElementList = class;
  TUMLDependency = class;
  TUMLDependencyList = class;
  TUMLExtend = class;
  TUMLExtendList = class;
  TUMLFlow = class;
  TUMLFlowList = class;
  TUMLGeneralization = class;
  TUMLGeneralizationList = class;
  TUMLInclude = class;
  TUMLIncludeList = class;
  TUMLActivityGraph = class;
  TUMLActivityGraphList = class;
  TUMLPseudostate = class;
  TUMLPseudostateList = class;
  TUMLState = class;
  TUMLStateList = class;
  TUMLStubState = class;
  TUMLStubStateList = class;
  TUMLSynchState = class;
  TUMLSynchStateList = class;
  TUMLMethod = class;
  TUMLMethodList = class;
  TUMLOperation = class;
  TUMLOperationList = class;
  TUMLReception = class;
  TUMLReceptionList = class;
  TUMLAttribute = class;
  TUMLAttributeList = class;
  TUMLAssociation = class;
  TUMLAssociationList = class;
  TUMLClassifier = class;
  TUMLClassifierList = class;
  TUMLCollaboration = class;
  TUMLCollaborationList = class;
  TUMLPackage = class;
  TUMLPackageList = class;
  TUMLStereotype = class;
  TUMLStereotypeList = class;
  TUMLAbstraction = class;
  TUMLAbstractionList = class;
  TUMLBinding = class;
  TUMLBindingList = class;
  TUMLPermission = class;
  TUMLPermissionList = class;
  TUMLUsage = class;
  TUMLUsageList = class;
  TUMLCompositeState = class;
  TUMLCompositeStateList = class;
  TUMLFinalState = class;
  TUMLFinalStateList = class;
  TUMLSimpleState = class;
  TUMLSimpleStateList = class;
  TUMLAssociationRole = class;
  TUMLAssociationRoleList = class;
  TUMLActor = class;
  TUMLActorList = class;
  TUMLClass = class;
  TUMLClassList = class;
  TUMLClassifierInState = class;
  TUMLClassifierInStateList = class;
  TUMLClassifierRole = class;
  TUMLClassifierRoleList = class;
  TUMLComponent = class;
  TUMLComponentList = class;
  TUMLDataType = class;
  TUMLDataTypeList = class;
  TUMLInterface = class;
  TUMLInterfaceList = class;
  TUMLNode = class;
  TUMLNodeList = class;
  TUMLSignal = class;
  TUMLSignalList = class;
  TUMLUseCase = class;
  TUMLUseCaseList = class;
  TUMLModel = class;
  TUMLModelList = class;
  TUMLSubsystem = class;
  TUMLSubsystemList = class;
  TUMLSubmachineState = class;
  TUMLSubmachineStateList = class;
  TUMLActionState = class;
  TUMLActionStateList = class;
  TUMLObjectFlowState = class;
  TUMLObjectFlowStateList = class;
  TUMLException = class;
  TUMLExceptionList = class;
  TUMLSubactivityState = class;
  TUMLSubactivityStateList = class;
  TUMLCallState = class;
  TUMLCallStateList = class;

  TUMLModelRoot = class(TBoldObject)
  private
  protected
  public
  end;

  TUMLElement = class(TUMLModelRoot)
  private
  protected
  public
  end;

  TUMLElementImport = class(TUMLModelRoot)
  private
    function _Get_M_visibility: TBAVisibilityKind;
    function _Getvisibility: TVisibilityKind;
    procedure _Setvisibility(const NewValue: TVisibilityKind);
    function _Get_M_alias: TBAString;
    function _Getalias: String;
    procedure _Setalias(const NewValue: String);
    function _Getpackage: TUMLPackage;
    function _Get_M_package: TBoldObjectReference;
    procedure _Setpackage(const value: TUMLPackage);
    function _GetmodelElement: TUMLModelElement;
    function _Get_M_modelElement: TBoldObjectReference;
    procedure _SetmodelElement(const value: TUMLModelElement);
  protected
  public
    property M_visibility: TBAVisibilityKind read _Get_M_visibility;
    property M_alias: TBAString read _Get_M_alias;
    property M_package: TBoldObjectReference read _Get_M_package;
    property M_modelElement: TBoldObjectReference read _Get_M_modelElement;
    property visibility: TVisibilityKind read _Getvisibility write _Setvisibility;
    property alias: String read _Getalias write _Setalias;
    property package: TUMLPackage read _Getpackage write _Setpackage;
    property modelElement: TUMLModelElement read _GetmodelElement write _SetmodelElement;
  end;

  TUMLElementResidence = class(TUMLModelRoot)
  private
    function _Get_M_visibility: TBAVisibilityKind;
    function _Getvisibility: TVisibilityKind;
    procedure _Setvisibility(const NewValue: TVisibilityKind);
    function _GetresidentElement: TUMLComponent;
    function _Get_M_residentElement: TBoldObjectReference;
    procedure _SetresidentElement(const value: TUMLComponent);
    function _Getresidence: TUMLModelElement;
    function _Get_M_residence: TBoldObjectReference;
    procedure _Setresidence(const value: TUMLModelElement);
  protected
  public
    property M_visibility: TBAVisibilityKind read _Get_M_visibility;
    property M_residentElement: TBoldObjectReference read _Get_M_residentElement;
    property M_residence: TBoldObjectReference read _Get_M_residence;
    property visibility: TVisibilityKind read _Getvisibility write _Setvisibility;
    property residentElement: TUMLComponent read _GetresidentElement write _SetresidentElement;
    property residence: TUMLModelElement read _Getresidence write _Setresidence;
  end;

  TUMLPresentationElement = class(TUMLModelRoot)
  private
    function _Getsubject: TUMLModelElementList;
    function _Getpresentationsubject: TpresentationsubjectList;
  protected
  public
    property M_subject: TUMLModelElementList read _Getsubject;
    property M_presentationsubject: TpresentationsubjectList read _Getpresentationsubject;
    property subject: TUMLModelElementList read _Getsubject;
    property presentationsubject: TpresentationsubjectList read _Getpresentationsubject;
  end;

  TUMLTemplateParameter = class(TUMLModelRoot)
  private
    function _GetmodelElement2: TUMLModelElement;
    function _Get_M_modelElement2: TBoldObjectReference;
    procedure _SetmodelElement2(const value: TUMLModelElement);
    function _GetmodelElement: TUMLModelElement;
    function _Get_M_modelElement: TBoldObjectReference;
    procedure _SetmodelElement(const value: TUMLModelElement);
    function _GetdefaultElement: TUMLModelElement;
    function _Get_M_defaultElement: TBoldObjectReference;
    procedure _SetdefaultElement(const value: TUMLModelElement);
  protected
  public
    property M_modelElement2: TBoldObjectReference read _Get_M_modelElement2;
    property M_modelElement: TBoldObjectReference read _Get_M_modelElement;
    property M_defaultElement: TBoldObjectReference read _Get_M_defaultElement;
    property modelElement2: TUMLModelElement read _GetmodelElement2 write _SetmodelElement2;
    property modelElement: TUMLModelElement read _GetmodelElement write _SetmodelElement;
    property defaultElement: TUMLModelElement read _GetdefaultElement write _SetdefaultElement;
  end;

  TValidator = class(TUMLModelRoot)
  private
    function _Get_M_HighestSeverity: TBASeverity;
    function _GetHighestSeverity: TSeverity;
    function _GetViolation: TViolationList;
    function _GetUMLModel: TUMLModel;
    function _Get_M_UMLModel: TBoldObjectReference;
    procedure _SetUMLModel(const value: TUMLModel);
  protected
    procedure _HighestSeverity_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    function GetDeriveMethodForMember(MemberIndex: Integer): TBoldDeriveAndResubscribe; override;
  public
    property M_HighestSeverity: TBASeverity read _Get_M_HighestSeverity;
    property M_Violation: TViolationList read _GetViolation;
    property M_UMLModel: TBoldObjectReference read _Get_M_UMLModel;
    property HighestSeverity: TSeverity read _GetHighestSeverity;
    property Violation: TViolationList read _GetViolation;
    property UMLModel: TUMLModel read _GetUMLModel write _SetUMLModel;
  end;

  TViolation = class(TUMLModelRoot)
  private
    function _Get_M_Description: TBAString;
    function _GetDescription: String;
    procedure _SetDescription(const NewValue: String);
    function _Get_M_Severity: TBASeverity;
    function _GetSeverity: TSeverity;
    procedure _SetSeverity(const NewValue: TSeverity);
    function _GetValidator: TValidator;
    function _Get_M_Validator: TBoldObjectReference;
    procedure _SetValidator(const value: TValidator);
    function _GetModelElement: TUMLModelElement;
    function _Get_M_ModelElement: TBoldObjectReference;
    procedure _SetModelElement(const value: TUMLModelElement);
  protected
  public
    property M_Description: TBAString read _Get_M_Description;
    property M_Severity: TBASeverity read _Get_M_Severity;
    property M_Validator: TBoldObjectReference read _Get_M_Validator;
    property M_ModelElement: TBoldObjectReference read _Get_M_ModelElement;
    property Description: String read _GetDescription write _SetDescription;
    property Severity: TSeverity read _GetSeverity write _SetSeverity;
    property Validator: TValidator read _GetValidator write _SetValidator;
    property ModelElement: TUMLModelElement read _GetModelElement write _SetModelElement;
  end;

  Targumentstimulus1 = class(TUMLModelRoot)
  private
    function _Getstimulus1: TUMLStimulus;
    function _Get_M_stimulus1: TBoldObjectReference;
    function _Getargument: TUMLInstance;
    function _Get_M_argument: TBoldObjectReference;
  protected
  public
    property M_stimulus1: TBoldObjectReference read _Get_M_stimulus1;
    property M_argument: TBoldObjectReference read _Get_M_argument;
    property stimulus1: TUMLStimulus read _Getstimulus1;
    property argument: TUMLInstance read _Getargument;
  end;

  TassociationEndRoleavailableQualifier = class(TUMLModelRoot)
  private
    function _GetavailableQualifier: TUMLAttribute;
    function _Get_M_availableQualifier: TBoldObjectReference;
    function _GetassociationEndRole: TUMLAssociationEndRole;
    function _Get_M_associationEndRole: TBoldObjectReference;
  protected
  public
    property M_availableQualifier: TBoldObjectReference read _Get_M_availableQualifier;
    property M_associationEndRole: TBoldObjectReference read _Get_M_associationEndRole;
    property availableQualifier: TUMLAttribute read _GetavailableQualifier;
    property associationEndRole: TUMLAssociationEndRole read _GetassociationEndRole;
  end;

  TclassifierInStateinState = class(TUMLModelRoot)
  private
    function _GetinState: TUMLState;
    function _Get_M_inState: TBoldObjectReference;
    function _GetclassifierInState: TUMLClassifierInState;
    function _Get_M_classifierInState: TBoldObjectReference;
  protected
  public
    property M_inState: TBoldObjectReference read _Get_M_inState;
    property M_classifierInState: TBoldObjectReference read _Get_M_classifierInState;
    property inState: TUMLState read _GetinState;
    property classifierInState: TUMLClassifierInState read _GetclassifierInState;
  end;

  TclassifierRole_availableFeature = class(TUMLModelRoot)
  private
    function _GetavailableFeature: TUMLFeature;
    function _Get_M_availableFeature: TBoldObjectReference;
    function _GetclassifierRole_: TUMLClassifierRole;
    function _Get_M_classifierRole_: TBoldObjectReference;
  protected
  public
    property M_availableFeature: TBoldObjectReference read _Get_M_availableFeature;
    property M_classifierRole_: TBoldObjectReference read _Get_M_classifierRole_;
    property availableFeature: TUMLFeature read _GetavailableFeature;
    property classifierRole_: TUMLClassifierRole read _GetclassifierRole_;
  end;

  TclassifierRoleavailableContents = class(TUMLModelRoot)
  private
    function _GetavailableContents: TUMLModelElement;
    function _Get_M_availableContents: TBoldObjectReference;
    function _GetclassifierRole: TUMLClassifierRole;
    function _Get_M_classifierRole: TBoldObjectReference;
  protected
  public
    property M_availableContents: TBoldObjectReference read _Get_M_availableContents;
    property M_classifierRole: TBoldObjectReference read _Get_M_classifierRole;
    property availableContents: TUMLModelElement read _GetavailableContents;
    property classifierRole: TUMLClassifierRole read _GetclassifierRole;
  end;

  TclassifierclassifierRole_ = class(TUMLModelRoot)
  private
    function _GetclassifierRole_: TUMLClassifierRole;
    function _Get_M_classifierRole_: TBoldObjectReference;
    function _Getclassifier: TUMLClassifier;
    function _Get_M_classifier: TBoldObjectReference;
  protected
  public
    property M_classifierRole_: TBoldObjectReference read _Get_M_classifierRole_;
    property M_classifier: TBoldObjectReference read _Get_M_classifier;
    property classifierRole_: TUMLClassifierRole read _GetclassifierRole_;
    property classifier: TUMLClassifier read _Getclassifier;
  end;

  TclientclientDependency = class(TUMLModelRoot)
  private
    function _GetclientDependency: TUMLDependency;
    function _Get_M_clientDependency: TBoldObjectReference;
    function _Getclient: TUMLModelElement;
    function _Get_M_client: TBoldObjectReference;
  protected
  public
    property M_clientDependency: TBoldObjectReference read _Get_M_clientDependency;
    property M_client: TBoldObjectReference read _Get_M_client;
    property clientDependency: TUMLDependency read _GetclientDependency;
    property client: TUMLModelElement read _Getclient;
  end;

  TcollaborationconstrainingElement = class(TUMLModelRoot)
  private
    function _GetconstrainingElement: TUMLModelElement;
    function _Get_M_constrainingElement: TBoldObjectReference;
    function _Getcollaboration: TUMLCollaboration;
    function _Get_M_collaboration: TBoldObjectReference;
  protected
  public
    property M_constrainingElement: TBoldObjectReference read _Get_M_constrainingElement;
    property M_collaboration: TBoldObjectReference read _Get_M_collaboration;
    property constrainingElement: TUMLModelElement read _GetconstrainingElement;
    property collaboration: TUMLCollaboration read _Getcollaboration;
  end;

  TcommentannotatedElement = class(TUMLModelRoot)
  private
    function _GetannotatedElement: TUMLModelElement;
    function _Get_M_annotatedElement: TBoldObjectReference;
    function _Getcomment: TUMLComment;
    function _Get_M_comment: TBoldObjectReference;
  protected
  public
    property M_annotatedElement: TBoldObjectReference read _Get_M_annotatedElement;
    property M_comment: TBoldObjectReference read _Get_M_comment;
    property annotatedElement: TUMLModelElement read _GetannotatedElement;
    property comment: TUMLComment read _Getcomment;
  end;

  TconstrainedElementconstraint = class(TUMLModelRoot)
  private
    function _Getconstraint: TUMLConstraint;
    function _Get_M_constraint: TBoldObjectReference;
    function _GetconstrainedElement: TUMLModelElement;
    function _Get_M_constrainedElement: TBoldObjectReference;
  protected
  public
    property M_constraint: TBoldObjectReference read _Get_M_constraint;
    property M_constrainedElement: TBoldObjectReference read _Get_M_constrainedElement;
    property constraint: TUMLConstraint read _Getconstraint;
    property constrainedElement: TUMLModelElement read _GetconstrainedElement;
  end;

  Tcontentspartition = class(TUMLModelRoot)
  private
    function _Getpartition: TUMLPartition;
    function _Get_M_partition: TBoldObjectReference;
    function _Getcontents: TUMLModelElement;
    function _Get_M_contents: TBoldObjectReference;
  protected
  public
    property M_partition: TBoldObjectReference read _Get_M_partition;
    property M_contents: TBoldObjectReference read _Get_M_contents;
    property partition: TUMLPartition read _Getpartition;
    property contents: TUMLModelElement read _Getcontents;
  end;

  TcontextraisedSignal = class(TUMLModelRoot)
  private
    function _GetraisedSignal: TUMLSignal;
    function _Get_M_raisedSignal: TBoldObjectReference;
    function _Getcontext: TUMLBehavioralFeature;
    function _Get_M_context: TBoldObjectReference;
  protected
  public
    property M_raisedSignal: TBoldObjectReference read _Get_M_raisedSignal;
    property M_context: TBoldObjectReference read _Get_M_context;
    property raisedSignal: TUMLSignal read _GetraisedSignal;
    property context: TUMLBehavioralFeature read _Getcontext;
  end;

  TdeploymentLocationresident = class(TUMLModelRoot)
  private
    function _Getresident: TUMLComponent;
    function _Get_M_resident: TBoldObjectReference;
    function _GetdeploymentLocation: TUMLNode;
    function _Get_M_deploymentLocation: TBoldObjectReference;
  protected
  public
    property M_resident: TBoldObjectReference read _Get_M_resident;
    property M_deploymentLocation: TBoldObjectReference read _Get_M_deploymentLocation;
    property resident: TUMLComponent read _Getresident;
    property deploymentLocation: TUMLNode read _GetdeploymentLocation;
  end;

  TextensionPointextend = class(TUMLModelRoot)
  private
    function _Getextend: TUMLExtend;
    function _Get_M_extend: TBoldObjectReference;
    function _GetextensionPoint: TUMLExtensionPoint;
    function _Get_M_extensionPoint: TBoldObjectReference;
  protected
  public
    property M_extend: TBoldObjectReference read _Get_M_extend;
    property M_extensionPoint: TBoldObjectReference read _Get_M_extensionPoint;
    property extend: TUMLExtend read _Getextend;
    property extensionPoint: TUMLExtensionPoint read _GetextensionPoint;
  end;

  Tinstanceclassifier = class(TUMLModelRoot)
  private
    function _Getclassifier: TUMLClassifier;
    function _Get_M_classifier: TBoldObjectReference;
    function _Getinstance: TUMLInstance;
    function _Get_M_instance: TBoldObjectReference;
  protected
  public
    property M_classifier: TBoldObjectReference read _Get_M_classifier;
    property M_instance: TBoldObjectReference read _Get_M_instance;
    property classifier: TUMLClassifier read _Getclassifier;
    property instance: TUMLInstance read _Getinstance;
  end;

  Tparameterstate = class(TUMLModelRoot)
  private
    function _Getstate: TUMLObjectFlowState;
    function _Get_M_state: TBoldObjectReference;
    function _Getparameter: TUMLParameter;
    function _Get_M_parameter: TBoldObjectReference;
  protected
  public
    property M_state: TBoldObjectReference read _Get_M_state;
    property M_parameter: TBoldObjectReference read _Get_M_parameter;
    property state: TUMLObjectFlowState read _Getstate;
    property parameter: TUMLParameter read _Getparameter;
  end;

  Tparticipantspecification = class(TUMLModelRoot)
  private
    function _Getspecification: TUMLClassifier;
    function _Get_M_specification: TBoldObjectReference;
    function _Getparticipant: TUMLAssociationEnd;
    function _Get_M_participant: TBoldObjectReference;
  protected
  public
    property M_specification: TBoldObjectReference read _Get_M_specification;
    property M_participant: TBoldObjectReference read _Get_M_participant;
    property specification: TUMLClassifier read _Getspecification;
    property participant: TUMLAssociationEnd read _Getparticipant;
  end;

  Tpredecessormessage3 = class(TUMLModelRoot)
  private
    function _Getmessage3: TUMLMessage;
    function _Get_M_message3: TBoldObjectReference;
    function _Getpredecessor: TUMLMessage;
    function _Get_M_predecessor: TBoldObjectReference;
  protected
  public
    property M_message3: TBoldObjectReference read _Get_M_message3;
    property M_predecessor: TBoldObjectReference read _Get_M_predecessor;
    property message3: TUMLMessage read _Getmessage3;
    property predecessor: TUMLMessage read _Getpredecessor;
  end;

  Tpresentationsubject = class(TUMLModelRoot)
  private
    function _Getsubject: TUMLModelElement;
    function _Get_M_subject: TBoldObjectReference;
    function _Getpresentation: TUMLPresentationElement;
    function _Get_M_presentation: TBoldObjectReference;
  protected
  public
    property M_subject: TBoldObjectReference read _Get_M_subject;
    property M_presentation: TBoldObjectReference read _Get_M_presentation;
    property subject: TUMLModelElement read _Getsubject;
    property presentation: TUMLPresentationElement read _Getpresentation;
  end;

  TsourceFlowsource = class(TUMLModelRoot)
  private
    function _Getsource: TUMLModelElement;
    function _Get_M_source: TBoldObjectReference;
    function _GetsourceFlow: TUMLFlow;
    function _Get_M_sourceFlow: TBoldObjectReference;
  protected
  public
    property M_source: TBoldObjectReference read _Get_M_source;
    property M_sourceFlow: TBoldObjectReference read _Get_M_sourceFlow;
    property source: TUMLModelElement read _Getsource;
    property sourceFlow: TUMLFlow read _GetsourceFlow;
  end;

  TstatedeferrableEvent = class(TUMLModelRoot)
  private
    function _GetdeferrableEvent: TUMLEvent;
    function _Get_M_deferrableEvent: TBoldObjectReference;
    function _Getstate: TUMLState;
    function _Get_M_state: TBoldObjectReference;
  protected
  public
    property M_deferrableEvent: TBoldObjectReference read _Get_M_deferrableEvent;
    property M_state: TBoldObjectReference read _Get_M_state;
    property deferrableEvent: TUMLEvent read _GetdeferrableEvent;
    property state: TUMLState read _Getstate;
  end;

  TsuppliersupplierDependency = class(TUMLModelRoot)
  private
    function _GetsupplierDependency: TUMLDependency;
    function _Get_M_supplierDependency: TBoldObjectReference;
    function _Getsupplier: TUMLModelElement;
    function _Get_M_supplier: TBoldObjectReference;
  protected
  public
    property M_supplierDependency: TBoldObjectReference read _Get_M_supplierDependency;
    property M_supplier: TBoldObjectReference read _Get_M_supplier;
    property supplierDependency: TUMLDependency read _GetsupplierDependency;
    property supplier: TUMLModelElement read _Getsupplier;
  end;

  TtargetFlowtarget = class(TUMLModelRoot)
  private
    function _Gettarget: TUMLModelElement;
    function _Get_M_target: TBoldObjectReference;
    function _GettargetFlow: TUMLFlow;
    function _Get_M_targetFlow: TBoldObjectReference;
  protected
  public
    property M_target: TBoldObjectReference read _Get_M_target;
    property M_targetFlow: TBoldObjectReference read _Get_M_targetFlow;
    property target: TUMLModelElement read _Gettarget;
    property targetFlow: TUMLFlow read _GettargetFlow;
  end;

  TUMLModelElement = class(TUMLElement)
  private
    function _Get_M_name: TBAString;
    function _Getname: String;
    procedure _Setname(const NewValue: String);
    function _Get_M_visibility: TBAVisibilityKind;
    function _Getvisibility: TVisibilityKind;
    procedure _Setvisibility(const NewValue: TVisibilityKind);
    function _Get_M_isSpecification: TBABoolean;
    function _GetisSpecification: boolean;
    procedure _SetisSpecification(const NewValue: boolean);
    function _Get_M_qualifiedName: TBAString;
    function _GetqualifiedName: String;
    function _Get_M_stereotypeName: TBAString;
    function _GetstereotypeName: String;
    procedure _SetstereotypeName(const NewValue: String);
    function _Get_M_documentation: TBAString;
    function _Getdocumentation: String;
    function _Get_M_derived: TBABoolean;
    function _Getderived: boolean;
    procedure _Setderived(const NewValue: boolean);
    function _Getbehavior: TUMLStateMachineList;
    function _Getcollaboration: TUMLCollaborationList;
    function _GetcollaborationcollaborationconstrainingElement: TcollaborationconstrainingElementList;
    function _GetclassifierRole: TUMLClassifierRoleList;
    function _GetclassifierRoleclassifierRoleavailableContents: TclassifierRoleavailableContentsList;
    function _Getpartition: TUMLPartitionList;
    function _Getpartitioncontentspartition: TcontentspartitionList;
    function _Getpresentation: TUMLPresentationElementList;
    function _Getpresentationsubject: TpresentationsubjectList;
    function _GetsourceFlow: TUMLFlowList;
    function _GetsourceFlowsourceFlowsource: TsourceFlowsourceList;
    function _GettargetFlow: TUMLFlowList;
    function _GettargetFlowtargetFlowtarget: TtargetFlowtargetList;
    function _Getbinding: TUMLBinding;
    function _Get_M_binding: TBoldObjectReference;
    procedure _Setbinding(const value: TUMLBinding);
    function _GetsupplierDependency: TUMLDependencyList;
    function _GetsupplierDependencysuppliersupplierDependency: TsuppliersupplierDependencyList;
    function _Getconstraint: TUMLConstraintList;
    function _GetconstraintconstrainedElementconstraint: TconstrainedElementconstraintList;
    function _GetclientDependency: TUMLDependencyList;
    function _GetclientDependencyclientclientDependency: TclientclientDependencyList;
    function _GettemplateParameter2: TUMLTemplateParameterList;
    function _GettemplateParameter: TUMLTemplateParameterList;
    function _GetelementResidence: TUMLElementResidenceList;
    function _Getcomment: TUMLCommentList;
    function _GetcommentcommentannotatedElement: TcommentannotatedElementList;
    function _Getnamespace_: TUMLNamespace;
    function _Get_M_namespace_: TBoldObjectReference;
    procedure _Setnamespace_(const value: TUMLNamespace);
    function _GettaggedValue: TUMLTaggedValueList;
    function _Get_Q_taggedValue(tag: String): TUMLTaggedValue;
    function _Getstereotype: TUMLStereotype;
    function _Get_M_stereotype: TBoldObjectReference;
    procedure _Setstereotype(const value: TUMLStereotype);
    function _Getmodel: TUMLModel;
    function _Get_M_model: TBoldObjectReference;
    procedure _Setmodel(const value: TUMLModel);
    function _GetqualifyingOwner: TUMLModelElement;
    function _Get_M_qualifyingOwner: TBoldObjectReference;
    procedure _SetqualifyingOwner(const value: TUMLModelElement);
    function _GetelementImport: TUMLElementImportList;
    function FindTaggedValue(TagName: String): TUMLTaggedValue;
  protected
    procedure _stereotypeName_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    procedure _stereotypeName_ReverseDerive(DerivedObject: TObject); virtual;
    procedure _documentation_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    procedure _derived_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    procedure _derived_ReverseDerive(DerivedObject: TObject); virtual;
    function GetDeriveMethodForMember(MemberIndex: Integer): TBoldDeriveAndResubscribe; override;
    function GetReverseDeriveMethodForMember(MemberIndex: Integer): TBoldReverseDerive; override;
  public
    function ExpandedExpressionName: String; virtual;
    function GetTaggedValue(TagName: String): String;
    procedure SetTaggedValue(TagName: String; Value: String);
    procedure DeleteTaggedValue(TagName: String);
    procedure EnsureTaggedValue(TagName: String; DefaultValue: String);
    function GetBoldTV(const TagName: String): String;
    procedure SetBoldTV(const TagName: String; const Value: String);
    property M_name: TBAString read _Get_M_name;
    property M_visibility: TBAVisibilityKind read _Get_M_visibility;
    property M_isSpecification: TBABoolean read _Get_M_isSpecification;
    property M_qualifiedName: TBAString read _Get_M_qualifiedName;
    property M_stereotypeName: TBAString read _Get_M_stereotypeName;
    property M_documentation: TBAString read _Get_M_documentation;
    property M_derived: TBABoolean read _Get_M_derived;
    property M_behavior: TUMLStateMachineList read _Getbehavior;
    property M_collaboration: TUMLCollaborationList read _Getcollaboration;
    property M_collaborationcollaborationconstrainingElement: TcollaborationconstrainingElementList read _GetcollaborationcollaborationconstrainingElement;
    property M_classifierRole: TUMLClassifierRoleList read _GetclassifierRole;
    property M_classifierRoleclassifierRoleavailableContents: TclassifierRoleavailableContentsList read _GetclassifierRoleclassifierRoleavailableContents;
    property M_partition: TUMLPartitionList read _Getpartition;
    property M_partitioncontentspartition: TcontentspartitionList read _Getpartitioncontentspartition;
    property M_presentation: TUMLPresentationElementList read _Getpresentation;
    property M_presentationsubject: TpresentationsubjectList read _Getpresentationsubject;
    property M_sourceFlow: TUMLFlowList read _GetsourceFlow;
    property M_sourceFlowsourceFlowsource: TsourceFlowsourceList read _GetsourceFlowsourceFlowsource;
    property M_targetFlow: TUMLFlowList read _GettargetFlow;
    property M_targetFlowtargetFlowtarget: TtargetFlowtargetList read _GettargetFlowtargetFlowtarget;
    property M_binding: TBoldObjectReference read _Get_M_binding;
    property M_supplierDependency: TUMLDependencyList read _GetsupplierDependency;
    property M_supplierDependencysuppliersupplierDependency: TsuppliersupplierDependencyList read _GetsupplierDependencysuppliersupplierDependency;
    property M_constraint: TUMLConstraintList read _Getconstraint;
    property M_constraintconstrainedElementconstraint: TconstrainedElementconstraintList read _GetconstraintconstrainedElementconstraint;
    property M_clientDependency: TUMLDependencyList read _GetclientDependency;
    property M_clientDependencyclientclientDependency: TclientclientDependencyList read _GetclientDependencyclientclientDependency;
    property M_templateParameter2: TUMLTemplateParameterList read _GettemplateParameter2;
    property M_templateParameter: TUMLTemplateParameterList read _GettemplateParameter;
    property M_elementResidence: TUMLElementResidenceList read _GetelementResidence;
    property M_comment: TUMLCommentList read _Getcomment;
    property M_commentcommentannotatedElement: TcommentannotatedElementList read _GetcommentcommentannotatedElement;
    property M_namespace_: TBoldObjectReference read _Get_M_namespace_;
    property M_taggedValue: TUMLTaggedValueList read _GettaggedValue;
    property M_stereotype: TBoldObjectReference read _Get_M_stereotype;
    property M_model: TBoldObjectReference read _Get_M_model;
    property M_qualifyingOwner: TBoldObjectReference read _Get_M_qualifyingOwner;
    property M_elementImport: TUMLElementImportList read _GetelementImport;
    property name: String read _Getname write _Setname;
    property visibility: TVisibilityKind read _Getvisibility write _Setvisibility;
    property isSpecification: boolean read _GetisSpecification write _SetisSpecification;
    property qualifiedName: String read _GetqualifiedName;
    property stereotypeName: String read _GetstereotypeName write _SetstereotypeName;
    property documentation: String read _Getdocumentation;
    property derived: boolean read _Getderived write _Setderived;
    property behavior: TUMLStateMachineList read _Getbehavior;
    property collaboration: TUMLCollaborationList read _Getcollaboration;
    property collaborationcollaborationconstrainingElement: TcollaborationconstrainingElementList read _GetcollaborationcollaborationconstrainingElement;
    property classifierRole: TUMLClassifierRoleList read _GetclassifierRole;
    property classifierRoleclassifierRoleavailableContents: TclassifierRoleavailableContentsList read _GetclassifierRoleclassifierRoleavailableContents;
    property partition: TUMLPartitionList read _Getpartition;
    property partitioncontentspartition: TcontentspartitionList read _Getpartitioncontentspartition;
    property presentation: TUMLPresentationElementList read _Getpresentation;
    property presentationsubject: TpresentationsubjectList read _Getpresentationsubject;
    property sourceFlow: TUMLFlowList read _GetsourceFlow;
    property sourceFlowsourceFlowsource: TsourceFlowsourceList read _GetsourceFlowsourceFlowsource;
    property targetFlow: TUMLFlowList read _GettargetFlow;
    property targetFlowtargetFlowtarget: TtargetFlowtargetList read _GettargetFlowtargetFlowtarget;
    property binding: TUMLBinding read _Getbinding write _Setbinding;
    property supplierDependency: TUMLDependencyList read _GetsupplierDependency;
    property supplierDependencysuppliersupplierDependency: TsuppliersupplierDependencyList read _GetsupplierDependencysuppliersupplierDependency;
    property constraint: TUMLConstraintList read _Getconstraint;
    property constraintconstrainedElementconstraint: TconstrainedElementconstraintList read _GetconstraintconstrainedElementconstraint;
    property clientDependency: TUMLDependencyList read _GetclientDependency;
    property clientDependencyclientclientDependency: TclientclientDependencyList read _GetclientDependencyclientclientDependency;
    property templateParameter2: TUMLTemplateParameterList read _GettemplateParameter2;
    property templateParameter: TUMLTemplateParameterList read _GettemplateParameter;
    property elementResidence: TUMLElementResidenceList read _GetelementResidence;
    property comment: TUMLCommentList read _Getcomment;
    property commentcommentannotatedElement: TcommentannotatedElementList read _GetcommentcommentannotatedElement;
    property namespace_: TUMLNamespace read _Getnamespace_ write _Setnamespace_;
    property taggedValue[tag: String]: TUMLTaggedValue read _Get_Q_taggedValue;
    property stereotype: TUMLStereotype read _Getstereotype write _Setstereotype;
    property model: TUMLModel read _Getmodel write _Setmodel;
    property qualifyingOwner: TUMLModelElement read _GetqualifyingOwner write _SetqualifyingOwner;
    property elementImport: TUMLElementImportList read _GetelementImport;
  end;

  TUMLAction = class(TUMLModelElement)
  private
    function _Get_M_recurrence: TBAString;
    function _Getrecurrence: String;
    procedure _Setrecurrence(const NewValue: String);
    function _Get_M_target: TBAString;
    function _Gettarget: String;
    procedure _Settarget(const NewValue: String);
    function _Get_M_isAsynchronous: TBABoolean;
    function _GetisAsynchronous: boolean;
    procedure _SetisAsynchronous(const NewValue: boolean);
    function _Get_M_script: TBAString;
    function _Getscript: String;
    procedure _Setscript(const NewValue: String);
    function _Gettransition: TUMLTransition;
    function _Get_M_transition: TBoldObjectReference;
    procedure _Settransition(const value: TUMLTransition);
    function _GetactualArgument: TUMLArgumentList;
    function _Getstimulus: TUMLStimulusList;
    function _GetactionSequence: TUMLActionSequence;
    function _Get_M_actionSequence: TBoldObjectReference;
    procedure _SetactionSequence(const value: TUMLActionSequence);
    function _Getmessage_: TUMLMessageList;
  protected
  public
    property M_recurrence: TBAString read _Get_M_recurrence;
    property M_target: TBAString read _Get_M_target;
    property M_isAsynchronous: TBABoolean read _Get_M_isAsynchronous;
    property M_script: TBAString read _Get_M_script;
    property M_transition: TBoldObjectReference read _Get_M_transition;
    property M_actualArgument: TUMLArgumentList read _GetactualArgument;
    property M_stimulus: TUMLStimulusList read _Getstimulus;
    property M_actionSequence: TBoldObjectReference read _Get_M_actionSequence;
    property M_message_: TUMLMessageList read _Getmessage_;
    property recurrence: String read _Getrecurrence write _Setrecurrence;
    property target: String read _Gettarget write _Settarget;
    property isAsynchronous: boolean read _GetisAsynchronous write _SetisAsynchronous;
    property script: String read _Getscript write _Setscript;
    property transition: TUMLTransition read _Gettransition write _Settransition;
    property actualArgument: TUMLArgumentList read _GetactualArgument;
    property stimulus: TUMLStimulusList read _Getstimulus;
    property actionSequence: TUMLActionSequence read _GetactionSequence write _SetactionSequence;
    property message_: TUMLMessageList read _Getmessage_;
  end;

  TUMLArgument = class(TUMLModelElement)
  private
    function _Get_M_value: TBAString;
    function _Getvalue: String;
    procedure _Setvalue(const NewValue: String);
    function _Getaction: TUMLAction;
    function _Get_M_action: TBoldObjectReference;
    procedure _Setaction(const value: TUMLAction);
  protected
  public
    property M_value: TBAString read _Get_M_value;
    property M_action: TBoldObjectReference read _Get_M_action;
    property value: String read _Getvalue write _Setvalue;
    property action: TUMLAction read _Getaction write _Setaction;
  end;

  TUMLAssociationEnd = class(TUMLModelElement)
  private
    function _Get_M_isNavigable: TBABoolean;
    function _GetisNavigable: boolean;
    procedure _SetisNavigable(const NewValue: boolean);
    function _Get_M_ordering: TBAOrderingKind;
    function _Getordering: TOrderingKind;
    procedure _Setordering(const NewValue: TOrderingKind);
    function _Get_M_aggregation: TBAAggregationKind;
    function _Getaggregation: TAggregationKind;
    procedure _Setaggregation(const NewValue: TAggregationKind);
    function _Get_M_targetScope: TBAScopeKind;
    function _GettargetScope: TScopeKind;
    procedure _SettargetScope(const NewValue: TScopeKind);
    function _Get_M_multiplicity: TBAString;
    function _Getmultiplicity: String;
    procedure _Setmultiplicity(const NewValue: String);
    function _Get_M_changeability: TBAChangeableKind;
    function _Getchangeability: TChangeableKind;
    procedure _Setchangeability(const NewValue: TChangeableKind);
    function _Get_M_multi: TBABoolean;
    function _Getmulti: boolean;
    function _Get_M_mandatory: TBABoolean;
    function _Getmandatory: boolean;
    function _Get_M_isOrdered: TBABoolean;
    function _GetisOrdered: boolean;
    procedure _SetisOrdered(const NewValue: boolean);
    function _GetlinkEnd: TUMLLinkEndList;
    function _GetassociationEndRole: TUMLAssociationEndRoleList;
    function _Getqualifier: TUMLAttributeList;
    function _Getspecification: TUMLClassifierList;
    function _Getparticipantspecification: TparticipantspecificationList;
    function _Gettype_: TUMLClassifier;
    function _Get_M_type_: TBoldObjectReference;
    procedure _Settype_(const value: TUMLClassifier);
    function _GetotherEnd: TUMLAssociationEnd;
    function _Get_M_otherEnd: TBoldObjectReference;
    procedure _SetotherEnd(const value: TUMLAssociationEnd);
    function _Getassociation: TUMLAssociation;
    function _Get_M_association: TBoldObjectReference;
    procedure _Setassociation(const value: TUMLAssociation);
  protected
    procedure _multi_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    procedure _mandatory_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    procedure _isOrdered_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    procedure _isOrdered_ReverseDerive(DerivedObject: TObject); virtual;
    function GetDeriveMethodForMember(MemberIndex: Integer): TBoldDeriveAndResubscribe; override;
    function GetReverseDeriveMethodForMember(MemberIndex: Integer): TBoldReverseDerive; override;
  public
    function GetOtherEnd: TUMLAssociationEnd;
    function GetQualifierByName(InName: String): TUMLAttribute;
    function ExpandedExpressionName: String; override;
    property M_isNavigable: TBABoolean read _Get_M_isNavigable;
    property M_ordering: TBAOrderingKind read _Get_M_ordering;
    property M_aggregation: TBAAggregationKind read _Get_M_aggregation;
    property M_targetScope: TBAScopeKind read _Get_M_targetScope;
    property M_multiplicity: TBAString read _Get_M_multiplicity;
    property M_changeability: TBAChangeableKind read _Get_M_changeability;
    property M_multi: TBABoolean read _Get_M_multi;
    property M_mandatory: TBABoolean read _Get_M_mandatory;
    property M_isOrdered: TBABoolean read _Get_M_isOrdered;
    property M_linkEnd: TUMLLinkEndList read _GetlinkEnd;
    property M_associationEndRole: TUMLAssociationEndRoleList read _GetassociationEndRole;
    property M_qualifier: TUMLAttributeList read _Getqualifier;
    property M_specification: TUMLClassifierList read _Getspecification;
    property M_participantspecification: TparticipantspecificationList read _Getparticipantspecification;
    property M_type_: TBoldObjectReference read _Get_M_type_;
    property M_otherEnd: TBoldObjectReference read _Get_M_otherEnd;
    property M_association: TBoldObjectReference read _Get_M_association;
    property isNavigable: boolean read _GetisNavigable write _SetisNavigable;
    property ordering: TOrderingKind read _Getordering write _Setordering;
    property aggregation: TAggregationKind read _Getaggregation write _Setaggregation;
    property targetScope: TScopeKind read _GettargetScope write _SettargetScope;
    property multiplicity: String read _Getmultiplicity write _Setmultiplicity;
    property changeability: TChangeableKind read _Getchangeability write _Setchangeability;
    property multi: boolean read _Getmulti;
    property mandatory: boolean read _Getmandatory;
    property isOrdered: boolean read _GetisOrdered write _SetisOrdered;
    property linkEnd: TUMLLinkEndList read _GetlinkEnd;
    property associationEndRole: TUMLAssociationEndRoleList read _GetassociationEndRole;
    property qualifier: TUMLAttributeList read _Getqualifier;
    property specification: TUMLClassifierList read _Getspecification;
    property participantspecification: TparticipantspecificationList read _Getparticipantspecification;
    property type_: TUMLClassifier read _Gettype_ write _Settype_;
    property otherEnd: TUMLAssociationEnd read _GetotherEnd write _SetotherEnd;
    property association: TUMLAssociation read _Getassociation write _Setassociation;
  end;

  TUMLAttributeLink = class(TUMLModelElement)
  private
    function _Getvalue: TUMLInstance;
    function _Get_M_value: TBoldObjectReference;
    procedure _Setvalue(const value: TUMLInstance);
    function _Getattribute: TUMLAttribute;
    function _Get_M_attribute: TBoldObjectReference;
    procedure _Setattribute(const value: TUMLAttribute);
    function _Getinstance: TUMLInstance;
    function _Get_M_instance: TBoldObjectReference;
    procedure _Setinstance(const value: TUMLInstance);
    function _GetlinkEnd: TUMLLinkEnd;
    function _Get_M_linkEnd: TBoldObjectReference;
    procedure _SetlinkEnd(const value: TUMLLinkEnd);
  protected
  public
    property M_value: TBoldObjectReference read _Get_M_value;
    property M_attribute: TBoldObjectReference read _Get_M_attribute;
    property M_instance: TBoldObjectReference read _Get_M_instance;
    property M_linkEnd: TBoldObjectReference read _Get_M_linkEnd;
    property value: TUMLInstance read _Getvalue write _Setvalue;
    property attribute: TUMLAttribute read _Getattribute write _Setattribute;
    property instance: TUMLInstance read _Getinstance write _Setinstance;
    property linkEnd: TUMLLinkEnd read _GetlinkEnd write _SetlinkEnd;
  end;

  TUMLComment = class(TUMLModelElement)
  private
    function _GetannotatedElement: TUMLModelElementList;
    function _GetannotatedElementcommentannotatedElement: TcommentannotatedElementList;
  protected
  public
    property M_annotatedElement: TUMLModelElementList read _GetannotatedElement;
    property M_annotatedElementcommentannotatedElement: TcommentannotatedElementList read _GetannotatedElementcommentannotatedElement;
    property annotatedElement: TUMLModelElementList read _GetannotatedElement;
    property annotatedElementcommentannotatedElement: TcommentannotatedElementList read _GetannotatedElementcommentannotatedElement;
  end;

  TUMLConstraint = class(TUMLModelElement)
  private
    function _Get_M_body: TBAString;
    function _Getbody: String;
    procedure _Setbody(const NewValue: String);
    function _GetconstrainedElement: TUMLModelElementList;
    function _GetconstrainedElementconstrainedElementconstraint: TconstrainedElementconstraintList;
    function _GetconstrainedElement2: TUMLStereotype;
    function _Get_M_constrainedElement2: TBoldObjectReference;
    procedure _SetconstrainedElement2(const value: TUMLStereotype);
  protected
  public
    property M_body: TBAString read _Get_M_body;
    property M_constrainedElement: TUMLModelElementList read _GetconstrainedElement;
    property M_constrainedElementconstrainedElementconstraint: TconstrainedElementconstraintList read _GetconstrainedElementconstrainedElementconstraint;
    property M_constrainedElement2: TBoldObjectReference read _Get_M_constrainedElement2;
    property body: String read _Getbody write _Setbody;
    property constrainedElement: TUMLModelElementList read _GetconstrainedElement;
    property constrainedElementconstrainedElementconstraint: TconstrainedElementconstraintList read _GetconstrainedElementconstrainedElementconstraint;
    property constrainedElement2: TUMLStereotype read _GetconstrainedElement2 write _SetconstrainedElement2;
  end;

  TUMLEvent = class(TUMLModelElement)
  private
    function _Gettransition: TUMLTransitionList;
    function _Getparameter: TUMLParameterList;
    function _Getstate: TUMLStateList;
    function _GetstatedeferrableEvent: TstatedeferrableEventList;
  protected
  public
    property M_transition: TUMLTransitionList read _Gettransition;
    property M_parameter: TUMLParameterList read _Getparameter;
    property M_state: TUMLStateList read _Getstate;
    property M_statedeferrableEvent: TstatedeferrableEventList read _GetstatedeferrableEvent;
    property transition: TUMLTransitionList read _Gettransition;
    property parameter: TUMLParameterList read _Getparameter;
    property state: TUMLStateList read _Getstate;
    property statedeferrableEvent: TstatedeferrableEventList read _GetstatedeferrableEvent;
  end;

  TUMLExtensionPoint = class(TUMLModelElement)
  private
    function _Get_M_location: TBAString;
    function _Getlocation: String;
    procedure _Setlocation(const NewValue: String);
    function _GetuseCase: TUMLUseCase;
    function _Get_M_useCase: TBoldObjectReference;
    procedure _SetuseCase(const value: TUMLUseCase);
    function _Getextend: TUMLExtendList;
    function _GetextensionPointextend: TextensionPointextendList;
  protected
  public
    property M_location: TBAString read _Get_M_location;
    property M_useCase: TBoldObjectReference read _Get_M_useCase;
    property M_extend: TUMLExtendList read _Getextend;
    property M_extensionPointextend: TextensionPointextendList read _GetextensionPointextend;
    property location: String read _Getlocation write _Setlocation;
    property useCase: TUMLUseCase read _GetuseCase write _SetuseCase;
    property extend: TUMLExtendList read _Getextend;
    property extensionPointextend: TextensionPointextendList read _GetextensionPointextend;
  end;

  TUMLFeature = class(TUMLModelElement)
  private
    function _Get_M_ownerScope: TBAScopeKind;
    function _GetownerScope: TScopeKind;
    procedure _SetownerScope(const NewValue: TScopeKind);
    function _GetclassifierRole_: TUMLClassifierRoleList;
    function _GetclassifierRole_availableFeature: TclassifierRole_availableFeatureList;
    function _Getowner: TUMLClassifier;
    function _Get_M_owner: TBoldObjectReference;
    procedure _Setowner(const value: TUMLClassifier);
  protected
  public
    function ExpandedExpressionName: String; override;
    property M_ownerScope: TBAScopeKind read _Get_M_ownerScope;
    property M_classifierRole_: TUMLClassifierRoleList read _GetclassifierRole_;
    property M_classifierRole_availableFeature: TclassifierRole_availableFeatureList read _GetclassifierRole_availableFeature;
    property M_owner: TBoldObjectReference read _Get_M_owner;
    property ownerScope: TScopeKind read _GetownerScope write _SetownerScope;
    property classifierRole_: TUMLClassifierRoleList read _GetclassifierRole_;
    property classifierRole_availableFeature: TclassifierRole_availableFeatureList read _GetclassifierRole_availableFeature;
    property owner: TUMLClassifier read _Getowner write _Setowner;
  end;

  TUMLGuard = class(TUMLModelElement)
  private
    function _Get_M_expression: TBAString;
    function _Getexpression: String;
    procedure _Setexpression(const NewValue: String);
    function _Gettransition: TUMLTransition;
    function _Get_M_transition: TBoldObjectReference;
    procedure _Settransition(const value: TUMLTransition);
  protected
  public
    property M_expression: TBAString read _Get_M_expression;
    property M_transition: TBoldObjectReference read _Get_M_transition;
    property expression: String read _Getexpression write _Setexpression;
    property transition: TUMLTransition read _Gettransition write _Settransition;
  end;

  TUMLInstance = class(TUMLModelElement)
  private
    function _GetattributeLink: TUMLAttributeLinkList;
    function _Getslot: TUMLAttributeLinkList;
    function _Getstimulus1: TUMLStimulusList;
    function _Getargumentstimulus1: Targumentstimulus1List;
    function _Getstimulus2: TUMLStimulusList;
    function _GetlinkEnd: TUMLLinkEndList;
    function _Getclassifier: TUMLClassifierList;
    function _Getinstanceclassifier: TinstanceclassifierList;
    function _Getstimulus3: TUMLStimulusList;
    function _GetcomponentInstance: TUMLComponentInstance;
    function _Get_M_componentInstance: TBoldObjectReference;
    procedure _SetcomponentInstance(const value: TUMLComponentInstance);
  protected
  public
    property M_attributeLink: TUMLAttributeLinkList read _GetattributeLink;
    property M_slot: TUMLAttributeLinkList read _Getslot;
    property M_stimulus1: TUMLStimulusList read _Getstimulus1;
    property M_argumentstimulus1: Targumentstimulus1List read _Getargumentstimulus1;
    property M_stimulus2: TUMLStimulusList read _Getstimulus2;
    property M_linkEnd: TUMLLinkEndList read _GetlinkEnd;
    property M_classifier: TUMLClassifierList read _Getclassifier;
    property M_instanceclassifier: TinstanceclassifierList read _Getinstanceclassifier;
    property M_stimulus3: TUMLStimulusList read _Getstimulus3;
    property M_componentInstance: TBoldObjectReference read _Get_M_componentInstance;
    property attributeLink: TUMLAttributeLinkList read _GetattributeLink;
    property slot: TUMLAttributeLinkList read _Getslot;
    property stimulus1: TUMLStimulusList read _Getstimulus1;
    property argumentstimulus1: Targumentstimulus1List read _Getargumentstimulus1;
    property stimulus2: TUMLStimulusList read _Getstimulus2;
    property linkEnd: TUMLLinkEndList read _GetlinkEnd;
    property classifier: TUMLClassifierList read _Getclassifier;
    property instanceclassifier: TinstanceclassifierList read _Getinstanceclassifier;
    property stimulus3: TUMLStimulusList read _Getstimulus3;
    property componentInstance: TUMLComponentInstance read _GetcomponentInstance write _SetcomponentInstance;
  end;

  TUMLInteraction = class(TUMLModelElement)
  private
    function _Getcontext: TUMLCollaboration;
    function _Get_M_context: TBoldObjectReference;
    procedure _Setcontext(const value: TUMLCollaboration);
    function _Getmessage_: TUMLMessageList;
  protected
  public
    property M_context: TBoldObjectReference read _Get_M_context;
    property M_message_: TUMLMessageList read _Getmessage_;
    property context: TUMLCollaboration read _Getcontext write _Setcontext;
    property message_: TUMLMessageList read _Getmessage_;
  end;

  TUMLLink = class(TUMLModelElement)
  private
    function _Getassociation: TUMLAssociation;
    function _Get_M_association: TBoldObjectReference;
    procedure _Setassociation(const value: TUMLAssociation);
    function _GetStimulus: TUMLStimulusList;
    function _Getxobject: TUMLObject;
    function _Get_M_xobject: TBoldObjectReference;
    procedure _Setxobject(const value: TUMLObject);
    function _Getconnection: TUMLLinkEndList;
  protected
  public
    property M_association: TBoldObjectReference read _Get_M_association;
    property M_Stimulus: TUMLStimulusList read _GetStimulus;
    property M_xobject: TBoldObjectReference read _Get_M_xobject;
    property M_connection: TUMLLinkEndList read _Getconnection;
    property association: TUMLAssociation read _Getassociation write _Setassociation;
    property Stimulus: TUMLStimulusList read _GetStimulus;
    property xobject: TUMLObject read _Getxobject write _Setxobject;
    property connection: TUMLLinkEndList read _Getconnection;
  end;

  TUMLLinkEnd = class(TUMLModelElement)
  private
    function _GetqualifiedValue: TUMLAttributeLinkList;
    function _Getinstance: TUMLInstance;
    function _Get_M_instance: TBoldObjectReference;
    procedure _Setinstance(const value: TUMLInstance);
    function _GetassociationEnd: TUMLAssociationEnd;
    function _Get_M_associationEnd: TBoldObjectReference;
    procedure _SetassociationEnd(const value: TUMLAssociationEnd);
    function _Getlink: TUMLLink;
    function _Get_M_link: TBoldObjectReference;
    procedure _Setlink(const value: TUMLLink);
  protected
  public
    property M_qualifiedValue: TUMLAttributeLinkList read _GetqualifiedValue;
    property M_instance: TBoldObjectReference read _Get_M_instance;
    property M_associationEnd: TBoldObjectReference read _Get_M_associationEnd;
    property M_link: TBoldObjectReference read _Get_M_link;
    property qualifiedValue: TUMLAttributeLinkList read _GetqualifiedValue;
    property instance: TUMLInstance read _Getinstance write _Setinstance;
    property associationEnd: TUMLAssociationEnd read _GetassociationEnd write _SetassociationEnd;
    property link: TUMLLink read _Getlink write _Setlink;
  end;

  TUMLMessage = class(TUMLModelElement)
  private
    function _Getinteraction: TUMLInteraction;
    function _Get_M_interaction: TBoldObjectReference;
    procedure _Setinteraction(const value: TUMLInteraction);
    function _GetcommunicationConnection: TUMLAssociationRole;
    function _Get_M_communicationConnection: TBoldObjectReference;
    procedure _SetcommunicationConnection(const value: TUMLAssociationRole);
    function _Getaction: TUMLAction;
    function _Get_M_action: TBoldObjectReference;
    procedure _Setaction(const value: TUMLAction);
    function _Getpredecessor: TUMLMessageList;
    function _Getpredecessorpredecessormessage3: Tpredecessormessage3List;
    function _Getmessage3: TUMLMessageList;
    function _Getmessage3predecessormessage3: Tpredecessormessage3List;
    function _Getmessage4: TUMLMessageList;
    function _Getactivator: TUMLMessage;
    function _Get_M_activator: TBoldObjectReference;
    procedure _Setactivator(const value: TUMLMessage);
    function _Getreceiver: TUMLClassifierRole;
    function _Get_M_receiver: TBoldObjectReference;
    procedure _Setreceiver(const value: TUMLClassifierRole);
    function _Getsender: TUMLClassifierRole;
    function _Get_M_sender: TBoldObjectReference;
    procedure _Setsender(const value: TUMLClassifierRole);
  protected
  public
    property M_interaction: TBoldObjectReference read _Get_M_interaction;
    property M_communicationConnection: TBoldObjectReference read _Get_M_communicationConnection;
    property M_action: TBoldObjectReference read _Get_M_action;
    property M_predecessor: TUMLMessageList read _Getpredecessor;
    property M_predecessorpredecessormessage3: Tpredecessormessage3List read _Getpredecessorpredecessormessage3;
    property M_message3: TUMLMessageList read _Getmessage3;
    property M_message3predecessormessage3: Tpredecessormessage3List read _Getmessage3predecessormessage3;
    property M_message4: TUMLMessageList read _Getmessage4;
    property M_activator: TBoldObjectReference read _Get_M_activator;
    property M_receiver: TBoldObjectReference read _Get_M_receiver;
    property M_sender: TBoldObjectReference read _Get_M_sender;
    property interaction: TUMLInteraction read _Getinteraction write _Setinteraction;
    property communicationConnection: TUMLAssociationRole read _GetcommunicationConnection write _SetcommunicationConnection;
    property action: TUMLAction read _Getaction write _Setaction;
    property predecessor: TUMLMessageList read _Getpredecessor;
    property predecessorpredecessormessage3: Tpredecessormessage3List read _Getpredecessorpredecessormessage3;
    property message3: TUMLMessageList read _Getmessage3;
    property message3predecessormessage3: Tpredecessormessage3List read _Getmessage3predecessormessage3;
    property message4: TUMLMessageList read _Getmessage4;
    property activator: TUMLMessage read _Getactivator write _Setactivator;
    property receiver: TUMLClassifierRole read _Getreceiver write _Setreceiver;
    property sender: TUMLClassifierRole read _Getsender write _Setsender;
  end;

  TUMLNamespace = class(TUMLModelElement)
  private
    function _GetownedElement: TUMLModelElementList;
    function _Getassociations: TUMLAssociationList;
    function _Getclasses: TUMLClassList;
    function _GetallOwnedElement: TUMLModelElementList;
    function _GetClassByName: TUMLClassList;
    function _Get_Q_ClassByName(name: String): TUMLClass;
  protected
  public
    property M_ownedElement: TUMLModelElementList read _GetownedElement;
    property M_associations: TUMLAssociationList read _Getassociations;
    property M_classes: TUMLClassList read _Getclasses;
    property M_allOwnedElement: TUMLModelElementList read _GetallOwnedElement;
    property M_ClassByName: TUMLClassList read _GetClassByName;
    property ownedElement: TUMLModelElementList read _GetownedElement;
    property associations: TUMLAssociationList read _Getassociations;
    property classes: TUMLClassList read _Getclasses;
    property allOwnedElement: TUMLModelElementList read _GetallOwnedElement;
    property ClassByName[name: String]: TUMLClass read _Get_Q_ClassByName;
  end;

  TUMLParameter = class(TUMLModelElement)
  private
    function _Get_M_defaultValue: TBAString;
    function _GetdefaultValue: String;
    procedure _SetdefaultValue(const NewValue: String);
    function _Get_M_kind: TBAParameterDirectionKind;
    function _Getkind: TBoldParameterDirectionKind;
    procedure _Setkind(const NewValue: TBoldParameterDirectionKind);
    function _Get_M_typeName: TBAString;
    function _GettypeName: String;
    procedure _SettypeName(const NewValue: String);
    function _Getevent: TUMLEvent;
    function _Get_M_event: TBoldObjectReference;
    procedure _Setevent(const value: TUMLEvent);
    function _Getstate: TUMLObjectFlowStateList;
    function _Getparameterstate: TparameterstateList;
    function _Gettype_: TUMLClassifier;
    function _Get_M_type_: TBoldObjectReference;
    procedure _Settype_(const value: TUMLClassifier);
    function _GetbehavioralFeature: TUMLBehavioralFeature;
    function _Get_M_behavioralFeature: TBoldObjectReference;
    procedure _SetbehavioralFeature(const value: TUMLBehavioralFeature);
  protected
    procedure _typeName_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    procedure _typeName_ReverseDerive(DerivedObject: TObject); virtual;
    function GetDeriveMethodForMember(MemberIndex: Integer): TBoldDeriveAndResubscribe; override;
    function GetReverseDeriveMethodForMember(MemberIndex: Integer): TBoldReverseDerive; override;
  public
    property M_defaultValue: TBAString read _Get_M_defaultValue;
    property M_kind: TBAParameterDirectionKind read _Get_M_kind;
    property M_typeName: TBAString read _Get_M_typeName;
    property M_event: TBoldObjectReference read _Get_M_event;
    property M_state: TUMLObjectFlowStateList read _Getstate;
    property M_parameterstate: TparameterstateList read _Getparameterstate;
    property M_type_: TBoldObjectReference read _Get_M_type_;
    property M_behavioralFeature: TBoldObjectReference read _Get_M_behavioralFeature;
    property defaultValue: String read _GetdefaultValue write _SetdefaultValue;
    property kind: TBoldParameterDirectionKind read _Getkind write _Setkind;
    property typeName: String read _GettypeName write _SettypeName;
    property event: TUMLEvent read _Getevent write _Setevent;
    property state: TUMLObjectFlowStateList read _Getstate;
    property parameterstate: TparameterstateList read _Getparameterstate;
    property type_: TUMLClassifier read _Gettype_ write _Settype_;
    property behavioralFeature: TUMLBehavioralFeature read _GetbehavioralFeature write _SetbehavioralFeature;
  end;

  TUMLPartition = class(TUMLModelElement)
  private
    function _Getcontents: TUMLModelElementList;
    function _Getcontentscontentspartition: TcontentspartitionList;
    function _GetactivityGraph: TUMLActivityGraph;
    function _Get_M_activityGraph: TBoldObjectReference;
    procedure _SetactivityGraph(const value: TUMLActivityGraph);
  protected
  public
    property M_contents: TUMLModelElementList read _Getcontents;
    property M_contentscontentspartition: TcontentspartitionList read _Getcontentscontentspartition;
    property M_activityGraph: TBoldObjectReference read _Get_M_activityGraph;
    property contents: TUMLModelElementList read _Getcontents;
    property contentscontentspartition: TcontentspartitionList read _Getcontentscontentspartition;
    property activityGraph: TUMLActivityGraph read _GetactivityGraph write _SetactivityGraph;
  end;

  _TDebuggerWorkAroundClass49 = class(TInterfacedObject, IUnknown) end;
  {$EXTERNALSYM _TDebuggerWorkAroundClass49}

  TUMLRelationship = class(TUMLModelElement)
  private
  protected
  public
  end;

  TUMLStateMachine = class(TUMLModelElement)
  private
    function _Gettransitions: TUMLTransitionList;
    function _GetsubMachineState: TUMLSubmachineStateList;
    function _Getcontext: TUMLModelElement;
    function _Get_M_context: TBoldObjectReference;
    procedure _Setcontext(const value: TUMLModelElement);
    function _Gettop: TUMLState;
    function _Get_M_top: TBoldObjectReference;
    procedure _Settop(const value: TUMLState);
  protected
  public
    property M_transitions: TUMLTransitionList read _Gettransitions;
    property M_subMachineState: TUMLSubmachineStateList read _GetsubMachineState;
    property M_context: TBoldObjectReference read _Get_M_context;
    property M_top: TBoldObjectReference read _Get_M_top;
    property transitions: TUMLTransitionList read _Gettransitions;
    property subMachineState: TUMLSubmachineStateList read _GetsubMachineState;
    property context: TUMLModelElement read _Getcontext write _Setcontext;
    property top: TUMLState read _Gettop write _Settop;
  end;

  TUMLStateVertex = class(TUMLModelElement)
  private
    function _Getcontainer: TUMLCompositeState;
    function _Get_M_container: TBoldObjectReference;
    procedure _Setcontainer(const value: TUMLCompositeState);
    function _Getoutgoing: TUMLTransitionList;
    function _Getincoming: TUMLTransitionList;
  protected
  public
    property M_container: TBoldObjectReference read _Get_M_container;
    property M_outgoing: TUMLTransitionList read _Getoutgoing;
    property M_incoming: TUMLTransitionList read _Getincoming;
    property container: TUMLCompositeState read _Getcontainer write _Setcontainer;
    property outgoing: TUMLTransitionList read _Getoutgoing;
    property incoming: TUMLTransitionList read _Getincoming;
  end;

  TUMLStimulus = class(TUMLModelElement)
  private
    function _Getargument: TUMLInstanceList;
    function _Getargumentstimulus1: Targumentstimulus1List;
    function _GetdispatchAction: TUMLAction;
    function _Get_M_dispatchAction: TBoldObjectReference;
    procedure _SetdispatchAction(const value: TUMLAction);
    function _GetcommunicationLink: TUMLLink;
    function _Get_M_communicationLink: TBoldObjectReference;
    procedure _SetcommunicationLink(const value: TUMLLink);
    function _Getreceiver: TUMLInstance;
    function _Get_M_receiver: TBoldObjectReference;
    procedure _Setreceiver(const value: TUMLInstance);
    function _Getsender: TUMLInstance;
    function _Get_M_sender: TBoldObjectReference;
    procedure _Setsender(const value: TUMLInstance);
  protected
  public
    property M_argument: TUMLInstanceList read _Getargument;
    property M_argumentstimulus1: Targumentstimulus1List read _Getargumentstimulus1;
    property M_dispatchAction: TBoldObjectReference read _Get_M_dispatchAction;
    property M_communicationLink: TBoldObjectReference read _Get_M_communicationLink;
    property M_receiver: TBoldObjectReference read _Get_M_receiver;
    property M_sender: TBoldObjectReference read _Get_M_sender;
    property argument: TUMLInstanceList read _Getargument;
    property argumentstimulus1: Targumentstimulus1List read _Getargumentstimulus1;
    property dispatchAction: TUMLAction read _GetdispatchAction write _SetdispatchAction;
    property communicationLink: TUMLLink read _GetcommunicationLink write _SetcommunicationLink;
    property receiver: TUMLInstance read _Getreceiver write _Setreceiver;
    property sender: TUMLInstance read _Getsender write _Setsender;
  end;

  TUMLTaggedValue = class(TUMLModelElement)
  private
    function _Get_M_tag: TBAString;
    function _Gettag: String;
    procedure _Settag(const NewValue: String);
    function _Get_M_value: TBAString;
    function _Getvalue: String;
    procedure _Setvalue(const NewValue: String);
    function _GetmodelElement: TUMLModelElement;
    function _Get_M_modelElement: TBoldObjectReference;
    procedure _SetmodelElement(const value: TUMLModelElement);
    function _Getstereotype_: TUMLStereotype;
    function _Get_M_stereotype_: TBoldObjectReference;
    procedure _Setstereotype_(const value: TUMLStereotype);
  protected
  public
    property M_tag: TBAString read _Get_M_tag;
    property M_value: TBAString read _Get_M_value;
    property M_modelElement: TBoldObjectReference read _Get_M_modelElement;
    property M_stereotype_: TBoldObjectReference read _Get_M_stereotype_;
    property tag: String read _Gettag write _Settag;
    property value: String read _Getvalue write _Setvalue;
    property modelElement: TUMLModelElement read _GetmodelElement write _SetmodelElement;
    property stereotype_: TUMLStereotype read _Getstereotype_ write _Setstereotype_;
  end;

  TUMLTransition = class(TUMLModelElement)
  private
    function _GetState: TUMLState;
    function _Get_M_State: TBoldObjectReference;
    procedure _SetState(const value: TUMLState);
    function _Gettrigger: TUMLEvent;
    function _Get_M_trigger: TBoldObjectReference;
    procedure _Settrigger(const value: TUMLEvent);
    function _Geteffect: TUMLAction;
    function _Get_M_effect: TBoldObjectReference;
    procedure _Seteffect(const value: TUMLAction);
    function _GetstateMachine: TUMLStateMachine;
    function _Get_M_stateMachine: TBoldObjectReference;
    procedure _SetstateMachine(const value: TUMLStateMachine);
    function _Getsource: TUMLStateVertex;
    function _Get_M_source: TBoldObjectReference;
    procedure _Setsource(const value: TUMLStateVertex);
    function _Gettarget: TUMLStateVertex;
    function _Get_M_target: TBoldObjectReference;
    procedure _Settarget(const value: TUMLStateVertex);
    function _Getguard: TUMLGuard;
    function _Get_M_guard: TBoldObjectReference;
    procedure _Setguard(const value: TUMLGuard);
  protected
  public
    property M_State: TBoldObjectReference read _Get_M_State;
    property M_trigger: TBoldObjectReference read _Get_M_trigger;
    property M_effect: TBoldObjectReference read _Get_M_effect;
    property M_stateMachine: TBoldObjectReference read _Get_M_stateMachine;
    property M_source: TBoldObjectReference read _Get_M_source;
    property M_target: TBoldObjectReference read _Get_M_target;
    property M_guard: TBoldObjectReference read _Get_M_guard;
    property State: TUMLState read _GetState write _SetState;
    property trigger: TUMLEvent read _Gettrigger write _Settrigger;
    property effect: TUMLAction read _Geteffect write _Seteffect;
    property stateMachine: TUMLStateMachine read _GetstateMachine write _SetstateMachine;
    property source: TUMLStateVertex read _Getsource write _Setsource;
    property target: TUMLStateVertex read _Gettarget write _Settarget;
    property guard: TUMLGuard read _Getguard write _Setguard;
  end;

  TUMLActionSequence = class(TUMLAction)
  private
    function _Getaction: TUMLActionList;
  protected
  public
    property M_action: TUMLActionList read _Getaction;
    property action: TUMLActionList read _Getaction;
  end;

  TUMLCallAction = class(TUMLAction)
  private
    function _Getoperation: TUMLOperation;
    function _Get_M_operation: TBoldObjectReference;
    procedure _Setoperation(const value: TUMLOperation);
  protected
  public
    property M_operation: TBoldObjectReference read _Get_M_operation;
    property operation: TUMLOperation read _Getoperation write _Setoperation;
  end;

  TUMLCreateAction = class(TUMLAction)
  private
    function _Getinstantiation: TUMLClassifier;
    function _Get_M_instantiation: TBoldObjectReference;
    procedure _Setinstantiation(const value: TUMLClassifier);
  protected
  public
    property M_instantiation: TBoldObjectReference read _Get_M_instantiation;
    property instantiation: TUMLClassifier read _Getinstantiation write _Setinstantiation;
  end;

  TUMLDestroyAction = class(TUMLAction)
  private
  protected
  public
  end;

  TUMLReturnAction = class(TUMLAction)
  private
  protected
  public
  end;

  TUMLSendAction = class(TUMLAction)
  private
    function _Getsignal: TUMLSignal;
    function _Get_M_signal: TBoldObjectReference;
    procedure _Setsignal(const value: TUMLSignal);
  protected
  public
    property M_signal: TBoldObjectReference read _Get_M_signal;
    property signal: TUMLSignal read _Getsignal write _Setsignal;
  end;

  TUMLTerminateAction = class(TUMLAction)
  private
  protected
  public
  end;

  TUMLUninterpretedAction = class(TUMLAction)
  private
  protected
  public
  end;

  TUMLAssociationEndRole = class(TUMLAssociationEnd)
  private
    function _Get_M_collaborationMultiplicity: TBAString;
    function _GetcollaborationMultiplicity: String;
    procedure _SetcollaborationMultiplicity(const NewValue: String);
    function _Getbase: TUMLAssociationEnd;
    function _Get_M_base: TBoldObjectReference;
    procedure _Setbase(const value: TUMLAssociationEnd);
    function _GetavailableQualifier: TUMLAttributeList;
    function _GetassociationEndRoleavailableQualifier: TassociationEndRoleavailableQualifierList;
    property M_collaborationMultiplicity: TBAString read _Get_M_collaborationMultiplicity;
    {$HINTS OFF}
    property collaborationMultiplicity: String read _GetcollaborationMultiplicity write _SetcollaborationMultiplicity;
    {$HINTS ON}
  protected
  public
    property M_base: TBoldObjectReference read _Get_M_base;
    property M_availableQualifier: TUMLAttributeList read _GetavailableQualifier;
    property M_associationEndRoleavailableQualifier: TassociationEndRoleavailableQualifierList read _GetassociationEndRoleavailableQualifier;
    property base: TUMLAssociationEnd read _Getbase write _Setbase;
    property availableQualifier: TUMLAttributeList read _GetavailableQualifier;
    property associationEndRoleavailableQualifier: TassociationEndRoleavailableQualifierList read _GetassociationEndRoleavailableQualifier;
  end;

  TUMLCallEvent = class(TUMLEvent)
  private
    function _Getoperation: TUMLOperation;
    function _Get_M_operation: TBoldObjectReference;
    procedure _Setoperation(const value: TUMLOperation);
  protected
  public
    property M_operation: TBoldObjectReference read _Get_M_operation;
    property operation: TUMLOperation read _Getoperation write _Setoperation;
  end;

  TUMLChangeEvent = class(TUMLEvent)
  private
    function _Get_M_changeExpression: TBAString;
    function _GetchangeExpression: String;
    procedure _SetchangeExpression(const NewValue: String);
  protected
  public
    property M_changeExpression: TBAString read _Get_M_changeExpression;
    property changeExpression: String read _GetchangeExpression write _SetchangeExpression;
  end;

  TUMLSignalEvent = class(TUMLEvent)
  private
    function _Getsignal: TUMLSignal;
    function _Get_M_signal: TBoldObjectReference;
    procedure _Setsignal(const value: TUMLSignal);
  protected
  public
    property M_signal: TBoldObjectReference read _Get_M_signal;
    property signal: TUMLSignal read _Getsignal write _Setsignal;
  end;

  TUMLTimeEvent = class(TUMLEvent)
  private
    function _Get_M_when: TBAString;
    function _Getwhen: String;
    procedure _Setwhen(const NewValue: String);
  protected
  public
    property M_when: TBAString read _Get_M_when;
    property when: String read _Getwhen write _Setwhen;
  end;

  TUMLBehavioralFeature = class(TUMLFeature)
  private
    function _Get_M_isQuery: TBABoolean;
    function _GetisQuery: boolean;
    procedure _SetisQuery(const NewValue: boolean);
    function _GetraisedSignal: TUMLSignalList;
    function _GetcontextraisedSignal: TcontextraisedSignalList;
    function _Getparameter: TUMLParameterList;
  protected
  public
    property M_isQuery: TBABoolean read _Get_M_isQuery;
    property M_raisedSignal: TUMLSignalList read _GetraisedSignal;
    property M_contextraisedSignal: TcontextraisedSignalList read _GetcontextraisedSignal;
    property M_parameter: TUMLParameterList read _Getparameter;
    property isQuery: boolean read _GetisQuery write _SetisQuery;
    property raisedSignal: TUMLSignalList read _GetraisedSignal;
    property contextraisedSignal: TcontextraisedSignalList read _GetcontextraisedSignal;
    property parameter: TUMLParameterList read _Getparameter;
  end;

  TUMLStructuralFeature = class(TUMLFeature)
  private
    function _Get_M_multiplicity: TBAString;
    function _Getmultiplicity: String;
    procedure _Setmultiplicity(const NewValue: String);
    function _Get_M_changeability: TBAChangeableKind;
    function _Getchangeability: TChangeableKind;
    procedure _Setchangeability(const NewValue: TChangeableKind);
    function _Get_M_targetScope: TBAScopeKind;
    function _GettargetScope: TScopeKind;
    procedure _SettargetScope(const NewValue: TScopeKind);
    function _Get_M_typeName: TBAString;
    function _GettypeName: String;
    procedure _SettypeName(const NewValue: String);
    function _Gettype_: TUMLClassifier;
    function _Get_M_type_: TBoldObjectReference;
    procedure _Settype_(const value: TUMLClassifier);
  protected
    procedure _typeName_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    procedure _typeName_ReverseDerive(DerivedObject: TObject); virtual;
    function GetDeriveMethodForMember(MemberIndex: Integer): TBoldDeriveAndResubscribe; override;
    function GetReverseDeriveMethodForMember(MemberIndex: Integer): TBoldReverseDerive; override;
  public
    property M_multiplicity: TBAString read _Get_M_multiplicity;
    property M_changeability: TBAChangeableKind read _Get_M_changeability;
    property M_targetScope: TBAScopeKind read _Get_M_targetScope;
    property M_typeName: TBAString read _Get_M_typeName;
    property M_type_: TBoldObjectReference read _Get_M_type_;
    property multiplicity: String read _Getmultiplicity write _Setmultiplicity;
    property changeability: TChangeableKind read _Getchangeability write _Setchangeability;
    property targetScope: TScopeKind read _GettargetScope write _SettargetScope;
    property typeName: String read _GettypeName write _SettypeName;
    property type_: TUMLClassifier read _Gettype_ write _Settype_;
  end;

  TUMLComponentInstance = class(TUMLInstance)
  private
    function _Getresident_: TUMLInstanceList;
    function _GetnodeInstance: TUMLNodeInstance;
    function _Get_M_nodeInstance: TBoldObjectReference;
    procedure _SetnodeInstance(const value: TUMLNodeInstance);
  protected
  public
    property M_resident_: TUMLInstanceList read _Getresident_;
    property M_nodeInstance: TBoldObjectReference read _Get_M_nodeInstance;
    property resident_: TUMLInstanceList read _Getresident_;
    property nodeInstance: TUMLNodeInstance read _GetnodeInstance write _SetnodeInstance;
  end;

  TUMLDataValue = class(TUMLInstance)
  private
  protected
  public
  end;

  TUMLNodeInstance = class(TUMLInstance)
  private
    function _Getresident_: TUMLComponentInstanceList;
  protected
  public
    property M_resident_: TUMLComponentInstanceList read _Getresident_;
    property resident_: TUMLComponentInstanceList read _Getresident_;
  end;

  TUMLObject = class(TUMLInstance)
  private
    function _Getlink: TUMLLink;
    function _Get_M_link: TBoldObjectReference;
    procedure _Setlink(const value: TUMLLink);
  protected
  public
    property M_link: TBoldObjectReference read _Get_M_link;
    property link: TUMLLink read _Getlink write _Setlink;
  end;

  TUMLUseCaseInstance = class(TUMLInstance)
  private
  protected
  public
  end;

  TUMLGeneralizableElement = class(TUMLNamespace)
  private
    function _Get_M_isRoot: TBABoolean;
    function _GetisRoot: boolean;
    procedure _SetisRoot(const NewValue: boolean);
    function _Get_M_isLeaf: TBABoolean;
    function _GetisLeaf: boolean;
    procedure _SetisLeaf(const NewValue: boolean);
    function _Get_M_isAbstract: TBABoolean;
    function _GetisAbstract: boolean;
    procedure _SetisAbstract(const NewValue: boolean);
    function _Getspecialization: TUMLGeneralizationList;
    function _Getgeneralization: TUMLGeneralizationList;
  protected
  public
    property M_isRoot: TBABoolean read _Get_M_isRoot;
    property M_isLeaf: TBABoolean read _Get_M_isLeaf;
    property M_isAbstract: TBABoolean read _Get_M_isAbstract;
    property M_specialization: TUMLGeneralizationList read _Getspecialization;
    property M_generalization: TUMLGeneralizationList read _Getgeneralization;
    property isRoot: boolean read _GetisRoot write _SetisRoot;
    property isLeaf: boolean read _GetisLeaf write _SetisLeaf;
    property isAbstract: boolean read _GetisAbstract write _SetisAbstract;
    property specialization: TUMLGeneralizationList read _Getspecialization;
    property generalization: TUMLGeneralizationList read _Getgeneralization;
  end;

  TUMLDependency = class(TUMLRelationship)
  private
    function _Getsupplier: TUMLModelElementList;
    function _GetsuppliersuppliersupplierDependency: TsuppliersupplierDependencyList;
    function _Getclient: TUMLModelElementList;
    function _GetclientclientclientDependency: TclientclientDependencyList;
  protected
  public
    property M_supplier: TUMLModelElementList read _Getsupplier;
    property M_suppliersuppliersupplierDependency: TsuppliersupplierDependencyList read _GetsuppliersuppliersupplierDependency;
    property M_client: TUMLModelElementList read _Getclient;
    property M_clientclientclientDependency: TclientclientDependencyList read _GetclientclientclientDependency;
    property supplier: TUMLModelElementList read _Getsupplier;
    property suppliersuppliersupplierDependency: TsuppliersupplierDependencyList read _GetsuppliersuppliersupplierDependency;
    property client: TUMLModelElementList read _Getclient;
    property clientclientclientDependency: TclientclientDependencyList read _GetclientclientclientDependency;
  end;

  TUMLExtend = class(TUMLRelationship)
  private
    function _Get_M_condition: TBAString;
    function _Getcondition: String;
    procedure _Setcondition(const NewValue: String);
    function _GetextensionPoint: TUMLExtensionPointList;
    function _GetextensionPointextend: TextensionPointextendList;
    function _Getbase: TUMLUseCase;
    function _Get_M_base: TBoldObjectReference;
    procedure _Setbase(const value: TUMLUseCase);
    function _Getextension: TUMLUseCase;
    function _Get_M_extension: TBoldObjectReference;
    procedure _Setextension(const value: TUMLUseCase);
  protected
  public
    property M_condition: TBAString read _Get_M_condition;
    property M_extensionPoint: TUMLExtensionPointList read _GetextensionPoint;
    property M_extensionPointextend: TextensionPointextendList read _GetextensionPointextend;
    property M_base: TBoldObjectReference read _Get_M_base;
    property M_extension: TBoldObjectReference read _Get_M_extension;
    property condition: String read _Getcondition write _Setcondition;
    property extensionPoint: TUMLExtensionPointList read _GetextensionPoint;
    property extensionPointextend: TextensionPointextendList read _GetextensionPointextend;
    property base: TUMLUseCase read _Getbase write _Setbase;
    property extension: TUMLUseCase read _Getextension write _Setextension;
  end;

  TUMLFlow = class(TUMLRelationship)
  private
    function _Getsource: TUMLModelElementList;
    function _GetsourcesourceFlowsource: TsourceFlowsourceList;
    function _Gettarget: TUMLModelElementList;
    function _GettargettargetFlowtarget: TtargetFlowtargetList;
  protected
  public
    property M_source: TUMLModelElementList read _Getsource;
    property M_sourcesourceFlowsource: TsourceFlowsourceList read _GetsourcesourceFlowsource;
    property M_target: TUMLModelElementList read _Gettarget;
    property M_targettargetFlowtarget: TtargetFlowtargetList read _GettargettargetFlowtarget;
    property source: TUMLModelElementList read _Getsource;
    property sourcesourceFlowsource: TsourceFlowsourceList read _GetsourcesourceFlowsource;
    property target: TUMLModelElementList read _Gettarget;
    property targettargetFlowtarget: TtargetFlowtargetList read _GettargettargetFlowtarget;
  end;

  TUMLGeneralization = class(TUMLRelationship)
  private
    function _Get_M_discriminator: TBAString;
    function _Getdiscriminator: String;
    procedure _Setdiscriminator(const NewValue: String);
    function _Getparent: TUMLGeneralizableElement;
    function _Get_M_parent: TBoldObjectReference;
    procedure _Setparent(const value: TUMLGeneralizableElement);
    function _Getchild: TUMLGeneralizableElement;
    function _Get_M_child: TBoldObjectReference;
    procedure _Setchild(const value: TUMLGeneralizableElement);
    function _Getpowertype: TUMLClassifier;
    function _Get_M_powertype: TBoldObjectReference;
    procedure _Setpowertype(const value: TUMLClassifier);
  protected
  public
    property M_discriminator: TBAString read _Get_M_discriminator;
    property M_parent: TBoldObjectReference read _Get_M_parent;
    property M_child: TBoldObjectReference read _Get_M_child;
    property M_powertype: TBoldObjectReference read _Get_M_powertype;
    property discriminator: String read _Getdiscriminator write _Setdiscriminator;
    property parent: TUMLGeneralizableElement read _Getparent write _Setparent;
    property child: TUMLGeneralizableElement read _Getchild write _Setchild;
    property powertype: TUMLClassifier read _Getpowertype write _Setpowertype;
  end;

  TUMLInclude = class(TUMLRelationship)
  private
    function _Getbase: TUMLUseCase;
    function _Get_M_base: TBoldObjectReference;
    procedure _Setbase(const value: TUMLUseCase);
    function _Getaddition: TUMLUseCase;
    function _Get_M_addition: TBoldObjectReference;
    procedure _Setaddition(const value: TUMLUseCase);
  protected
  public
    property M_base: TBoldObjectReference read _Get_M_base;
    property M_addition: TBoldObjectReference read _Get_M_addition;
    property base: TUMLUseCase read _Getbase write _Setbase;
    property addition: TUMLUseCase read _Getaddition write _Setaddition;
  end;

  TUMLActivityGraph = class(TUMLStateMachine)
  private
    function _Getpartition_: TUMLPartitionList;
  protected
  public
    property M_partition_: TUMLPartitionList read _Getpartition_;
    property partition_: TUMLPartitionList read _Getpartition_;
  end;

  TUMLPseudostate = class(TUMLStateVertex)
  private
    function _Get_M_kind: TBAPseudostateKind;
    function _Getkind: TPseudostateKind;
    procedure _Setkind(const NewValue: TPseudostateKind);
  protected
  public
    property M_kind: TBAPseudostateKind read _Get_M_kind;
    property kind: TPseudostateKind read _Getkind write _Setkind;
  end;

  TUMLState = class(TUMLStateVertex)
  private
    function _Getentry: TUMLAction;
    function _Get_M_entry: TBoldObjectReference;
    procedure _Setentry(const value: TUMLAction);
    function _GetinternalTransition: TUMLTransitionList;
    function _GetdoActivity: TUMLAction;
    function _Get_M_doActivity: TBoldObjectReference;
    procedure _SetdoActivity(const value: TUMLAction);
    function _Getexit: TUMLAction;
    function _Get_M_exit: TBoldObjectReference;
    procedure _Setexit(const value: TUMLAction);
    function _GetdeferrableEvent: TUMLEventList;
    function _GetstatedeferrableEvent: TstatedeferrableEventList;
    function _GetstateMachine: TUMLStateMachine;
    function _Get_M_stateMachine: TBoldObjectReference;
    procedure _SetstateMachine(const value: TUMLStateMachine);
    function _GetclassifierInState: TUMLClassifierInStateList;
    function _GetclassifierInStateinState: TclassifierInStateinStateList;
  protected
  public
    property M_entry: TBoldObjectReference read _Get_M_entry;
    property M_internalTransition: TUMLTransitionList read _GetinternalTransition;
    property M_doActivity: TBoldObjectReference read _Get_M_doActivity;
    property M_exit: TBoldObjectReference read _Get_M_exit;
    property M_deferrableEvent: TUMLEventList read _GetdeferrableEvent;
    property M_statedeferrableEvent: TstatedeferrableEventList read _GetstatedeferrableEvent;
    property M_stateMachine: TBoldObjectReference read _Get_M_stateMachine;
    property M_classifierInState: TUMLClassifierInStateList read _GetclassifierInState;
    property M_classifierInStateinState: TclassifierInStateinStateList read _GetclassifierInStateinState;
    property entry: TUMLAction read _Getentry write _Setentry;
    property internalTransition: TUMLTransitionList read _GetinternalTransition;
    property doActivity: TUMLAction read _GetdoActivity write _SetdoActivity;
    property exit: TUMLAction read _Getexit write _Setexit;
    property deferrableEvent: TUMLEventList read _GetdeferrableEvent;
    property statedeferrableEvent: TstatedeferrableEventList read _GetstatedeferrableEvent;
    property stateMachine: TUMLStateMachine read _GetstateMachine write _SetstateMachine;
    property classifierInState: TUMLClassifierInStateList read _GetclassifierInState;
    property classifierInStateinState: TclassifierInStateinStateList read _GetclassifierInStateinState;
  end;

  TUMLStubState = class(TUMLStateVertex)
  private
    function _Get_M_referenceState: TBAString;
    function _GetreferenceState: String;
    procedure _SetreferenceState(const NewValue: String);
  protected
  public
    property M_referenceState: TBAString read _Get_M_referenceState;
    property referenceState: String read _GetreferenceState write _SetreferenceState;
  end;

  TUMLSynchState = class(TUMLStateVertex)
  private
    function _Get_M_bound: TBAString;
    function _Getbound: String;
    procedure _Setbound(const NewValue: String);
  protected
  public
    property M_bound: TBAString read _Get_M_bound;
    property bound: String read _Getbound write _Setbound;
  end;

  TUMLMethod = class(TUMLBehavioralFeature)
  private
    function _Get_M_body: TBAString;
    function _Getbody: String;
    procedure _Setbody(const NewValue: String);
    function _Getspecification: TUMLOperation;
    function _Get_M_specification: TBoldObjectReference;
    procedure _Setspecification(const value: TUMLOperation);
  protected
  public
    property M_body: TBAString read _Get_M_body;
    property M_specification: TBoldObjectReference read _Get_M_specification;
    property body: String read _Getbody write _Setbody;
    property specification: TUMLOperation read _Getspecification write _Setspecification;
  end;

  TUMLOperation = class(TUMLBehavioralFeature)
  private
    function _Get_M_concurrency: TBACallConcurrencyKind;
    function _Getconcurrency: TCallConcurrencyKind;
    procedure _Setconcurrency(const NewValue: TCallConcurrencyKind);
    function _Get_M_isRoot: TBABoolean;
    function _GetisRoot: boolean;
    procedure _SetisRoot(const NewValue: boolean);
    function _Get_M_isLeaf: TBABoolean;
    function _GetisLeaf: boolean;
    procedure _SetisLeaf(const NewValue: boolean);
    function _Get_M_isAbstract: TBABoolean;
    function _GetisAbstract: boolean;
    procedure _SetisAbstract(const NewValue: boolean);
    function _Get_M_specification: TBAString;
    function _Getspecification: String;
    procedure _Setspecification(const NewValue: String);
    function _Getoccurrences: TUMLCallEventList;
    function _GetcallAction: TUMLCallActionList;
    function _Getcollaboration_: TUMLCollaborationList;
    function _Getmethod: TUMLMethodList;
  protected
  public
    property M_concurrency: TBACallConcurrencyKind read _Get_M_concurrency;
    property M_isRoot: TBABoolean read _Get_M_isRoot;
    property M_isLeaf: TBABoolean read _Get_M_isLeaf;
    property M_isAbstract: TBABoolean read _Get_M_isAbstract;
    property M_specification: TBAString read _Get_M_specification;
    property M_occurrences: TUMLCallEventList read _Getoccurrences;
    property M_callAction: TUMLCallActionList read _GetcallAction;
    property M_collaboration_: TUMLCollaborationList read _Getcollaboration_;
    property M_method: TUMLMethodList read _Getmethod;
    property concurrency: TCallConcurrencyKind read _Getconcurrency write _Setconcurrency;
    property isRoot: boolean read _GetisRoot write _SetisRoot;
    property isLeaf: boolean read _GetisLeaf write _SetisLeaf;
    property isAbstract: boolean read _GetisAbstract write _SetisAbstract;
    property specification: String read _Getspecification write _Setspecification;
    property occurrences: TUMLCallEventList read _Getoccurrences;
    property callAction: TUMLCallActionList read _GetcallAction;
    property collaboration_: TUMLCollaborationList read _Getcollaboration_;
    property method: TUMLMethodList read _Getmethod;
  end;

  TUMLReception = class(TUMLBehavioralFeature)
  private
    function _Get_M_specification: TBAString;
    function _Getspecification: String;
    procedure _Setspecification(const NewValue: String);
    function _Get_M_isRoot: TBABoolean;
    function _GetisRoot: boolean;
    procedure _SetisRoot(const NewValue: boolean);
    function _Get_M_isLeaf: TBABoolean;
    function _GetisLeaf: boolean;
    procedure _SetisLeaf(const NewValue: boolean);
    function _Get_M_isAbstract: TBABoolean;
    function _GetisAbstract: boolean;
    procedure _SetisAbstract(const NewValue: boolean);
    function _Getsignal: TUMLSignal;
    function _Get_M_signal: TBoldObjectReference;
    procedure _Setsignal(const value: TUMLSignal);
  protected
  public
    property M_specification: TBAString read _Get_M_specification;
    property M_isRoot: TBABoolean read _Get_M_isRoot;
    property M_isLeaf: TBABoolean read _Get_M_isLeaf;
    property M_isAbstract: TBABoolean read _Get_M_isAbstract;
    property M_signal: TBoldObjectReference read _Get_M_signal;
    property specification: String read _Getspecification write _Setspecification;
    property isRoot: boolean read _GetisRoot write _SetisRoot;
    property isLeaf: boolean read _GetisLeaf write _SetisLeaf;
    property isAbstract: boolean read _GetisAbstract write _SetisAbstract;
    property signal: TUMLSignal read _Getsignal write _Setsignal;
  end;

  TUMLAttribute = class(TUMLStructuralFeature)
  private
    function _Get_M_initialValue: TBAString;
    function _GetinitialValue: String;
    procedure _SetinitialValue(const NewValue: String);
    function _Get_M_persistent: TBABoolean;
    function _Getpersistent: boolean;
    procedure _Setpersistent(const NewValue: boolean);
    function _GetattributeLink: TUMLAttributeLinkList;
    function _GetassociationEndRole: TUMLAssociationEndRoleList;
    function _GetassociationEndRoleavailableQualifier: TassociationEndRoleavailableQualifierList;
    function _GetassociationEnd: TUMLAssociationEnd;
    function _Get_M_associationEnd: TBoldObjectReference;
    procedure _SetassociationEnd(const value: TUMLAssociationEnd);
  protected
    procedure _persistent_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    procedure _persistent_ReverseDerive(DerivedObject: TObject); virtual;
    function GetDeriveMethodForMember(MemberIndex: Integer): TBoldDeriveAndResubscribe; override;
    function GetReverseDeriveMethodForMember(MemberIndex: Integer): TBoldReverseDerive; override;
  public
    function isQualifier: Boolean;
    function EffectivePersistent: Boolean;
    property M_initialValue: TBAString read _Get_M_initialValue;
    property M_persistent: TBABoolean read _Get_M_persistent;
    property M_attributeLink: TUMLAttributeLinkList read _GetattributeLink;
    property M_associationEndRole: TUMLAssociationEndRoleList read _GetassociationEndRole;
    property M_associationEndRoleavailableQualifier: TassociationEndRoleavailableQualifierList read _GetassociationEndRoleavailableQualifier;
    property M_associationEnd: TBoldObjectReference read _Get_M_associationEnd;
    property initialValue: String read _GetinitialValue write _SetinitialValue;
    property persistent: boolean read _Getpersistent write _Setpersistent;
    property attributeLink: TUMLAttributeLinkList read _GetattributeLink;
    property associationEndRole: TUMLAssociationEndRoleList read _GetassociationEndRole;
    property associationEndRoleavailableQualifier: TassociationEndRoleavailableQualifierList read _GetassociationEndRoleavailableQualifier;
    property associationEnd: TUMLAssociationEnd read _GetassociationEnd write _SetassociationEnd;
  end;

  TUMLAssociation = class(TUMLGeneralizableElement)
  private
    function _Get_M_persistent: TBABoolean;
    function _Getpersistent: boolean;
    procedure _Setpersistent(const NewValue: boolean);
    function _Get_M_isAssociationClass: TBABoolean;
    function _GetisAssociationClass: boolean;
    function _Getlink: TUMLLinkList;
    function _GetassociationRole: TUMLAssociationRoleList;
    function _Getclass_: TUMLClass;
    function _Get_M_class_: TBoldObjectReference;
    procedure _Setclass_(const value: TUMLClass);
    function _Getconnection: TUMLAssociationEndList;
  protected
    procedure _persistent_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    procedure _persistent_ReverseDerive(DerivedObject: TObject); virtual;
    function GetDeriveMethodForMember(MemberIndex: Integer): TBoldDeriveAndResubscribe; override;
    function GetReverseDeriveMethodForMember(MemberIndex: Integer): TBoldReverseDerive; override;
  public
    function EffectivePersistent: Boolean;
    property M_persistent: TBABoolean read _Get_M_persistent;
    property M_isAssociationClass: TBABoolean read _Get_M_isAssociationClass;
    property M_link: TUMLLinkList read _Getlink;
    property M_associationRole: TUMLAssociationRoleList read _GetassociationRole;
    property M_class_: TBoldObjectReference read _Get_M_class_;
    property M_connection: TUMLAssociationEndList read _Getconnection;
    property persistent: boolean read _Getpersistent write _Setpersistent;
    property isAssociationClass: boolean read _GetisAssociationClass;
    property link: TUMLLinkList read _Getlink;
    property associationRole: TUMLAssociationRoleList read _GetassociationRole;
    property class_: TUMLClass read _Getclass_ write _Setclass_;
    property connection: TUMLAssociationEndList read _Getconnection;
  end;

  TUMLClassifier = class(TUMLGeneralizableElement)
  private
    function _Get_M_persistent: TBABoolean;
    function _Getpersistent: boolean;
    procedure _Setpersistent(const NewValue: boolean);
    function _GetcreateAction: TUMLCreateActionList;
    function _Getinstance: TUMLInstanceList;
    function _Getinstanceclassifier: TinstanceclassifierList;
    function _GetclassifierRole_: TUMLClassifierRoleList;
    function _GetclassifierRole_classifierclassifierRole_: TclassifierclassifierRole_List;
    function _Getcollaboration_: TUMLCollaborationList;
    function _GetclassifierInState: TUMLClassifierInStateList;
    function _GetobjectFlowState: TUMLObjectFlowStateList;
    function _Getparticipant: TUMLAssociationEndList;
    function _Getparticipantspecification: TparticipantspecificationList;
    function _Getsubclasses: TUMLClassifierList;
    function _Getsuperclass: TUMLClassifier;
    function _Get_M_superclass: TBoldObjectReference;
    procedure _Setsuperclass(const value: TUMLClassifier);
    function _GetassociationEnd: TUMLAssociationEndList;
    function _GetpowertypeRange: TUMLGeneralizationList;
    function _GetallFeature: TUMLFeatureList;
    function _Getfeature: TUMLFeatureList;
    function _Getsuperclasses: TUMLClassifierList;
  protected
    procedure _persistent_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    procedure _persistent_ReverseDerive(DerivedObject: TObject); virtual;
    procedure _superclasses_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    function GetDeriveMethodForMember(MemberIndex: Integer): TBoldDeriveAndResubscribe; override;
    function GetReverseDeriveMethodForMember(MemberIndex: Integer): TBoldReverseDerive; override;
  public
    procedure GetAllOverrideableMethods(Methods: TList);
    procedure SetFirstParent(parent: TUMLClassifier);
    property M_persistent: TBABoolean read _Get_M_persistent;
    property M_createAction: TUMLCreateActionList read _GetcreateAction;
    property M_instance: TUMLInstanceList read _Getinstance;
    property M_instanceclassifier: TinstanceclassifierList read _Getinstanceclassifier;
    property M_classifierRole_: TUMLClassifierRoleList read _GetclassifierRole_;
    property M_classifierRole_classifierclassifierRole_: TclassifierclassifierRole_List read _GetclassifierRole_classifierclassifierRole_;
    property M_collaboration_: TUMLCollaborationList read _Getcollaboration_;
    property M_classifierInState: TUMLClassifierInStateList read _GetclassifierInState;
    property M_objectFlowState: TUMLObjectFlowStateList read _GetobjectFlowState;
    property M_participant: TUMLAssociationEndList read _Getparticipant;
    property M_participantspecification: TparticipantspecificationList read _Getparticipantspecification;
    property M_subclasses: TUMLClassifierList read _Getsubclasses;
    property M_superclass: TBoldObjectReference read _Get_M_superclass;
    property M_associationEnd: TUMLAssociationEndList read _GetassociationEnd;
    property M_powertypeRange: TUMLGeneralizationList read _GetpowertypeRange;
    property M_allFeature: TUMLFeatureList read _GetallFeature;
    property M_feature: TUMLFeatureList read _Getfeature;
    property M_superclasses: TUMLClassifierList read _Getsuperclasses;
    property persistent: boolean read _Getpersistent write _Setpersistent;
    property createAction: TUMLCreateActionList read _GetcreateAction;
    property instance: TUMLInstanceList read _Getinstance;
    property instanceclassifier: TinstanceclassifierList read _Getinstanceclassifier;
    property classifierRole_: TUMLClassifierRoleList read _GetclassifierRole_;
    property classifierRole_classifierclassifierRole_: TclassifierclassifierRole_List read _GetclassifierRole_classifierclassifierRole_;
    property collaboration_: TUMLCollaborationList read _Getcollaboration_;
    property classifierInState: TUMLClassifierInStateList read _GetclassifierInState;
    property objectFlowState: TUMLObjectFlowStateList read _GetobjectFlowState;
    property participant: TUMLAssociationEndList read _Getparticipant;
    property participantspecification: TparticipantspecificationList read _Getparticipantspecification;
    property subclasses: TUMLClassifierList read _Getsubclasses;
    property superclass: TUMLClassifier read _Getsuperclass write _Setsuperclass;
    property associationEnd: TUMLAssociationEndList read _GetassociationEnd;
    property powertypeRange: TUMLGeneralizationList read _GetpowertypeRange;
    property allFeature: TUMLFeatureList read _GetallFeature;
    property feature: TUMLFeatureList read _Getfeature;
    property superclasses: TUMLClassifierList read _Getsuperclasses;
  end;

  TUMLCollaboration = class(TUMLGeneralizableElement)
  private
    function _Getinteraction: TUMLInteractionList;
    function _GetconstrainingElement: TUMLModelElementList;
    function _GetconstrainingElementcollaborationconstrainingElement: TcollaborationconstrainingElementList;
    function _GetrepresentedClassifier: TUMLClassifier;
    function _Get_M_representedClassifier: TBoldObjectReference;
    procedure _SetrepresentedClassifier(const value: TUMLClassifier);
    function _GetrepresentedOperation: TUMLOperation;
    function _Get_M_representedOperation: TBoldObjectReference;
    procedure _SetrepresentedOperation(const value: TUMLOperation);
  protected
  public
    property M_interaction: TUMLInteractionList read _Getinteraction;
    property M_constrainingElement: TUMLModelElementList read _GetconstrainingElement;
    property M_constrainingElementcollaborationconstrainingElement: TcollaborationconstrainingElementList read _GetconstrainingElementcollaborationconstrainingElement;
    property M_representedClassifier: TBoldObjectReference read _Get_M_representedClassifier;
    property M_representedOperation: TBoldObjectReference read _Get_M_representedOperation;
    property interaction: TUMLInteractionList read _Getinteraction;
    property constrainingElement: TUMLModelElementList read _GetconstrainingElement;
    property constrainingElementcollaborationconstrainingElement: TcollaborationconstrainingElementList read _GetconstrainingElementcollaborationconstrainingElement;
    property representedClassifier: TUMLClassifier read _GetrepresentedClassifier write _SetrepresentedClassifier;
    property representedOperation: TUMLOperation read _GetrepresentedOperation write _SetrepresentedOperation;
  end;

  TUMLPackage = class(TUMLGeneralizableElement)
  private
    function _GetelementImport_: TUMLElementImportList;
  protected
  public
    property M_elementImport_: TUMLElementImportList read _GetelementImport_;
    property elementImport_: TUMLElementImportList read _GetelementImport_;
  end;

  TUMLStereotype = class(TUMLGeneralizableElement)
  private
    function _Get_M_icon: TBAString;
    function _Geticon: String;
    procedure _Seticon(const NewValue: String);
    function _Get_M_baseClass: TBAString;
    function _GetbaseClass: String;
    procedure _SetbaseClass(const NewValue: String);
    function _GetstereotypeConstraint: TUMLConstraintList;
    function _GetextendedElement: TUMLModelElementList;
    function _GetrequiredTag: TUMLTaggedValueList;
  protected
  public
    class function FindStereotypeByName(aName: String; aSystem: TBoldSystem): TUMLStereotype;
    property M_icon: TBAString read _Get_M_icon;
    property M_baseClass: TBAString read _Get_M_baseClass;
    property M_stereotypeConstraint: TUMLConstraintList read _GetstereotypeConstraint;
    property M_extendedElement: TUMLModelElementList read _GetextendedElement;
    property M_requiredTag: TUMLTaggedValueList read _GetrequiredTag;
    property icon: String read _Geticon write _Seticon;
    property baseClass: String read _GetbaseClass write _SetbaseClass;
    property stereotypeConstraint: TUMLConstraintList read _GetstereotypeConstraint;
    property extendedElement: TUMLModelElementList read _GetextendedElement;
    property requiredTag: TUMLTaggedValueList read _GetrequiredTag;
  end;

  TUMLAbstraction = class(TUMLDependency)
  private
    function _Get_M_mapping: TBAString;
    function _Getmapping: String;
    procedure _Setmapping(const NewValue: String);
  protected
  public
    property M_mapping: TBAString read _Get_M_mapping;
    property mapping: String read _Getmapping write _Setmapping;
  end;

  TUMLBinding = class(TUMLDependency)
  private
    function _Getargument: TUMLModelElementList;
  protected
  public
    property M_argument: TUMLModelElementList read _Getargument;
    property argument: TUMLModelElementList read _Getargument;
  end;

  TUMLPermission = class(TUMLDependency)
  private
  protected
  public
  end;

  TUMLUsage = class(TUMLDependency)
  private
  protected
  public
  end;

  _TDebuggerWorkAroundClass99 = class(TInterfacedObject, IUnknown) end;
  {$EXTERNALSYM _TDebuggerWorkAroundClass99}

  TUMLCompositeState = class(TUMLState)
  private
    function _Get_M_isConcurrent: TBABoolean;
    function _GetisConcurrent: boolean;
    procedure _SetisConcurrent(const NewValue: boolean);
    function _Getsubvertex: TUMLStateVertexList;
  protected
  public
    property M_isConcurrent: TBABoolean read _Get_M_isConcurrent;
    property M_subvertex: TUMLStateVertexList read _Getsubvertex;
    property isConcurrent: boolean read _GetisConcurrent write _SetisConcurrent;
    property subvertex: TUMLStateVertexList read _Getsubvertex;
  end;

  TUMLFinalState = class(TUMLState)
  private
  protected
  public
  end;

  TUMLSimpleState = class(TUMLState)
  private
  protected
  public
  end;

  TUMLAssociationRole = class(TUMLAssociation)
  private
    function _Get_M_multiplicity: TBAString;
    function _Getmultiplicity: String;
    procedure _Setmultiplicity(const NewValue: String);
    function _Getbase: TUMLAssociation;
    function _Get_M_base: TBoldObjectReference;
    procedure _Setbase(const value: TUMLAssociation);
    function _Getmessage_: TUMLMessageList;
  protected
  public
    property M_multiplicity: TBAString read _Get_M_multiplicity;
    property M_base: TBoldObjectReference read _Get_M_base;
    property M_message_: TUMLMessageList read _Getmessage_;
    property multiplicity: String read _Getmultiplicity write _Setmultiplicity;
    property base: TUMLAssociation read _Getbase write _Setbase;
    property message_: TUMLMessageList read _Getmessage_;
  end;

  TUMLActor = class(TUMLClassifier)
  private
  protected
  public
  end;

  TUMLClass = class(TUMLClassifier)
  private
    function _Get_M_isActive: TBABoolean;
    function _GetisActive: boolean;
    procedure _SetisActive(const NewValue: boolean);
    function _Get_M_isAssociationClass: TBABoolean;
    function _GetisAssociationClass: boolean;
    function _Getassociation: TUMLAssociation;
    function _Get_M_association: TBoldObjectReference;
    procedure _Setassociation(const value: TUMLAssociation);
  protected
  public
    function ExpandedExpressionName: String; override;
    property M_isActive: TBABoolean read _Get_M_isActive;
    property M_isAssociationClass: TBABoolean read _Get_M_isAssociationClass;
    property M_association: TBoldObjectReference read _Get_M_association;
    property isActive: boolean read _GetisActive write _SetisActive;
    property isAssociationClass: boolean read _GetisAssociationClass;
    property association: TUMLAssociation read _Getassociation write _Setassociation;
  end;

  TUMLClassifierInState = class(TUMLClassifier)
  private
    function _Gettype_: TUMLClassifier;
    function _Get_M_type_: TBoldObjectReference;
    procedure _Settype_(const value: TUMLClassifier);
    function _GetinState: TUMLStateList;
    function _GetclassifierInStateinState: TclassifierInStateinStateList;
  protected
  public
    property M_type_: TBoldObjectReference read _Get_M_type_;
    property M_inState: TUMLStateList read _GetinState;
    property M_classifierInStateinState: TclassifierInStateinStateList read _GetclassifierInStateinState;
    property type_: TUMLClassifier read _Gettype_ write _Settype_;
    property inState: TUMLStateList read _GetinState;
    property classifierInStateinState: TclassifierInStateinStateList read _GetclassifierInStateinState;
  end;

  TUMLClassifierRole = class(TUMLClassifier)
  private
    function _Get_M_multiplicity: TBAString;
    function _Getmultiplicity: String;
    procedure _Setmultiplicity(const NewValue: String);
    function _GetavailableFeature: TUMLFeatureList;
    function _GetclassifierRole_availableFeature: TclassifierRole_availableFeatureList;
    function _GetavailableContents: TUMLModelElementList;
    function _GetavailableContentsclassifierRoleavailableContents: TclassifierRoleavailableContentsList;
    function _Getclassifier: TUMLClassifierList;
    function _GetclassifierclassifierclassifierRole_: TclassifierclassifierRole_List;
    function _Getmessage1: TUMLMessageList;
    function _Getmessage2: TUMLMessageList;
  protected
  public
    property M_multiplicity: TBAString read _Get_M_multiplicity;
    property M_availableFeature: TUMLFeatureList read _GetavailableFeature;
    property M_classifierRole_availableFeature: TclassifierRole_availableFeatureList read _GetclassifierRole_availableFeature;
    property M_availableContents: TUMLModelElementList read _GetavailableContents;
    property M_availableContentsclassifierRoleavailableContents: TclassifierRoleavailableContentsList read _GetavailableContentsclassifierRoleavailableContents;
    property M_classifier: TUMLClassifierList read _Getclassifier;
    property M_classifierclassifierclassifierRole_: TclassifierclassifierRole_List read _GetclassifierclassifierclassifierRole_;
    property M_message1: TUMLMessageList read _Getmessage1;
    property M_message2: TUMLMessageList read _Getmessage2;
    property multiplicity: String read _Getmultiplicity write _Setmultiplicity;
    property availableFeature: TUMLFeatureList read _GetavailableFeature;
    property classifierRole_availableFeature: TclassifierRole_availableFeatureList read _GetclassifierRole_availableFeature;
    property availableContents: TUMLModelElementList read _GetavailableContents;
    property availableContentsclassifierRoleavailableContents: TclassifierRoleavailableContentsList read _GetavailableContentsclassifierRoleavailableContents;
    property classifier: TUMLClassifierList read _Getclassifier;
    property classifierclassifierclassifierRole_: TclassifierclassifierRole_List read _GetclassifierclassifierclassifierRole_;
    property message1: TUMLMessageList read _Getmessage1;
    property message2: TUMLMessageList read _Getmessage2;
  end;

  TUMLComponent = class(TUMLClassifier)
  private
    function _GetimplementationLocation: TUMLElementResidenceList;
    function _GetdeploymentLocation: TUMLNodeList;
    function _GetdeploymentLocationresident: TdeploymentLocationresidentList;
  protected
  public
    property M_implementationLocation: TUMLElementResidenceList read _GetimplementationLocation;
    property M_deploymentLocation: TUMLNodeList read _GetdeploymentLocation;
    property M_deploymentLocationresident: TdeploymentLocationresidentList read _GetdeploymentLocationresident;
    property implementationLocation: TUMLElementResidenceList read _GetimplementationLocation;
    property deploymentLocation: TUMLNodeList read _GetdeploymentLocation;
    property deploymentLocationresident: TdeploymentLocationresidentList read _GetdeploymentLocationresident;
  end;

  TUMLDataType = class(TUMLClassifier)
  private
  protected
  public
  end;

  TUMLInterface = class(TUMLClassifier)
  private
  protected
  public
  end;

  TUMLNode = class(TUMLClassifier)
  private
    function _Getresident_: TUMLComponentList;
    function _GetdeploymentLocationresident: TdeploymentLocationresidentList;
  protected
  public
    property M_resident_: TUMLComponentList read _Getresident_;
    property M_deploymentLocationresident: TdeploymentLocationresidentList read _GetdeploymentLocationresident;
    property resident_: TUMLComponentList read _Getresident_;
    property deploymentLocationresident: TdeploymentLocationresidentList read _GetdeploymentLocationresident;
  end;

  TUMLSignal = class(TUMLClassifier)
  private
    function _GetsendAction: TUMLSendActionList;
    function _Getoccurrences: TUMLSignalEventList;
    function _Getreception: TUMLReceptionList;
    function _Getcontext: TUMLBehavioralFeatureList;
    function _GetcontextraisedSignal: TcontextraisedSignalList;
  protected
  public
    property M_sendAction: TUMLSendActionList read _GetsendAction;
    property M_occurrences: TUMLSignalEventList read _Getoccurrences;
    property M_reception: TUMLReceptionList read _Getreception;
    property M_context: TUMLBehavioralFeatureList read _Getcontext;
    property M_contextraisedSignal: TcontextraisedSignalList read _GetcontextraisedSignal;
    property sendAction: TUMLSendActionList read _GetsendAction;
    property occurrences: TUMLSignalEventList read _Getoccurrences;
    property reception: TUMLReceptionList read _Getreception;
    property context: TUMLBehavioralFeatureList read _Getcontext;
    property contextraisedSignal: TcontextraisedSignalList read _GetcontextraisedSignal;
  end;

  TUMLUseCase = class(TUMLClassifier)
  private
    function _Getinclude: TUMLIncludeList;
    function _GetextensionPoint: TUMLExtensionPointList;
    function _Getextend2: TUMLExtendList;
    function _Getextend: TUMLExtendList;
    function _Getinclude2: TUMLIncludeList;
  protected
  public
    property M_include: TUMLIncludeList read _Getinclude;
    property M_extensionPoint: TUMLExtensionPointList read _GetextensionPoint;
    property M_extend2: TUMLExtendList read _Getextend2;
    property M_extend: TUMLExtendList read _Getextend;
    property M_include2: TUMLIncludeList read _Getinclude2;
    property include: TUMLIncludeList read _Getinclude;
    property extensionPoint: TUMLExtensionPointList read _GetextensionPoint;
    property extend2: TUMLExtendList read _Getextend2;
    property extend: TUMLExtendList read _Getextend;
    property include2: TUMLIncludeList read _Getinclude2;
  end;

  TUMLModel = class(TUMLPackage)
  private
    function _GetValidator: TValidator;
    function _Get_M_Validator: TBoldObjectReference;
    procedure _SetValidator(const value: TValidator);
  protected
  public
    procedure Clear;
    procedure CompleteCreate; override;
    property M_Validator: TBoldObjectReference read _Get_M_Validator;
    property Validator: TValidator read _GetValidator write _SetValidator;
  end;

  TUMLSubsystem = class(TUMLPackage)
  private
    function _Get_M_isInstantiable: TBABoolean;
    function _GetisInstantiable: boolean;
    procedure _SetisInstantiable(const NewValue: boolean);
  protected
  public
    property M_isInstantiable: TBABoolean read _Get_M_isInstantiable;
    property isInstantiable: boolean read _GetisInstantiable write _SetisInstantiable;
  end;

  TUMLSubmachineState = class(TUMLCompositeState)
  private
    function _Getsubmachine: TUMLStateMachine;
    function _Get_M_submachine: TBoldObjectReference;
    procedure _Setsubmachine(const value: TUMLStateMachine);
  protected
  public
    property M_submachine: TBoldObjectReference read _Get_M_submachine;
    property submachine: TUMLStateMachine read _Getsubmachine write _Setsubmachine;
  end;

  TUMLActionState = class(TUMLSimpleState)
  private
    function _Get_M_isDynamic: TBABoolean;
    function _GetisDynamic: boolean;
    procedure _SetisDynamic(const NewValue: boolean);
    function _Get_M_dynamicArguments: TBAString;
    function _GetdynamicArguments: String;
    procedure _SetdynamicArguments(const NewValue: String);
    function _Get_M_dynamicMultiplicity: TBAString;
    function _GetdynamicMultiplicity: String;
    procedure _SetdynamicMultiplicity(const NewValue: String);
  protected
  public
    property M_isDynamic: TBABoolean read _Get_M_isDynamic;
    property M_dynamicArguments: TBAString read _Get_M_dynamicArguments;
    property M_dynamicMultiplicity: TBAString read _Get_M_dynamicMultiplicity;
    property isDynamic: boolean read _GetisDynamic write _SetisDynamic;
    property dynamicArguments: String read _GetdynamicArguments write _SetdynamicArguments;
    property dynamicMultiplicity: String read _GetdynamicMultiplicity write _SetdynamicMultiplicity;
  end;

  TUMLObjectFlowState = class(TUMLSimpleState)
  private
    function _Get_M_isSynch: TBABoolean;
    function _GetisSynch: boolean;
    procedure _SetisSynch(const NewValue: boolean);
    function _Gettype_: TUMLClassifier;
    function _Get_M_type_: TBoldObjectReference;
    procedure _Settype_(const value: TUMLClassifier);
    function _Getparameter: TUMLParameterList;
    function _Getparameterstate: TparameterstateList;
  protected
  public
    property M_isSynch: TBABoolean read _Get_M_isSynch;
    property M_type_: TBoldObjectReference read _Get_M_type_;
    property M_parameter: TUMLParameterList read _Getparameter;
    property M_parameterstate: TparameterstateList read _Getparameterstate;
    property isSynch: boolean read _GetisSynch write _SetisSynch;
    property type_: TUMLClassifier read _Gettype_ write _Settype_;
    property parameter: TUMLParameterList read _Getparameter;
    property parameterstate: TparameterstateList read _Getparameterstate;
  end;

  TUMLException = class(TUMLSignal)
  private
  protected
  public
  end;

  TUMLSubactivityState = class(TUMLSubmachineState)
  private
    function _Get_M_isDynamic: TBABoolean;
    function _GetisDynamic: boolean;
    procedure _SetisDynamic(const NewValue: boolean);
    function _Get_M_dynamicArguments: TBAString;
    function _GetdynamicArguments: String;
    procedure _SetdynamicArguments(const NewValue: String);
    function _Get_M_dynamicMultiplicity: TBAString;
    function _GetdynamicMultiplicity: String;
    procedure _SetdynamicMultiplicity(const NewValue: String);
    property M_dynamicMultiplicity: TBAString read _Get_M_dynamicMultiplicity;
    {$HINTS OFF}
    property dynamicMultiplicity: String read _GetdynamicMultiplicity write _SetdynamicMultiplicity;
    {$HINTS ON}
  protected
  public
    property M_isDynamic: TBABoolean read _Get_M_isDynamic;
    property M_dynamicArguments: TBAString read _Get_M_dynamicArguments;
    property isDynamic: boolean read _GetisDynamic write _SetisDynamic;
    property dynamicArguments: String read _GetdynamicArguments write _SetdynamicArguments;
  end;

  TUMLCallState = class(TUMLActionState)
  private
  protected
  public
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLModelRootListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLModelRoot;
    property Current: TUMLModelRoot read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLModelRootList = class(TBoldObjectList)
  protected
    function GetBoldObject(index: Integer): TUMLModelRoot;
    procedure SetBoldObject(index: Integer; NewObject: TUMLModelRoot);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLModelRootListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLModelRoot): Boolean;
    function IndexOf(anObject: TUMLModelRoot): Integer;
    procedure Add(NewObject: TUMLModelRoot);
    function AddNew: TUMLModelRoot;
    procedure Insert(index: Integer; NewObject: TUMLModelRoot);
    property BoldObjects[index: Integer]: TUMLModelRoot read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLElementListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLElement;
    property Current: TUMLElement read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLElementList = class(TUMLModelRootList)
  protected
    function GetBoldObject(index: Integer): TUMLElement;
    procedure SetBoldObject(index: Integer; NewObject: TUMLElement);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLElementListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLElement): Boolean;
    function IndexOf(anObject: TUMLElement): Integer;
    procedure Add(NewObject: TUMLElement);
    function AddNew: TUMLElement;
    procedure Insert(index: Integer; NewObject: TUMLElement);
    property BoldObjects[index: Integer]: TUMLElement read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLElementImportListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLElementImport;
    property Current: TUMLElementImport read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLElementImportList = class(TUMLModelRootList)
  protected
    function GetBoldObject(index: Integer): TUMLElementImport;
    procedure SetBoldObject(index: Integer; NewObject: TUMLElementImport);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLElementImportListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLElementImport): Boolean;
    function IndexOf(anObject: TUMLElementImport): Integer;
    procedure Add(NewObject: TUMLElementImport);
    function AddNew: TUMLElementImport;
    procedure Insert(index: Integer; NewObject: TUMLElementImport);
    property BoldObjects[index: Integer]: TUMLElementImport read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLElementResidenceListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLElementResidence;
    property Current: TUMLElementResidence read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLElementResidenceList = class(TUMLModelRootList)
  protected
    function GetBoldObject(index: Integer): TUMLElementResidence;
    procedure SetBoldObject(index: Integer; NewObject: TUMLElementResidence);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLElementResidenceListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLElementResidence): Boolean;
    function IndexOf(anObject: TUMLElementResidence): Integer;
    procedure Add(NewObject: TUMLElementResidence);
    function AddNew: TUMLElementResidence;
    procedure Insert(index: Integer; NewObject: TUMLElementResidence);
    property BoldObjects[index: Integer]: TUMLElementResidence read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLPresentationElementListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLPresentationElement;
    property Current: TUMLPresentationElement read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLPresentationElementList = class(TUMLModelRootList)
  protected
    function GetBoldObject(index: Integer): TUMLPresentationElement;
    procedure SetBoldObject(index: Integer; NewObject: TUMLPresentationElement);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLPresentationElementListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLPresentationElement): Boolean;
    function IndexOf(anObject: TUMLPresentationElement): Integer;
    procedure Add(NewObject: TUMLPresentationElement);
    function AddNew: TUMLPresentationElement;
    procedure Insert(index: Integer; NewObject: TUMLPresentationElement);
    property BoldObjects[index: Integer]: TUMLPresentationElement read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLTemplateParameterListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLTemplateParameter;
    property Current: TUMLTemplateParameter read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLTemplateParameterList = class(TUMLModelRootList)
  protected
    function GetBoldObject(index: Integer): TUMLTemplateParameter;
    procedure SetBoldObject(index: Integer; NewObject: TUMLTemplateParameter);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLTemplateParameterListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLTemplateParameter): Boolean;
    function IndexOf(anObject: TUMLTemplateParameter): Integer;
    procedure Add(NewObject: TUMLTemplateParameter);
    function AddNew: TUMLTemplateParameter;
    procedure Insert(index: Integer; NewObject: TUMLTemplateParameter);
    property BoldObjects[index: Integer]: TUMLTemplateParameter read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TValidatorListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TValidator;
    property Current: TValidator read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TValidatorList = class(TUMLModelRootList)
  protected
    function GetBoldObject(index: Integer): TValidator;
    procedure SetBoldObject(index: Integer; NewObject: TValidator);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TValidatorListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TValidator): Boolean;
    function IndexOf(anObject: TValidator): Integer;
    procedure Add(NewObject: TValidator);
    function AddNew: TValidator;
    procedure Insert(index: Integer; NewObject: TValidator);
    property BoldObjects[index: Integer]: TValidator read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TViolationListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TViolation;
    property Current: TViolation read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TViolationList = class(TUMLModelRootList)
  protected
    function GetBoldObject(index: Integer): TViolation;
    procedure SetBoldObject(index: Integer; NewObject: TViolation);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TViolationListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TViolation): Boolean;
    function IndexOf(anObject: TViolation): Integer;
    procedure Add(NewObject: TViolation);
    function AddNew: TViolation;
    procedure Insert(index: Integer; NewObject: TViolation);
    property BoldObjects[index: Integer]: TViolation read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  Targumentstimulus1ListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: Targumentstimulus1;
    property Current: Targumentstimulus1 read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  Targumentstimulus1List = class(TUMLModelRootList)
  protected
    function GetBoldObject(index: Integer): Targumentstimulus1;
    procedure SetBoldObject(index: Integer; NewObject: Targumentstimulus1);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: Targumentstimulus1ListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: Targumentstimulus1): Boolean;
    function IndexOf(anObject: Targumentstimulus1): Integer;
    procedure Add(NewObject: Targumentstimulus1);
    function AddNew: Targumentstimulus1;
    procedure Insert(index: Integer; NewObject: Targumentstimulus1);
    property BoldObjects[index: Integer]: Targumentstimulus1 read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TassociationEndRoleavailableQualifierListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TassociationEndRoleavailableQualifier;
    property Current: TassociationEndRoleavailableQualifier read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TassociationEndRoleavailableQualifierList = class(TUMLModelRootList)
  protected
    function GetBoldObject(index: Integer): TassociationEndRoleavailableQualifier;
    procedure SetBoldObject(index: Integer; NewObject: TassociationEndRoleavailableQualifier);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TassociationEndRoleavailableQualifierListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TassociationEndRoleavailableQualifier): Boolean;
    function IndexOf(anObject: TassociationEndRoleavailableQualifier): Integer;
    procedure Add(NewObject: TassociationEndRoleavailableQualifier);
    function AddNew: TassociationEndRoleavailableQualifier;
    procedure Insert(index: Integer; NewObject: TassociationEndRoleavailableQualifier);
    property BoldObjects[index: Integer]: TassociationEndRoleavailableQualifier read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TclassifierInStateinStateListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TclassifierInStateinState;
    property Current: TclassifierInStateinState read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TclassifierInStateinStateList = class(TUMLModelRootList)
  protected
    function GetBoldObject(index: Integer): TclassifierInStateinState;
    procedure SetBoldObject(index: Integer; NewObject: TclassifierInStateinState);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TclassifierInStateinStateListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TclassifierInStateinState): Boolean;
    function IndexOf(anObject: TclassifierInStateinState): Integer;
    procedure Add(NewObject: TclassifierInStateinState);
    function AddNew: TclassifierInStateinState;
    procedure Insert(index: Integer; NewObject: TclassifierInStateinState);
    property BoldObjects[index: Integer]: TclassifierInStateinState read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TclassifierRole_availableFeatureListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TclassifierRole_availableFeature;
    property Current: TclassifierRole_availableFeature read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TclassifierRole_availableFeatureList = class(TUMLModelRootList)
  protected
    function GetBoldObject(index: Integer): TclassifierRole_availableFeature;
    procedure SetBoldObject(index: Integer; NewObject: TclassifierRole_availableFeature);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TclassifierRole_availableFeatureListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TclassifierRole_availableFeature): Boolean;
    function IndexOf(anObject: TclassifierRole_availableFeature): Integer;
    procedure Add(NewObject: TclassifierRole_availableFeature);
    function AddNew: TclassifierRole_availableFeature;
    procedure Insert(index: Integer; NewObject: TclassifierRole_availableFeature);
    property BoldObjects[index: Integer]: TclassifierRole_availableFeature read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TclassifierRoleavailableContentsListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TclassifierRoleavailableContents;
    property Current: TclassifierRoleavailableContents read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TclassifierRoleavailableContentsList = class(TUMLModelRootList)
  protected
    function GetBoldObject(index: Integer): TclassifierRoleavailableContents;
    procedure SetBoldObject(index: Integer; NewObject: TclassifierRoleavailableContents);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TclassifierRoleavailableContentsListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TclassifierRoleavailableContents): Boolean;
    function IndexOf(anObject: TclassifierRoleavailableContents): Integer;
    procedure Add(NewObject: TclassifierRoleavailableContents);
    function AddNew: TclassifierRoleavailableContents;
    procedure Insert(index: Integer; NewObject: TclassifierRoleavailableContents);
    property BoldObjects[index: Integer]: TclassifierRoleavailableContents read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TclassifierclassifierRole_ListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TclassifierclassifierRole_;
    property Current: TclassifierclassifierRole_ read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TclassifierclassifierRole_List = class(TUMLModelRootList)
  protected
    function GetBoldObject(index: Integer): TclassifierclassifierRole_;
    procedure SetBoldObject(index: Integer; NewObject: TclassifierclassifierRole_);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TclassifierclassifierRole_ListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TclassifierclassifierRole_): Boolean;
    function IndexOf(anObject: TclassifierclassifierRole_): Integer;
    procedure Add(NewObject: TclassifierclassifierRole_);
    function AddNew: TclassifierclassifierRole_;
    procedure Insert(index: Integer; NewObject: TclassifierclassifierRole_);
    property BoldObjects[index: Integer]: TclassifierclassifierRole_ read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TclientclientDependencyListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TclientclientDependency;
    property Current: TclientclientDependency read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TclientclientDependencyList = class(TUMLModelRootList)
  protected
    function GetBoldObject(index: Integer): TclientclientDependency;
    procedure SetBoldObject(index: Integer; NewObject: TclientclientDependency);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TclientclientDependencyListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TclientclientDependency): Boolean;
    function IndexOf(anObject: TclientclientDependency): Integer;
    procedure Add(NewObject: TclientclientDependency);
    function AddNew: TclientclientDependency;
    procedure Insert(index: Integer; NewObject: TclientclientDependency);
    property BoldObjects[index: Integer]: TclientclientDependency read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TcollaborationconstrainingElementListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TcollaborationconstrainingElement;
    property Current: TcollaborationconstrainingElement read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TcollaborationconstrainingElementList = class(TUMLModelRootList)
  protected
    function GetBoldObject(index: Integer): TcollaborationconstrainingElement;
    procedure SetBoldObject(index: Integer; NewObject: TcollaborationconstrainingElement);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TcollaborationconstrainingElementListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TcollaborationconstrainingElement): Boolean;
    function IndexOf(anObject: TcollaborationconstrainingElement): Integer;
    procedure Add(NewObject: TcollaborationconstrainingElement);
    function AddNew: TcollaborationconstrainingElement;
    procedure Insert(index: Integer; NewObject: TcollaborationconstrainingElement);
    property BoldObjects[index: Integer]: TcollaborationconstrainingElement read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TcommentannotatedElementListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TcommentannotatedElement;
    property Current: TcommentannotatedElement read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TcommentannotatedElementList = class(TUMLModelRootList)
  protected
    function GetBoldObject(index: Integer): TcommentannotatedElement;
    procedure SetBoldObject(index: Integer; NewObject: TcommentannotatedElement);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TcommentannotatedElementListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TcommentannotatedElement): Boolean;
    function IndexOf(anObject: TcommentannotatedElement): Integer;
    procedure Add(NewObject: TcommentannotatedElement);
    function AddNew: TcommentannotatedElement;
    procedure Insert(index: Integer; NewObject: TcommentannotatedElement);
    property BoldObjects[index: Integer]: TcommentannotatedElement read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TconstrainedElementconstraintListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TconstrainedElementconstraint;
    property Current: TconstrainedElementconstraint read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TconstrainedElementconstraintList = class(TUMLModelRootList)
  protected
    function GetBoldObject(index: Integer): TconstrainedElementconstraint;
    procedure SetBoldObject(index: Integer; NewObject: TconstrainedElementconstraint);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TconstrainedElementconstraintListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TconstrainedElementconstraint): Boolean;
    function IndexOf(anObject: TconstrainedElementconstraint): Integer;
    procedure Add(NewObject: TconstrainedElementconstraint);
    function AddNew: TconstrainedElementconstraint;
    procedure Insert(index: Integer; NewObject: TconstrainedElementconstraint);
    property BoldObjects[index: Integer]: TconstrainedElementconstraint read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TcontentspartitionListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: Tcontentspartition;
    property Current: Tcontentspartition read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TcontentspartitionList = class(TUMLModelRootList)
  protected
    function GetBoldObject(index: Integer): Tcontentspartition;
    procedure SetBoldObject(index: Integer; NewObject: Tcontentspartition);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TcontentspartitionListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: Tcontentspartition): Boolean;
    function IndexOf(anObject: Tcontentspartition): Integer;
    procedure Add(NewObject: Tcontentspartition);
    function AddNew: Tcontentspartition;
    procedure Insert(index: Integer; NewObject: Tcontentspartition);
    property BoldObjects[index: Integer]: Tcontentspartition read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TcontextraisedSignalListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TcontextraisedSignal;
    property Current: TcontextraisedSignal read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TcontextraisedSignalList = class(TUMLModelRootList)
  protected
    function GetBoldObject(index: Integer): TcontextraisedSignal;
    procedure SetBoldObject(index: Integer; NewObject: TcontextraisedSignal);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TcontextraisedSignalListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TcontextraisedSignal): Boolean;
    function IndexOf(anObject: TcontextraisedSignal): Integer;
    procedure Add(NewObject: TcontextraisedSignal);
    function AddNew: TcontextraisedSignal;
    procedure Insert(index: Integer; NewObject: TcontextraisedSignal);
    property BoldObjects[index: Integer]: TcontextraisedSignal read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TdeploymentLocationresidentListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TdeploymentLocationresident;
    property Current: TdeploymentLocationresident read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TdeploymentLocationresidentList = class(TUMLModelRootList)
  protected
    function GetBoldObject(index: Integer): TdeploymentLocationresident;
    procedure SetBoldObject(index: Integer; NewObject: TdeploymentLocationresident);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TdeploymentLocationresidentListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TdeploymentLocationresident): Boolean;
    function IndexOf(anObject: TdeploymentLocationresident): Integer;
    procedure Add(NewObject: TdeploymentLocationresident);
    function AddNew: TdeploymentLocationresident;
    procedure Insert(index: Integer; NewObject: TdeploymentLocationresident);
    property BoldObjects[index: Integer]: TdeploymentLocationresident read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TextensionPointextendListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TextensionPointextend;
    property Current: TextensionPointextend read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TextensionPointextendList = class(TUMLModelRootList)
  protected
    function GetBoldObject(index: Integer): TextensionPointextend;
    procedure SetBoldObject(index: Integer; NewObject: TextensionPointextend);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TextensionPointextendListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TextensionPointextend): Boolean;
    function IndexOf(anObject: TextensionPointextend): Integer;
    procedure Add(NewObject: TextensionPointextend);
    function AddNew: TextensionPointextend;
    procedure Insert(index: Integer; NewObject: TextensionPointextend);
    property BoldObjects[index: Integer]: TextensionPointextend read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TinstanceclassifierListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: Tinstanceclassifier;
    property Current: Tinstanceclassifier read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TinstanceclassifierList = class(TUMLModelRootList)
  protected
    function GetBoldObject(index: Integer): Tinstanceclassifier;
    procedure SetBoldObject(index: Integer; NewObject: Tinstanceclassifier);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TinstanceclassifierListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: Tinstanceclassifier): Boolean;
    function IndexOf(anObject: Tinstanceclassifier): Integer;
    procedure Add(NewObject: Tinstanceclassifier);
    function AddNew: Tinstanceclassifier;
    procedure Insert(index: Integer; NewObject: Tinstanceclassifier);
    property BoldObjects[index: Integer]: Tinstanceclassifier read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TparameterstateListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: Tparameterstate;
    property Current: Tparameterstate read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TparameterstateList = class(TUMLModelRootList)
  protected
    function GetBoldObject(index: Integer): Tparameterstate;
    procedure SetBoldObject(index: Integer; NewObject: Tparameterstate);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TparameterstateListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: Tparameterstate): Boolean;
    function IndexOf(anObject: Tparameterstate): Integer;
    procedure Add(NewObject: Tparameterstate);
    function AddNew: Tparameterstate;
    procedure Insert(index: Integer; NewObject: Tparameterstate);
    property BoldObjects[index: Integer]: Tparameterstate read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TparticipantspecificationListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: Tparticipantspecification;
    property Current: Tparticipantspecification read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TparticipantspecificationList = class(TUMLModelRootList)
  protected
    function GetBoldObject(index: Integer): Tparticipantspecification;
    procedure SetBoldObject(index: Integer; NewObject: Tparticipantspecification);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TparticipantspecificationListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: Tparticipantspecification): Boolean;
    function IndexOf(anObject: Tparticipantspecification): Integer;
    procedure Add(NewObject: Tparticipantspecification);
    function AddNew: Tparticipantspecification;
    procedure Insert(index: Integer; NewObject: Tparticipantspecification);
    property BoldObjects[index: Integer]: Tparticipantspecification read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  Tpredecessormessage3ListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: Tpredecessormessage3;
    property Current: Tpredecessormessage3 read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  Tpredecessormessage3List = class(TUMLModelRootList)
  protected
    function GetBoldObject(index: Integer): Tpredecessormessage3;
    procedure SetBoldObject(index: Integer; NewObject: Tpredecessormessage3);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: Tpredecessormessage3ListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: Tpredecessormessage3): Boolean;
    function IndexOf(anObject: Tpredecessormessage3): Integer;
    procedure Add(NewObject: Tpredecessormessage3);
    function AddNew: Tpredecessormessage3;
    procedure Insert(index: Integer; NewObject: Tpredecessormessage3);
    property BoldObjects[index: Integer]: Tpredecessormessage3 read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TpresentationsubjectListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: Tpresentationsubject;
    property Current: Tpresentationsubject read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TpresentationsubjectList = class(TUMLModelRootList)
  protected
    function GetBoldObject(index: Integer): Tpresentationsubject;
    procedure SetBoldObject(index: Integer; NewObject: Tpresentationsubject);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TpresentationsubjectListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: Tpresentationsubject): Boolean;
    function IndexOf(anObject: Tpresentationsubject): Integer;
    procedure Add(NewObject: Tpresentationsubject);
    function AddNew: Tpresentationsubject;
    procedure Insert(index: Integer; NewObject: Tpresentationsubject);
    property BoldObjects[index: Integer]: Tpresentationsubject read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TsourceFlowsourceListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TsourceFlowsource;
    property Current: TsourceFlowsource read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TsourceFlowsourceList = class(TUMLModelRootList)
  protected
    function GetBoldObject(index: Integer): TsourceFlowsource;
    procedure SetBoldObject(index: Integer; NewObject: TsourceFlowsource);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TsourceFlowsourceListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TsourceFlowsource): Boolean;
    function IndexOf(anObject: TsourceFlowsource): Integer;
    procedure Add(NewObject: TsourceFlowsource);
    function AddNew: TsourceFlowsource;
    procedure Insert(index: Integer; NewObject: TsourceFlowsource);
    property BoldObjects[index: Integer]: TsourceFlowsource read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TstatedeferrableEventListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TstatedeferrableEvent;
    property Current: TstatedeferrableEvent read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TstatedeferrableEventList = class(TUMLModelRootList)
  protected
    function GetBoldObject(index: Integer): TstatedeferrableEvent;
    procedure SetBoldObject(index: Integer; NewObject: TstatedeferrableEvent);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TstatedeferrableEventListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TstatedeferrableEvent): Boolean;
    function IndexOf(anObject: TstatedeferrableEvent): Integer;
    procedure Add(NewObject: TstatedeferrableEvent);
    function AddNew: TstatedeferrableEvent;
    procedure Insert(index: Integer; NewObject: TstatedeferrableEvent);
    property BoldObjects[index: Integer]: TstatedeferrableEvent read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TsuppliersupplierDependencyListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TsuppliersupplierDependency;
    property Current: TsuppliersupplierDependency read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TsuppliersupplierDependencyList = class(TUMLModelRootList)
  protected
    function GetBoldObject(index: Integer): TsuppliersupplierDependency;
    procedure SetBoldObject(index: Integer; NewObject: TsuppliersupplierDependency);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TsuppliersupplierDependencyListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TsuppliersupplierDependency): Boolean;
    function IndexOf(anObject: TsuppliersupplierDependency): Integer;
    procedure Add(NewObject: TsuppliersupplierDependency);
    function AddNew: TsuppliersupplierDependency;
    procedure Insert(index: Integer; NewObject: TsuppliersupplierDependency);
    property BoldObjects[index: Integer]: TsuppliersupplierDependency read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TtargetFlowtargetListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TtargetFlowtarget;
    property Current: TtargetFlowtarget read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TtargetFlowtargetList = class(TUMLModelRootList)
  protected
    function GetBoldObject(index: Integer): TtargetFlowtarget;
    procedure SetBoldObject(index: Integer; NewObject: TtargetFlowtarget);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TtargetFlowtargetListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TtargetFlowtarget): Boolean;
    function IndexOf(anObject: TtargetFlowtarget): Integer;
    procedure Add(NewObject: TtargetFlowtarget);
    function AddNew: TtargetFlowtarget;
    procedure Insert(index: Integer; NewObject: TtargetFlowtarget);
    property BoldObjects[index: Integer]: TtargetFlowtarget read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLModelElementListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLModelElement;
    property Current: TUMLModelElement read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLModelElementList = class(TUMLElementList)
  protected
    function GetBoldObject(index: Integer): TUMLModelElement;
    procedure SetBoldObject(index: Integer; NewObject: TUMLModelElement);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLModelElementListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLModelElement): Boolean;
    function IndexOf(anObject: TUMLModelElement): Integer;
    procedure Add(NewObject: TUMLModelElement);
    function AddNew: TUMLModelElement;
    procedure Insert(index: Integer; NewObject: TUMLModelElement);
    property BoldObjects[index: Integer]: TUMLModelElement read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLActionListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLAction;
    property Current: TUMLAction read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLActionList = class(TUMLModelElementList)
  protected
    function GetBoldObject(index: Integer): TUMLAction;
    procedure SetBoldObject(index: Integer; NewObject: TUMLAction);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLActionListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLAction): Boolean;
    function IndexOf(anObject: TUMLAction): Integer;
    procedure Add(NewObject: TUMLAction);
    function AddNew: TUMLAction;
    procedure Insert(index: Integer; NewObject: TUMLAction);
    property BoldObjects[index: Integer]: TUMLAction read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLArgumentListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLArgument;
    property Current: TUMLArgument read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLArgumentList = class(TUMLModelElementList)
  protected
    function GetBoldObject(index: Integer): TUMLArgument;
    procedure SetBoldObject(index: Integer; NewObject: TUMLArgument);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLArgumentListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLArgument): Boolean;
    function IndexOf(anObject: TUMLArgument): Integer;
    procedure Add(NewObject: TUMLArgument);
    function AddNew: TUMLArgument;
    procedure Insert(index: Integer; NewObject: TUMLArgument);
    property BoldObjects[index: Integer]: TUMLArgument read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLAssociationEndListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLAssociationEnd;
    property Current: TUMLAssociationEnd read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLAssociationEndList = class(TUMLModelElementList)
  protected
    function GetBoldObject(index: Integer): TUMLAssociationEnd;
    procedure SetBoldObject(index: Integer; NewObject: TUMLAssociationEnd);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLAssociationEndListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLAssociationEnd): Boolean;
    function IndexOf(anObject: TUMLAssociationEnd): Integer;
    procedure Add(NewObject: TUMLAssociationEnd);
    function AddNew: TUMLAssociationEnd;
    procedure Insert(index: Integer; NewObject: TUMLAssociationEnd);
    property BoldObjects[index: Integer]: TUMLAssociationEnd read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLAttributeLinkListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLAttributeLink;
    property Current: TUMLAttributeLink read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLAttributeLinkList = class(TUMLModelElementList)
  protected
    function GetBoldObject(index: Integer): TUMLAttributeLink;
    procedure SetBoldObject(index: Integer; NewObject: TUMLAttributeLink);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLAttributeLinkListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLAttributeLink): Boolean;
    function IndexOf(anObject: TUMLAttributeLink): Integer;
    procedure Add(NewObject: TUMLAttributeLink);
    function AddNew: TUMLAttributeLink;
    procedure Insert(index: Integer; NewObject: TUMLAttributeLink);
    property BoldObjects[index: Integer]: TUMLAttributeLink read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLCommentListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLComment;
    property Current: TUMLComment read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLCommentList = class(TUMLModelElementList)
  protected
    function GetBoldObject(index: Integer): TUMLComment;
    procedure SetBoldObject(index: Integer; NewObject: TUMLComment);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLCommentListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLComment): Boolean;
    function IndexOf(anObject: TUMLComment): Integer;
    procedure Add(NewObject: TUMLComment);
    function AddNew: TUMLComment;
    procedure Insert(index: Integer; NewObject: TUMLComment);
    property BoldObjects[index: Integer]: TUMLComment read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLConstraintListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLConstraint;
    property Current: TUMLConstraint read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLConstraintList = class(TUMLModelElementList)
  protected
    function GetBoldObject(index: Integer): TUMLConstraint;
    procedure SetBoldObject(index: Integer; NewObject: TUMLConstraint);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLConstraintListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLConstraint): Boolean;
    function IndexOf(anObject: TUMLConstraint): Integer;
    procedure Add(NewObject: TUMLConstraint);
    function AddNew: TUMLConstraint;
    procedure Insert(index: Integer; NewObject: TUMLConstraint);
    property BoldObjects[index: Integer]: TUMLConstraint read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLEventListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLEvent;
    property Current: TUMLEvent read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLEventList = class(TUMLModelElementList)
  protected
    function GetBoldObject(index: Integer): TUMLEvent;
    procedure SetBoldObject(index: Integer; NewObject: TUMLEvent);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLEventListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLEvent): Boolean;
    function IndexOf(anObject: TUMLEvent): Integer;
    procedure Add(NewObject: TUMLEvent);
    function AddNew: TUMLEvent;
    procedure Insert(index: Integer; NewObject: TUMLEvent);
    property BoldObjects[index: Integer]: TUMLEvent read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLExtensionPointListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLExtensionPoint;
    property Current: TUMLExtensionPoint read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLExtensionPointList = class(TUMLModelElementList)
  protected
    function GetBoldObject(index: Integer): TUMLExtensionPoint;
    procedure SetBoldObject(index: Integer; NewObject: TUMLExtensionPoint);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLExtensionPointListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLExtensionPoint): Boolean;
    function IndexOf(anObject: TUMLExtensionPoint): Integer;
    procedure Add(NewObject: TUMLExtensionPoint);
    function AddNew: TUMLExtensionPoint;
    procedure Insert(index: Integer; NewObject: TUMLExtensionPoint);
    property BoldObjects[index: Integer]: TUMLExtensionPoint read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLFeatureListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLFeature;
    property Current: TUMLFeature read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLFeatureList = class(TUMLModelElementList)
  protected
    function GetBoldObject(index: Integer): TUMLFeature;
    procedure SetBoldObject(index: Integer; NewObject: TUMLFeature);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLFeatureListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLFeature): Boolean;
    function IndexOf(anObject: TUMLFeature): Integer;
    procedure Add(NewObject: TUMLFeature);
    function AddNew: TUMLFeature;
    procedure Insert(index: Integer; NewObject: TUMLFeature);
    property BoldObjects[index: Integer]: TUMLFeature read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLGuardListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLGuard;
    property Current: TUMLGuard read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLGuardList = class(TUMLModelElementList)
  protected
    function GetBoldObject(index: Integer): TUMLGuard;
    procedure SetBoldObject(index: Integer; NewObject: TUMLGuard);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLGuardListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLGuard): Boolean;
    function IndexOf(anObject: TUMLGuard): Integer;
    procedure Add(NewObject: TUMLGuard);
    function AddNew: TUMLGuard;
    procedure Insert(index: Integer; NewObject: TUMLGuard);
    property BoldObjects[index: Integer]: TUMLGuard read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLInstanceListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLInstance;
    property Current: TUMLInstance read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLInstanceList = class(TUMLModelElementList)
  protected
    function GetBoldObject(index: Integer): TUMLInstance;
    procedure SetBoldObject(index: Integer; NewObject: TUMLInstance);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLInstanceListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLInstance): Boolean;
    function IndexOf(anObject: TUMLInstance): Integer;
    procedure Add(NewObject: TUMLInstance);
    function AddNew: TUMLInstance;
    procedure Insert(index: Integer; NewObject: TUMLInstance);
    property BoldObjects[index: Integer]: TUMLInstance read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLInteractionListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLInteraction;
    property Current: TUMLInteraction read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLInteractionList = class(TUMLModelElementList)
  protected
    function GetBoldObject(index: Integer): TUMLInteraction;
    procedure SetBoldObject(index: Integer; NewObject: TUMLInteraction);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLInteractionListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLInteraction): Boolean;
    function IndexOf(anObject: TUMLInteraction): Integer;
    procedure Add(NewObject: TUMLInteraction);
    function AddNew: TUMLInteraction;
    procedure Insert(index: Integer; NewObject: TUMLInteraction);
    property BoldObjects[index: Integer]: TUMLInteraction read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLLinkListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLLink;
    property Current: TUMLLink read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLLinkList = class(TUMLModelElementList)
  protected
    function GetBoldObject(index: Integer): TUMLLink;
    procedure SetBoldObject(index: Integer; NewObject: TUMLLink);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLLinkListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLLink): Boolean;
    function IndexOf(anObject: TUMLLink): Integer;
    procedure Add(NewObject: TUMLLink);
    function AddNew: TUMLLink;
    procedure Insert(index: Integer; NewObject: TUMLLink);
    property BoldObjects[index: Integer]: TUMLLink read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLLinkEndListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLLinkEnd;
    property Current: TUMLLinkEnd read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLLinkEndList = class(TUMLModelElementList)
  protected
    function GetBoldObject(index: Integer): TUMLLinkEnd;
    procedure SetBoldObject(index: Integer; NewObject: TUMLLinkEnd);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLLinkEndListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLLinkEnd): Boolean;
    function IndexOf(anObject: TUMLLinkEnd): Integer;
    procedure Add(NewObject: TUMLLinkEnd);
    function AddNew: TUMLLinkEnd;
    procedure Insert(index: Integer; NewObject: TUMLLinkEnd);
    property BoldObjects[index: Integer]: TUMLLinkEnd read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLMessageListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLMessage;
    property Current: TUMLMessage read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLMessageList = class(TUMLModelElementList)
  protected
    function GetBoldObject(index: Integer): TUMLMessage;
    procedure SetBoldObject(index: Integer; NewObject: TUMLMessage);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLMessageListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLMessage): Boolean;
    function IndexOf(anObject: TUMLMessage): Integer;
    procedure Add(NewObject: TUMLMessage);
    function AddNew: TUMLMessage;
    procedure Insert(index: Integer; NewObject: TUMLMessage);
    property BoldObjects[index: Integer]: TUMLMessage read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLNamespaceListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLNamespace;
    property Current: TUMLNamespace read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLNamespaceList = class(TUMLModelElementList)
  protected
    function GetBoldObject(index: Integer): TUMLNamespace;
    procedure SetBoldObject(index: Integer; NewObject: TUMLNamespace);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLNamespaceListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLNamespace): Boolean;
    function IndexOf(anObject: TUMLNamespace): Integer;
    procedure Add(NewObject: TUMLNamespace);
    function AddNew: TUMLNamespace;
    procedure Insert(index: Integer; NewObject: TUMLNamespace);
    property BoldObjects[index: Integer]: TUMLNamespace read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLParameterListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLParameter;
    property Current: TUMLParameter read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLParameterList = class(TUMLModelElementList)
  protected
    function GetBoldObject(index: Integer): TUMLParameter;
    procedure SetBoldObject(index: Integer; NewObject: TUMLParameter);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLParameterListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLParameter): Boolean;
    function IndexOf(anObject: TUMLParameter): Integer;
    procedure Add(NewObject: TUMLParameter);
    function AddNew: TUMLParameter;
    procedure Insert(index: Integer; NewObject: TUMLParameter);
    property BoldObjects[index: Integer]: TUMLParameter read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLPartitionListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLPartition;
    property Current: TUMLPartition read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLPartitionList = class(TUMLModelElementList)
  protected
    function GetBoldObject(index: Integer): TUMLPartition;
    procedure SetBoldObject(index: Integer; NewObject: TUMLPartition);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLPartitionListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLPartition): Boolean;
    function IndexOf(anObject: TUMLPartition): Integer;
    procedure Add(NewObject: TUMLPartition);
    function AddNew: TUMLPartition;
    procedure Insert(index: Integer; NewObject: TUMLPartition);
    property BoldObjects[index: Integer]: TUMLPartition read GetBoldObject write SetBoldObject; default;
  end;

  _TDebuggerWorkAroundListClass49 = class(TInterfacedObject, IUnknown) end;
  {$EXTERNALSYM _TDebuggerWorkAroundListClass49}

{$IFDEF UseBoldListEnumerator}
  TUMLRelationshipListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLRelationship;
    property Current: TUMLRelationship read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLRelationshipList = class(TUMLModelElementList)
  protected
    function GetBoldObject(index: Integer): TUMLRelationship;
    procedure SetBoldObject(index: Integer; NewObject: TUMLRelationship);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLRelationshipListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLRelationship): Boolean;
    function IndexOf(anObject: TUMLRelationship): Integer;
    procedure Add(NewObject: TUMLRelationship);
    function AddNew: TUMLRelationship;
    procedure Insert(index: Integer; NewObject: TUMLRelationship);
    property BoldObjects[index: Integer]: TUMLRelationship read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLStateMachineListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLStateMachine;
    property Current: TUMLStateMachine read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLStateMachineList = class(TUMLModelElementList)
  protected
    function GetBoldObject(index: Integer): TUMLStateMachine;
    procedure SetBoldObject(index: Integer; NewObject: TUMLStateMachine);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLStateMachineListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLStateMachine): Boolean;
    function IndexOf(anObject: TUMLStateMachine): Integer;
    procedure Add(NewObject: TUMLStateMachine);
    function AddNew: TUMLStateMachine;
    procedure Insert(index: Integer; NewObject: TUMLStateMachine);
    property BoldObjects[index: Integer]: TUMLStateMachine read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLStateVertexListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLStateVertex;
    property Current: TUMLStateVertex read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLStateVertexList = class(TUMLModelElementList)
  protected
    function GetBoldObject(index: Integer): TUMLStateVertex;
    procedure SetBoldObject(index: Integer; NewObject: TUMLStateVertex);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLStateVertexListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLStateVertex): Boolean;
    function IndexOf(anObject: TUMLStateVertex): Integer;
    procedure Add(NewObject: TUMLStateVertex);
    function AddNew: TUMLStateVertex;
    procedure Insert(index: Integer; NewObject: TUMLStateVertex);
    property BoldObjects[index: Integer]: TUMLStateVertex read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLStimulusListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLStimulus;
    property Current: TUMLStimulus read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLStimulusList = class(TUMLModelElementList)
  protected
    function GetBoldObject(index: Integer): TUMLStimulus;
    procedure SetBoldObject(index: Integer; NewObject: TUMLStimulus);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLStimulusListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLStimulus): Boolean;
    function IndexOf(anObject: TUMLStimulus): Integer;
    procedure Add(NewObject: TUMLStimulus);
    function AddNew: TUMLStimulus;
    procedure Insert(index: Integer; NewObject: TUMLStimulus);
    property BoldObjects[index: Integer]: TUMLStimulus read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLTaggedValueListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLTaggedValue;
    property Current: TUMLTaggedValue read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLTaggedValueList = class(TUMLModelElementList)
  protected
    function GetBoldObject(index: Integer): TUMLTaggedValue;
    procedure SetBoldObject(index: Integer; NewObject: TUMLTaggedValue);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLTaggedValueListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLTaggedValue): Boolean;
    function IndexOf(anObject: TUMLTaggedValue): Integer;
    procedure Add(NewObject: TUMLTaggedValue);
    function AddNew: TUMLTaggedValue;
    procedure Insert(index: Integer; NewObject: TUMLTaggedValue);
    property BoldObjects[index: Integer]: TUMLTaggedValue read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLTransitionListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLTransition;
    property Current: TUMLTransition read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLTransitionList = class(TUMLModelElementList)
  protected
    function GetBoldObject(index: Integer): TUMLTransition;
    procedure SetBoldObject(index: Integer; NewObject: TUMLTransition);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLTransitionListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLTransition): Boolean;
    function IndexOf(anObject: TUMLTransition): Integer;
    procedure Add(NewObject: TUMLTransition);
    function AddNew: TUMLTransition;
    procedure Insert(index: Integer; NewObject: TUMLTransition);
    property BoldObjects[index: Integer]: TUMLTransition read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLActionSequenceListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLActionSequence;
    property Current: TUMLActionSequence read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLActionSequenceList = class(TUMLActionList)
  protected
    function GetBoldObject(index: Integer): TUMLActionSequence;
    procedure SetBoldObject(index: Integer; NewObject: TUMLActionSequence);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLActionSequenceListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLActionSequence): Boolean;
    function IndexOf(anObject: TUMLActionSequence): Integer;
    procedure Add(NewObject: TUMLActionSequence);
    function AddNew: TUMLActionSequence;
    procedure Insert(index: Integer; NewObject: TUMLActionSequence);
    property BoldObjects[index: Integer]: TUMLActionSequence read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLCallActionListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLCallAction;
    property Current: TUMLCallAction read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLCallActionList = class(TUMLActionList)
  protected
    function GetBoldObject(index: Integer): TUMLCallAction;
    procedure SetBoldObject(index: Integer; NewObject: TUMLCallAction);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLCallActionListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLCallAction): Boolean;
    function IndexOf(anObject: TUMLCallAction): Integer;
    procedure Add(NewObject: TUMLCallAction);
    function AddNew: TUMLCallAction;
    procedure Insert(index: Integer; NewObject: TUMLCallAction);
    property BoldObjects[index: Integer]: TUMLCallAction read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLCreateActionListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLCreateAction;
    property Current: TUMLCreateAction read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLCreateActionList = class(TUMLActionList)
  protected
    function GetBoldObject(index: Integer): TUMLCreateAction;
    procedure SetBoldObject(index: Integer; NewObject: TUMLCreateAction);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLCreateActionListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLCreateAction): Boolean;
    function IndexOf(anObject: TUMLCreateAction): Integer;
    procedure Add(NewObject: TUMLCreateAction);
    function AddNew: TUMLCreateAction;
    procedure Insert(index: Integer; NewObject: TUMLCreateAction);
    property BoldObjects[index: Integer]: TUMLCreateAction read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLDestroyActionListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLDestroyAction;
    property Current: TUMLDestroyAction read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLDestroyActionList = class(TUMLActionList)
  protected
    function GetBoldObject(index: Integer): TUMLDestroyAction;
    procedure SetBoldObject(index: Integer; NewObject: TUMLDestroyAction);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLDestroyActionListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLDestroyAction): Boolean;
    function IndexOf(anObject: TUMLDestroyAction): Integer;
    procedure Add(NewObject: TUMLDestroyAction);
    function AddNew: TUMLDestroyAction;
    procedure Insert(index: Integer; NewObject: TUMLDestroyAction);
    property BoldObjects[index: Integer]: TUMLDestroyAction read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLReturnActionListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLReturnAction;
    property Current: TUMLReturnAction read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLReturnActionList = class(TUMLActionList)
  protected
    function GetBoldObject(index: Integer): TUMLReturnAction;
    procedure SetBoldObject(index: Integer; NewObject: TUMLReturnAction);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLReturnActionListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLReturnAction): Boolean;
    function IndexOf(anObject: TUMLReturnAction): Integer;
    procedure Add(NewObject: TUMLReturnAction);
    function AddNew: TUMLReturnAction;
    procedure Insert(index: Integer; NewObject: TUMLReturnAction);
    property BoldObjects[index: Integer]: TUMLReturnAction read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLSendActionListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLSendAction;
    property Current: TUMLSendAction read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLSendActionList = class(TUMLActionList)
  protected
    function GetBoldObject(index: Integer): TUMLSendAction;
    procedure SetBoldObject(index: Integer; NewObject: TUMLSendAction);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLSendActionListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLSendAction): Boolean;
    function IndexOf(anObject: TUMLSendAction): Integer;
    procedure Add(NewObject: TUMLSendAction);
    function AddNew: TUMLSendAction;
    procedure Insert(index: Integer; NewObject: TUMLSendAction);
    property BoldObjects[index: Integer]: TUMLSendAction read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLTerminateActionListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLTerminateAction;
    property Current: TUMLTerminateAction read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLTerminateActionList = class(TUMLActionList)
  protected
    function GetBoldObject(index: Integer): TUMLTerminateAction;
    procedure SetBoldObject(index: Integer; NewObject: TUMLTerminateAction);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLTerminateActionListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLTerminateAction): Boolean;
    function IndexOf(anObject: TUMLTerminateAction): Integer;
    procedure Add(NewObject: TUMLTerminateAction);
    function AddNew: TUMLTerminateAction;
    procedure Insert(index: Integer; NewObject: TUMLTerminateAction);
    property BoldObjects[index: Integer]: TUMLTerminateAction read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLUninterpretedActionListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLUninterpretedAction;
    property Current: TUMLUninterpretedAction read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLUninterpretedActionList = class(TUMLActionList)
  protected
    function GetBoldObject(index: Integer): TUMLUninterpretedAction;
    procedure SetBoldObject(index: Integer; NewObject: TUMLUninterpretedAction);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLUninterpretedActionListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLUninterpretedAction): Boolean;
    function IndexOf(anObject: TUMLUninterpretedAction): Integer;
    procedure Add(NewObject: TUMLUninterpretedAction);
    function AddNew: TUMLUninterpretedAction;
    procedure Insert(index: Integer; NewObject: TUMLUninterpretedAction);
    property BoldObjects[index: Integer]: TUMLUninterpretedAction read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLAssociationEndRoleListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLAssociationEndRole;
    property Current: TUMLAssociationEndRole read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLAssociationEndRoleList = class(TUMLAssociationEndList)
  protected
    function GetBoldObject(index: Integer): TUMLAssociationEndRole;
    procedure SetBoldObject(index: Integer; NewObject: TUMLAssociationEndRole);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLAssociationEndRoleListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLAssociationEndRole): Boolean;
    function IndexOf(anObject: TUMLAssociationEndRole): Integer;
    procedure Add(NewObject: TUMLAssociationEndRole);
    function AddNew: TUMLAssociationEndRole;
    procedure Insert(index: Integer; NewObject: TUMLAssociationEndRole);
    property BoldObjects[index: Integer]: TUMLAssociationEndRole read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLCallEventListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLCallEvent;
    property Current: TUMLCallEvent read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLCallEventList = class(TUMLEventList)
  protected
    function GetBoldObject(index: Integer): TUMLCallEvent;
    procedure SetBoldObject(index: Integer; NewObject: TUMLCallEvent);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLCallEventListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLCallEvent): Boolean;
    function IndexOf(anObject: TUMLCallEvent): Integer;
    procedure Add(NewObject: TUMLCallEvent);
    function AddNew: TUMLCallEvent;
    procedure Insert(index: Integer; NewObject: TUMLCallEvent);
    property BoldObjects[index: Integer]: TUMLCallEvent read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLChangeEventListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLChangeEvent;
    property Current: TUMLChangeEvent read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLChangeEventList = class(TUMLEventList)
  protected
    function GetBoldObject(index: Integer): TUMLChangeEvent;
    procedure SetBoldObject(index: Integer; NewObject: TUMLChangeEvent);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLChangeEventListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLChangeEvent): Boolean;
    function IndexOf(anObject: TUMLChangeEvent): Integer;
    procedure Add(NewObject: TUMLChangeEvent);
    function AddNew: TUMLChangeEvent;
    procedure Insert(index: Integer; NewObject: TUMLChangeEvent);
    property BoldObjects[index: Integer]: TUMLChangeEvent read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLSignalEventListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLSignalEvent;
    property Current: TUMLSignalEvent read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLSignalEventList = class(TUMLEventList)
  protected
    function GetBoldObject(index: Integer): TUMLSignalEvent;
    procedure SetBoldObject(index: Integer; NewObject: TUMLSignalEvent);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLSignalEventListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLSignalEvent): Boolean;
    function IndexOf(anObject: TUMLSignalEvent): Integer;
    procedure Add(NewObject: TUMLSignalEvent);
    function AddNew: TUMLSignalEvent;
    procedure Insert(index: Integer; NewObject: TUMLSignalEvent);
    property BoldObjects[index: Integer]: TUMLSignalEvent read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLTimeEventListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLTimeEvent;
    property Current: TUMLTimeEvent read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLTimeEventList = class(TUMLEventList)
  protected
    function GetBoldObject(index: Integer): TUMLTimeEvent;
    procedure SetBoldObject(index: Integer; NewObject: TUMLTimeEvent);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLTimeEventListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLTimeEvent): Boolean;
    function IndexOf(anObject: TUMLTimeEvent): Integer;
    procedure Add(NewObject: TUMLTimeEvent);
    function AddNew: TUMLTimeEvent;
    procedure Insert(index: Integer; NewObject: TUMLTimeEvent);
    property BoldObjects[index: Integer]: TUMLTimeEvent read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLBehavioralFeatureListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLBehavioralFeature;
    property Current: TUMLBehavioralFeature read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLBehavioralFeatureList = class(TUMLFeatureList)
  protected
    function GetBoldObject(index: Integer): TUMLBehavioralFeature;
    procedure SetBoldObject(index: Integer; NewObject: TUMLBehavioralFeature);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLBehavioralFeatureListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLBehavioralFeature): Boolean;
    function IndexOf(anObject: TUMLBehavioralFeature): Integer;
    procedure Add(NewObject: TUMLBehavioralFeature);
    function AddNew: TUMLBehavioralFeature;
    procedure Insert(index: Integer; NewObject: TUMLBehavioralFeature);
    property BoldObjects[index: Integer]: TUMLBehavioralFeature read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLStructuralFeatureListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLStructuralFeature;
    property Current: TUMLStructuralFeature read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLStructuralFeatureList = class(TUMLFeatureList)
  protected
    function GetBoldObject(index: Integer): TUMLStructuralFeature;
    procedure SetBoldObject(index: Integer; NewObject: TUMLStructuralFeature);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLStructuralFeatureListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLStructuralFeature): Boolean;
    function IndexOf(anObject: TUMLStructuralFeature): Integer;
    procedure Add(NewObject: TUMLStructuralFeature);
    function AddNew: TUMLStructuralFeature;
    procedure Insert(index: Integer; NewObject: TUMLStructuralFeature);
    property BoldObjects[index: Integer]: TUMLStructuralFeature read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLComponentInstanceListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLComponentInstance;
    property Current: TUMLComponentInstance read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLComponentInstanceList = class(TUMLInstanceList)
  protected
    function GetBoldObject(index: Integer): TUMLComponentInstance;
    procedure SetBoldObject(index: Integer; NewObject: TUMLComponentInstance);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLComponentInstanceListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLComponentInstance): Boolean;
    function IndexOf(anObject: TUMLComponentInstance): Integer;
    procedure Add(NewObject: TUMLComponentInstance);
    function AddNew: TUMLComponentInstance;
    procedure Insert(index: Integer; NewObject: TUMLComponentInstance);
    property BoldObjects[index: Integer]: TUMLComponentInstance read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLDataValueListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLDataValue;
    property Current: TUMLDataValue read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLDataValueList = class(TUMLInstanceList)
  protected
    function GetBoldObject(index: Integer): TUMLDataValue;
    procedure SetBoldObject(index: Integer; NewObject: TUMLDataValue);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLDataValueListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLDataValue): Boolean;
    function IndexOf(anObject: TUMLDataValue): Integer;
    procedure Add(NewObject: TUMLDataValue);
    function AddNew: TUMLDataValue;
    procedure Insert(index: Integer; NewObject: TUMLDataValue);
    property BoldObjects[index: Integer]: TUMLDataValue read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLNodeInstanceListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLNodeInstance;
    property Current: TUMLNodeInstance read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLNodeInstanceList = class(TUMLInstanceList)
  protected
    function GetBoldObject(index: Integer): TUMLNodeInstance;
    procedure SetBoldObject(index: Integer; NewObject: TUMLNodeInstance);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLNodeInstanceListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLNodeInstance): Boolean;
    function IndexOf(anObject: TUMLNodeInstance): Integer;
    procedure Add(NewObject: TUMLNodeInstance);
    function AddNew: TUMLNodeInstance;
    procedure Insert(index: Integer; NewObject: TUMLNodeInstance);
    property BoldObjects[index: Integer]: TUMLNodeInstance read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLObjectListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLObject;
    property Current: TUMLObject read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLObjectList = class(TUMLInstanceList)
  protected
    function GetBoldObject(index: Integer): TUMLObject;
    procedure SetBoldObject(index: Integer; NewObject: TUMLObject);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLObjectListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLObject): Boolean;
    function IndexOf(anObject: TUMLObject): Integer;
    procedure Add(NewObject: TUMLObject);
    function AddNew: TUMLObject;
    procedure Insert(index: Integer; NewObject: TUMLObject);
    property BoldObjects[index: Integer]: TUMLObject read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLUseCaseInstanceListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLUseCaseInstance;
    property Current: TUMLUseCaseInstance read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLUseCaseInstanceList = class(TUMLInstanceList)
  protected
    function GetBoldObject(index: Integer): TUMLUseCaseInstance;
    procedure SetBoldObject(index: Integer; NewObject: TUMLUseCaseInstance);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLUseCaseInstanceListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLUseCaseInstance): Boolean;
    function IndexOf(anObject: TUMLUseCaseInstance): Integer;
    procedure Add(NewObject: TUMLUseCaseInstance);
    function AddNew: TUMLUseCaseInstance;
    procedure Insert(index: Integer; NewObject: TUMLUseCaseInstance);
    property BoldObjects[index: Integer]: TUMLUseCaseInstance read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLGeneralizableElementListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLGeneralizableElement;
    property Current: TUMLGeneralizableElement read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLGeneralizableElementList = class(TUMLNamespaceList)
  protected
    function GetBoldObject(index: Integer): TUMLGeneralizableElement;
    procedure SetBoldObject(index: Integer; NewObject: TUMLGeneralizableElement);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLGeneralizableElementListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLGeneralizableElement): Boolean;
    function IndexOf(anObject: TUMLGeneralizableElement): Integer;
    procedure Add(NewObject: TUMLGeneralizableElement);
    function AddNew: TUMLGeneralizableElement;
    procedure Insert(index: Integer; NewObject: TUMLGeneralizableElement);
    property BoldObjects[index: Integer]: TUMLGeneralizableElement read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLDependencyListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLDependency;
    property Current: TUMLDependency read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLDependencyList = class(TUMLRelationshipList)
  protected
    function GetBoldObject(index: Integer): TUMLDependency;
    procedure SetBoldObject(index: Integer; NewObject: TUMLDependency);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLDependencyListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLDependency): Boolean;
    function IndexOf(anObject: TUMLDependency): Integer;
    procedure Add(NewObject: TUMLDependency);
    function AddNew: TUMLDependency;
    procedure Insert(index: Integer; NewObject: TUMLDependency);
    property BoldObjects[index: Integer]: TUMLDependency read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLExtendListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLExtend;
    property Current: TUMLExtend read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLExtendList = class(TUMLRelationshipList)
  protected
    function GetBoldObject(index: Integer): TUMLExtend;
    procedure SetBoldObject(index: Integer; NewObject: TUMLExtend);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLExtendListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLExtend): Boolean;
    function IndexOf(anObject: TUMLExtend): Integer;
    procedure Add(NewObject: TUMLExtend);
    function AddNew: TUMLExtend;
    procedure Insert(index: Integer; NewObject: TUMLExtend);
    property BoldObjects[index: Integer]: TUMLExtend read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLFlowListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLFlow;
    property Current: TUMLFlow read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLFlowList = class(TUMLRelationshipList)
  protected
    function GetBoldObject(index: Integer): TUMLFlow;
    procedure SetBoldObject(index: Integer; NewObject: TUMLFlow);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLFlowListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLFlow): Boolean;
    function IndexOf(anObject: TUMLFlow): Integer;
    procedure Add(NewObject: TUMLFlow);
    function AddNew: TUMLFlow;
    procedure Insert(index: Integer; NewObject: TUMLFlow);
    property BoldObjects[index: Integer]: TUMLFlow read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLGeneralizationListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLGeneralization;
    property Current: TUMLGeneralization read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLGeneralizationList = class(TUMLRelationshipList)
  protected
    function GetBoldObject(index: Integer): TUMLGeneralization;
    procedure SetBoldObject(index: Integer; NewObject: TUMLGeneralization);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLGeneralizationListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLGeneralization): Boolean;
    function IndexOf(anObject: TUMLGeneralization): Integer;
    procedure Add(NewObject: TUMLGeneralization);
    function AddNew: TUMLGeneralization;
    procedure Insert(index: Integer; NewObject: TUMLGeneralization);
    property BoldObjects[index: Integer]: TUMLGeneralization read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLIncludeListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLInclude;
    property Current: TUMLInclude read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLIncludeList = class(TUMLRelationshipList)
  protected
    function GetBoldObject(index: Integer): TUMLInclude;
    procedure SetBoldObject(index: Integer; NewObject: TUMLInclude);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLIncludeListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLInclude): Boolean;
    function IndexOf(anObject: TUMLInclude): Integer;
    procedure Add(NewObject: TUMLInclude);
    function AddNew: TUMLInclude;
    procedure Insert(index: Integer; NewObject: TUMLInclude);
    property BoldObjects[index: Integer]: TUMLInclude read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLActivityGraphListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLActivityGraph;
    property Current: TUMLActivityGraph read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLActivityGraphList = class(TUMLStateMachineList)
  protected
    function GetBoldObject(index: Integer): TUMLActivityGraph;
    procedure SetBoldObject(index: Integer; NewObject: TUMLActivityGraph);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLActivityGraphListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLActivityGraph): Boolean;
    function IndexOf(anObject: TUMLActivityGraph): Integer;
    procedure Add(NewObject: TUMLActivityGraph);
    function AddNew: TUMLActivityGraph;
    procedure Insert(index: Integer; NewObject: TUMLActivityGraph);
    property BoldObjects[index: Integer]: TUMLActivityGraph read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLPseudostateListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLPseudostate;
    property Current: TUMLPseudostate read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLPseudostateList = class(TUMLStateVertexList)
  protected
    function GetBoldObject(index: Integer): TUMLPseudostate;
    procedure SetBoldObject(index: Integer; NewObject: TUMLPseudostate);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLPseudostateListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLPseudostate): Boolean;
    function IndexOf(anObject: TUMLPseudostate): Integer;
    procedure Add(NewObject: TUMLPseudostate);
    function AddNew: TUMLPseudostate;
    procedure Insert(index: Integer; NewObject: TUMLPseudostate);
    property BoldObjects[index: Integer]: TUMLPseudostate read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLStateListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLState;
    property Current: TUMLState read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLStateList = class(TUMLStateVertexList)
  protected
    function GetBoldObject(index: Integer): TUMLState;
    procedure SetBoldObject(index: Integer; NewObject: TUMLState);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLStateListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLState): Boolean;
    function IndexOf(anObject: TUMLState): Integer;
    procedure Add(NewObject: TUMLState);
    function AddNew: TUMLState;
    procedure Insert(index: Integer; NewObject: TUMLState);
    property BoldObjects[index: Integer]: TUMLState read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLStubStateListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLStubState;
    property Current: TUMLStubState read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLStubStateList = class(TUMLStateVertexList)
  protected
    function GetBoldObject(index: Integer): TUMLStubState;
    procedure SetBoldObject(index: Integer; NewObject: TUMLStubState);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLStubStateListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLStubState): Boolean;
    function IndexOf(anObject: TUMLStubState): Integer;
    procedure Add(NewObject: TUMLStubState);
    function AddNew: TUMLStubState;
    procedure Insert(index: Integer; NewObject: TUMLStubState);
    property BoldObjects[index: Integer]: TUMLStubState read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLSynchStateListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLSynchState;
    property Current: TUMLSynchState read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLSynchStateList = class(TUMLStateVertexList)
  protected
    function GetBoldObject(index: Integer): TUMLSynchState;
    procedure SetBoldObject(index: Integer; NewObject: TUMLSynchState);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLSynchStateListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLSynchState): Boolean;
    function IndexOf(anObject: TUMLSynchState): Integer;
    procedure Add(NewObject: TUMLSynchState);
    function AddNew: TUMLSynchState;
    procedure Insert(index: Integer; NewObject: TUMLSynchState);
    property BoldObjects[index: Integer]: TUMLSynchState read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLMethodListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLMethod;
    property Current: TUMLMethod read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLMethodList = class(TUMLBehavioralFeatureList)
  protected
    function GetBoldObject(index: Integer): TUMLMethod;
    procedure SetBoldObject(index: Integer; NewObject: TUMLMethod);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLMethodListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLMethod): Boolean;
    function IndexOf(anObject: TUMLMethod): Integer;
    procedure Add(NewObject: TUMLMethod);
    function AddNew: TUMLMethod;
    procedure Insert(index: Integer; NewObject: TUMLMethod);
    property BoldObjects[index: Integer]: TUMLMethod read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLOperationListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLOperation;
    property Current: TUMLOperation read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLOperationList = class(TUMLBehavioralFeatureList)
  protected
    function GetBoldObject(index: Integer): TUMLOperation;
    procedure SetBoldObject(index: Integer; NewObject: TUMLOperation);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLOperationListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLOperation): Boolean;
    function IndexOf(anObject: TUMLOperation): Integer;
    procedure Add(NewObject: TUMLOperation);
    function AddNew: TUMLOperation;
    procedure Insert(index: Integer; NewObject: TUMLOperation);
    property BoldObjects[index: Integer]: TUMLOperation read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLReceptionListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLReception;
    property Current: TUMLReception read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLReceptionList = class(TUMLBehavioralFeatureList)
  protected
    function GetBoldObject(index: Integer): TUMLReception;
    procedure SetBoldObject(index: Integer; NewObject: TUMLReception);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLReceptionListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLReception): Boolean;
    function IndexOf(anObject: TUMLReception): Integer;
    procedure Add(NewObject: TUMLReception);
    function AddNew: TUMLReception;
    procedure Insert(index: Integer; NewObject: TUMLReception);
    property BoldObjects[index: Integer]: TUMLReception read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLAttributeListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLAttribute;
    property Current: TUMLAttribute read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLAttributeList = class(TUMLStructuralFeatureList)
  protected
    function GetBoldObject(index: Integer): TUMLAttribute;
    procedure SetBoldObject(index: Integer; NewObject: TUMLAttribute);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLAttributeListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLAttribute): Boolean;
    function IndexOf(anObject: TUMLAttribute): Integer;
    procedure Add(NewObject: TUMLAttribute);
    function AddNew: TUMLAttribute;
    procedure Insert(index: Integer; NewObject: TUMLAttribute);
    property BoldObjects[index: Integer]: TUMLAttribute read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLAssociationListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLAssociation;
    property Current: TUMLAssociation read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLAssociationList = class(TUMLGeneralizableElementList)
  protected
    function GetBoldObject(index: Integer): TUMLAssociation;
    procedure SetBoldObject(index: Integer; NewObject: TUMLAssociation);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLAssociationListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLAssociation): Boolean;
    function IndexOf(anObject: TUMLAssociation): Integer;
    procedure Add(NewObject: TUMLAssociation);
    function AddNew: TUMLAssociation;
    procedure Insert(index: Integer; NewObject: TUMLAssociation);
    property BoldObjects[index: Integer]: TUMLAssociation read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLClassifierListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLClassifier;
    property Current: TUMLClassifier read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLClassifierList = class(TUMLGeneralizableElementList)
  protected
    function GetBoldObject(index: Integer): TUMLClassifier;
    procedure SetBoldObject(index: Integer; NewObject: TUMLClassifier);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLClassifierListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLClassifier): Boolean;
    function IndexOf(anObject: TUMLClassifier): Integer;
    procedure Add(NewObject: TUMLClassifier);
    function AddNew: TUMLClassifier;
    procedure Insert(index: Integer; NewObject: TUMLClassifier);
    property BoldObjects[index: Integer]: TUMLClassifier read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLCollaborationListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLCollaboration;
    property Current: TUMLCollaboration read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLCollaborationList = class(TUMLGeneralizableElementList)
  protected
    function GetBoldObject(index: Integer): TUMLCollaboration;
    procedure SetBoldObject(index: Integer; NewObject: TUMLCollaboration);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLCollaborationListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLCollaboration): Boolean;
    function IndexOf(anObject: TUMLCollaboration): Integer;
    procedure Add(NewObject: TUMLCollaboration);
    function AddNew: TUMLCollaboration;
    procedure Insert(index: Integer; NewObject: TUMLCollaboration);
    property BoldObjects[index: Integer]: TUMLCollaboration read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLPackageListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLPackage;
    property Current: TUMLPackage read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLPackageList = class(TUMLGeneralizableElementList)
  protected
    function GetBoldObject(index: Integer): TUMLPackage;
    procedure SetBoldObject(index: Integer; NewObject: TUMLPackage);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLPackageListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLPackage): Boolean;
    function IndexOf(anObject: TUMLPackage): Integer;
    procedure Add(NewObject: TUMLPackage);
    function AddNew: TUMLPackage;
    procedure Insert(index: Integer; NewObject: TUMLPackage);
    property BoldObjects[index: Integer]: TUMLPackage read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLStereotypeListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLStereotype;
    property Current: TUMLStereotype read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLStereotypeList = class(TUMLGeneralizableElementList)
  protected
    function GetBoldObject(index: Integer): TUMLStereotype;
    procedure SetBoldObject(index: Integer; NewObject: TUMLStereotype);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLStereotypeListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLStereotype): Boolean;
    function IndexOf(anObject: TUMLStereotype): Integer;
    procedure Add(NewObject: TUMLStereotype);
    function AddNew: TUMLStereotype;
    procedure Insert(index: Integer; NewObject: TUMLStereotype);
    property BoldObjects[index: Integer]: TUMLStereotype read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLAbstractionListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLAbstraction;
    property Current: TUMLAbstraction read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLAbstractionList = class(TUMLDependencyList)
  protected
    function GetBoldObject(index: Integer): TUMLAbstraction;
    procedure SetBoldObject(index: Integer; NewObject: TUMLAbstraction);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLAbstractionListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLAbstraction): Boolean;
    function IndexOf(anObject: TUMLAbstraction): Integer;
    procedure Add(NewObject: TUMLAbstraction);
    function AddNew: TUMLAbstraction;
    procedure Insert(index: Integer; NewObject: TUMLAbstraction);
    property BoldObjects[index: Integer]: TUMLAbstraction read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLBindingListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLBinding;
    property Current: TUMLBinding read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLBindingList = class(TUMLDependencyList)
  protected
    function GetBoldObject(index: Integer): TUMLBinding;
    procedure SetBoldObject(index: Integer; NewObject: TUMLBinding);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLBindingListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLBinding): Boolean;
    function IndexOf(anObject: TUMLBinding): Integer;
    procedure Add(NewObject: TUMLBinding);
    function AddNew: TUMLBinding;
    procedure Insert(index: Integer; NewObject: TUMLBinding);
    property BoldObjects[index: Integer]: TUMLBinding read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLPermissionListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLPermission;
    property Current: TUMLPermission read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLPermissionList = class(TUMLDependencyList)
  protected
    function GetBoldObject(index: Integer): TUMLPermission;
    procedure SetBoldObject(index: Integer; NewObject: TUMLPermission);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLPermissionListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLPermission): Boolean;
    function IndexOf(anObject: TUMLPermission): Integer;
    procedure Add(NewObject: TUMLPermission);
    function AddNew: TUMLPermission;
    procedure Insert(index: Integer; NewObject: TUMLPermission);
    property BoldObjects[index: Integer]: TUMLPermission read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLUsageListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLUsage;
    property Current: TUMLUsage read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLUsageList = class(TUMLDependencyList)
  protected
    function GetBoldObject(index: Integer): TUMLUsage;
    procedure SetBoldObject(index: Integer; NewObject: TUMLUsage);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLUsageListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLUsage): Boolean;
    function IndexOf(anObject: TUMLUsage): Integer;
    procedure Add(NewObject: TUMLUsage);
    function AddNew: TUMLUsage;
    procedure Insert(index: Integer; NewObject: TUMLUsage);
    property BoldObjects[index: Integer]: TUMLUsage read GetBoldObject write SetBoldObject; default;
  end;

  _TDebuggerWorkAroundListClass99 = class(TInterfacedObject, IUnknown) end;
  {$EXTERNALSYM _TDebuggerWorkAroundListClass99}

{$IFDEF UseBoldListEnumerator}
  TUMLCompositeStateListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLCompositeState;
    property Current: TUMLCompositeState read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLCompositeStateList = class(TUMLStateList)
  protected
    function GetBoldObject(index: Integer): TUMLCompositeState;
    procedure SetBoldObject(index: Integer; NewObject: TUMLCompositeState);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLCompositeStateListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLCompositeState): Boolean;
    function IndexOf(anObject: TUMLCompositeState): Integer;
    procedure Add(NewObject: TUMLCompositeState);
    function AddNew: TUMLCompositeState;
    procedure Insert(index: Integer; NewObject: TUMLCompositeState);
    property BoldObjects[index: Integer]: TUMLCompositeState read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLFinalStateListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLFinalState;
    property Current: TUMLFinalState read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLFinalStateList = class(TUMLStateList)
  protected
    function GetBoldObject(index: Integer): TUMLFinalState;
    procedure SetBoldObject(index: Integer; NewObject: TUMLFinalState);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLFinalStateListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLFinalState): Boolean;
    function IndexOf(anObject: TUMLFinalState): Integer;
    procedure Add(NewObject: TUMLFinalState);
    function AddNew: TUMLFinalState;
    procedure Insert(index: Integer; NewObject: TUMLFinalState);
    property BoldObjects[index: Integer]: TUMLFinalState read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLSimpleStateListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLSimpleState;
    property Current: TUMLSimpleState read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLSimpleStateList = class(TUMLStateList)
  protected
    function GetBoldObject(index: Integer): TUMLSimpleState;
    procedure SetBoldObject(index: Integer; NewObject: TUMLSimpleState);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLSimpleStateListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLSimpleState): Boolean;
    function IndexOf(anObject: TUMLSimpleState): Integer;
    procedure Add(NewObject: TUMLSimpleState);
    function AddNew: TUMLSimpleState;
    procedure Insert(index: Integer; NewObject: TUMLSimpleState);
    property BoldObjects[index: Integer]: TUMLSimpleState read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLAssociationRoleListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLAssociationRole;
    property Current: TUMLAssociationRole read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLAssociationRoleList = class(TUMLAssociationList)
  protected
    function GetBoldObject(index: Integer): TUMLAssociationRole;
    procedure SetBoldObject(index: Integer; NewObject: TUMLAssociationRole);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLAssociationRoleListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLAssociationRole): Boolean;
    function IndexOf(anObject: TUMLAssociationRole): Integer;
    procedure Add(NewObject: TUMLAssociationRole);
    function AddNew: TUMLAssociationRole;
    procedure Insert(index: Integer; NewObject: TUMLAssociationRole);
    property BoldObjects[index: Integer]: TUMLAssociationRole read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLActorListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLActor;
    property Current: TUMLActor read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLActorList = class(TUMLClassifierList)
  protected
    function GetBoldObject(index: Integer): TUMLActor;
    procedure SetBoldObject(index: Integer; NewObject: TUMLActor);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLActorListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLActor): Boolean;
    function IndexOf(anObject: TUMLActor): Integer;
    procedure Add(NewObject: TUMLActor);
    function AddNew: TUMLActor;
    procedure Insert(index: Integer; NewObject: TUMLActor);
    property BoldObjects[index: Integer]: TUMLActor read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLClassListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLClass;
    property Current: TUMLClass read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLClassList = class(TUMLClassifierList)
  protected
    function GetBoldObject(index: Integer): TUMLClass;
    procedure SetBoldObject(index: Integer; NewObject: TUMLClass);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLClassListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLClass): Boolean;
    function IndexOf(anObject: TUMLClass): Integer;
    procedure Add(NewObject: TUMLClass);
    function AddNew: TUMLClass;
    procedure Insert(index: Integer; NewObject: TUMLClass);
    property BoldObjects[index: Integer]: TUMLClass read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLClassifierInStateListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLClassifierInState;
    property Current: TUMLClassifierInState read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLClassifierInStateList = class(TUMLClassifierList)
  protected
    function GetBoldObject(index: Integer): TUMLClassifierInState;
    procedure SetBoldObject(index: Integer; NewObject: TUMLClassifierInState);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLClassifierInStateListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLClassifierInState): Boolean;
    function IndexOf(anObject: TUMLClassifierInState): Integer;
    procedure Add(NewObject: TUMLClassifierInState);
    function AddNew: TUMLClassifierInState;
    procedure Insert(index: Integer; NewObject: TUMLClassifierInState);
    property BoldObjects[index: Integer]: TUMLClassifierInState read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLClassifierRoleListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLClassifierRole;
    property Current: TUMLClassifierRole read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLClassifierRoleList = class(TUMLClassifierList)
  protected
    function GetBoldObject(index: Integer): TUMLClassifierRole;
    procedure SetBoldObject(index: Integer; NewObject: TUMLClassifierRole);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLClassifierRoleListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLClassifierRole): Boolean;
    function IndexOf(anObject: TUMLClassifierRole): Integer;
    procedure Add(NewObject: TUMLClassifierRole);
    function AddNew: TUMLClassifierRole;
    procedure Insert(index: Integer; NewObject: TUMLClassifierRole);
    property BoldObjects[index: Integer]: TUMLClassifierRole read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLComponentListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLComponent;
    property Current: TUMLComponent read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLComponentList = class(TUMLClassifierList)
  protected
    function GetBoldObject(index: Integer): TUMLComponent;
    procedure SetBoldObject(index: Integer; NewObject: TUMLComponent);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLComponentListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLComponent): Boolean;
    function IndexOf(anObject: TUMLComponent): Integer;
    procedure Add(NewObject: TUMLComponent);
    function AddNew: TUMLComponent;
    procedure Insert(index: Integer; NewObject: TUMLComponent);
    property BoldObjects[index: Integer]: TUMLComponent read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLDataTypeListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLDataType;
    property Current: TUMLDataType read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLDataTypeList = class(TUMLClassifierList)
  protected
    function GetBoldObject(index: Integer): TUMLDataType;
    procedure SetBoldObject(index: Integer; NewObject: TUMLDataType);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLDataTypeListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLDataType): Boolean;
    function IndexOf(anObject: TUMLDataType): Integer;
    procedure Add(NewObject: TUMLDataType);
    function AddNew: TUMLDataType;
    procedure Insert(index: Integer; NewObject: TUMLDataType);
    property BoldObjects[index: Integer]: TUMLDataType read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLInterfaceListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLInterface;
    property Current: TUMLInterface read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLInterfaceList = class(TUMLClassifierList)
  protected
    function GetBoldObject(index: Integer): TUMLInterface;
    procedure SetBoldObject(index: Integer; NewObject: TUMLInterface);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLInterfaceListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLInterface): Boolean;
    function IndexOf(anObject: TUMLInterface): Integer;
    procedure Add(NewObject: TUMLInterface);
    function AddNew: TUMLInterface;
    procedure Insert(index: Integer; NewObject: TUMLInterface);
    property BoldObjects[index: Integer]: TUMLInterface read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLNodeListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLNode;
    property Current: TUMLNode read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLNodeList = class(TUMLClassifierList)
  protected
    function GetBoldObject(index: Integer): TUMLNode;
    procedure SetBoldObject(index: Integer; NewObject: TUMLNode);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLNodeListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLNode): Boolean;
    function IndexOf(anObject: TUMLNode): Integer;
    procedure Add(NewObject: TUMLNode);
    function AddNew: TUMLNode;
    procedure Insert(index: Integer; NewObject: TUMLNode);
    property BoldObjects[index: Integer]: TUMLNode read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLSignalListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLSignal;
    property Current: TUMLSignal read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLSignalList = class(TUMLClassifierList)
  protected
    function GetBoldObject(index: Integer): TUMLSignal;
    procedure SetBoldObject(index: Integer; NewObject: TUMLSignal);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLSignalListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLSignal): Boolean;
    function IndexOf(anObject: TUMLSignal): Integer;
    procedure Add(NewObject: TUMLSignal);
    function AddNew: TUMLSignal;
    procedure Insert(index: Integer; NewObject: TUMLSignal);
    property BoldObjects[index: Integer]: TUMLSignal read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLUseCaseListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLUseCase;
    property Current: TUMLUseCase read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLUseCaseList = class(TUMLClassifierList)
  protected
    function GetBoldObject(index: Integer): TUMLUseCase;
    procedure SetBoldObject(index: Integer; NewObject: TUMLUseCase);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLUseCaseListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLUseCase): Boolean;
    function IndexOf(anObject: TUMLUseCase): Integer;
    procedure Add(NewObject: TUMLUseCase);
    function AddNew: TUMLUseCase;
    procedure Insert(index: Integer; NewObject: TUMLUseCase);
    property BoldObjects[index: Integer]: TUMLUseCase read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLModelListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLModel;
    property Current: TUMLModel read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLModelList = class(TUMLPackageList)
  protected
    function GetBoldObject(index: Integer): TUMLModel;
    procedure SetBoldObject(index: Integer; NewObject: TUMLModel);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLModelListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLModel): Boolean;
    function IndexOf(anObject: TUMLModel): Integer;
    procedure Add(NewObject: TUMLModel);
    function AddNew: TUMLModel;
    procedure Insert(index: Integer; NewObject: TUMLModel);
    property BoldObjects[index: Integer]: TUMLModel read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLSubsystemListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLSubsystem;
    property Current: TUMLSubsystem read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLSubsystemList = class(TUMLPackageList)
  protected
    function GetBoldObject(index: Integer): TUMLSubsystem;
    procedure SetBoldObject(index: Integer; NewObject: TUMLSubsystem);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLSubsystemListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLSubsystem): Boolean;
    function IndexOf(anObject: TUMLSubsystem): Integer;
    procedure Add(NewObject: TUMLSubsystem);
    function AddNew: TUMLSubsystem;
    procedure Insert(index: Integer; NewObject: TUMLSubsystem);
    property BoldObjects[index: Integer]: TUMLSubsystem read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLSubmachineStateListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLSubmachineState;
    property Current: TUMLSubmachineState read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLSubmachineStateList = class(TUMLCompositeStateList)
  protected
    function GetBoldObject(index: Integer): TUMLSubmachineState;
    procedure SetBoldObject(index: Integer; NewObject: TUMLSubmachineState);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLSubmachineStateListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLSubmachineState): Boolean;
    function IndexOf(anObject: TUMLSubmachineState): Integer;
    procedure Add(NewObject: TUMLSubmachineState);
    function AddNew: TUMLSubmachineState;
    procedure Insert(index: Integer; NewObject: TUMLSubmachineState);
    property BoldObjects[index: Integer]: TUMLSubmachineState read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLActionStateListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLActionState;
    property Current: TUMLActionState read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLActionStateList = class(TUMLSimpleStateList)
  protected
    function GetBoldObject(index: Integer): TUMLActionState;
    procedure SetBoldObject(index: Integer; NewObject: TUMLActionState);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLActionStateListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLActionState): Boolean;
    function IndexOf(anObject: TUMLActionState): Integer;
    procedure Add(NewObject: TUMLActionState);
    function AddNew: TUMLActionState;
    procedure Insert(index: Integer; NewObject: TUMLActionState);
    property BoldObjects[index: Integer]: TUMLActionState read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLObjectFlowStateListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLObjectFlowState;
    property Current: TUMLObjectFlowState read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLObjectFlowStateList = class(TUMLSimpleStateList)
  protected
    function GetBoldObject(index: Integer): TUMLObjectFlowState;
    procedure SetBoldObject(index: Integer; NewObject: TUMLObjectFlowState);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLObjectFlowStateListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLObjectFlowState): Boolean;
    function IndexOf(anObject: TUMLObjectFlowState): Integer;
    procedure Add(NewObject: TUMLObjectFlowState);
    function AddNew: TUMLObjectFlowState;
    procedure Insert(index: Integer; NewObject: TUMLObjectFlowState);
    property BoldObjects[index: Integer]: TUMLObjectFlowState read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLExceptionListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLException;
    property Current: TUMLException read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLExceptionList = class(TUMLSignalList)
  protected
    function GetBoldObject(index: Integer): TUMLException;
    procedure SetBoldObject(index: Integer; NewObject: TUMLException);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLExceptionListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLException): Boolean;
    function IndexOf(anObject: TUMLException): Integer;
    procedure Add(NewObject: TUMLException);
    function AddNew: TUMLException;
    procedure Insert(index: Integer; NewObject: TUMLException);
    property BoldObjects[index: Integer]: TUMLException read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLSubactivityStateListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLSubactivityState;
    property Current: TUMLSubactivityState read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLSubactivityStateList = class(TUMLSubmachineStateList)
  protected
    function GetBoldObject(index: Integer): TUMLSubactivityState;
    procedure SetBoldObject(index: Integer; NewObject: TUMLSubactivityState);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLSubactivityStateListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLSubactivityState): Boolean;
    function IndexOf(anObject: TUMLSubactivityState): Integer;
    procedure Add(NewObject: TUMLSubactivityState);
    function AddNew: TUMLSubactivityState;
    procedure Insert(index: Integer; NewObject: TUMLSubactivityState);
    property BoldObjects[index: Integer]: TUMLSubactivityState read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TUMLCallStateListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TUMLCallState;
    property Current: TUMLCallState read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TUMLCallStateList = class(TUMLActionStateList)
  protected
    function GetBoldObject(index: Integer): TUMLCallState;
    procedure SetBoldObject(index: Integer; NewObject: TUMLCallState);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TUMLCallStateListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TUMLCallState): Boolean;
    function IndexOf(anObject: TUMLCallState): Integer;
    procedure Add(NewObject: TUMLCallState);
    function AddNew: TUMLCallState;
    procedure Insert(index: Integer; NewObject: TUMLCallState);
    property BoldObjects[index: Integer]: TUMLCallState read GetBoldObject write SetBoldObject; default;
  end;

function GeneratedCodeCRC: String;

implementation

uses
  // implementation uses
  BoldNameExpander,
  BoldDefaultTaggedValues,
  BoldUMLTaggedValues,
  BoldRev,
  BoldCoreConsts,
  BoldUtils,
  BoldObjectListControllers,
  BoldObjectSpaceLists,
  // implementation dependencies
  // other
  BoldGeneratedCodeDictionary;

{$ENDIF}

