(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 2002-04-04 15:49:36         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

{$IFNDEF DistributableInfo_Interface.inc}
{$DEFINE DistributableInfo_Interface.inc}

{$IFNDEF DistributableInfo_unitheader}
unit DistributableInfo;
{$ENDIF}

interface

uses
  // interface uses
  BoldValueSpaceInterfaces,
  BoldId,
  // interface dependencies
  // attribute classes
  BoldAttributes,
  // other
  Classes,
  Controls, // for TDate
  SysUtils,
  BoldDefs,
  BoldSubscription,
  BoldDeriver,
  BoldElements,
  BoldDomainElement,
  BoldSystemRT,
  BoldSystem;

type
  { forward declarations of all classes }

  TBusinessClassesRoot = class;
  TBusinessClassesRootList = class;
  TCheckedOutObjectInfo = class;
  TCheckedOutObjectInfoList = class;
  TCheckingInObjectInfo = class;
  TCheckingInObjectInfoList = class;
  TDistributableObjectInfo = class;
  TDistributableObjectInfoList = class;
  THeldObjectInfo = class;
  THeldObjectInfoList = class;
  TMapping = class;
  TMappingList = class;
  TPSInfo = class;
  TPSInfoList = class;
  TForeignObjectInfo = class;
  TForeignObjectInfoList = class;
  TOwnObjectInfo = class;
  TOwnObjectInfoList = class;
  TForeignPSInfo = class;
  TForeignPSInfoList = class;
  TOwnPSInfo = class;
  TOwnPSInfoList = class;

  TBusinessClassesRoot = class(TBoldObject)
  private
  protected
  public
  end;

  TCheckedOutObjectInfo = class(TBusinessClassesRoot)
  private
    function _GetHolder: TForeignPSInfo;
    function _Get_M_Holder: TBoldObjectReference;
    procedure _SetHolder(value: TForeignPSInfo);
  protected
  public
    property M_Holder: TBoldObjectReference read _Get_M_Holder;
    property Holder: TForeignPSInfo read _GetHolder write _SetHolder;
  end;

  TCheckingInObjectInfo = class(TBusinessClassesRoot)
  private
    function _Get_M_KeepHold: TBABoolean;
    function _GetKeepHold: Boolean;
    procedure _SetKeepHold(NewValue: Boolean);
    function _Get_M_LocalTimeStampAtCheckIn: TBAInteger;
    function _GetLocalTimeStampAtCheckIn: Integer;
    procedure _SetLocalTimeStampAtCheckIn(NewValue: Integer);
    function _GetHeldObjectInfo: THeldObjectInfo;
    function _Get_M_HeldObjectInfo: TBoldObjectReference;
    procedure _SetHeldObjectInfo(value: THeldObjectInfo);
  protected
  public
    procedure AcknowledgeCheckIn(NewTimeStamp: Integer); 
    procedure FailCheckIn; 
    property M_KeepHold: TBABoolean read _Get_M_KeepHold;
    property M_LocalTimeStampAtCheckIn: TBAInteger read _Get_M_LocalTimeStampAtCheckIn;
    property M_HeldObjectInfo: TBoldObjectReference read _Get_M_HeldObjectInfo;
    property KeepHold: Boolean read _GetKeepHold write _SetKeepHold;
    property LocalTimeStampAtCheckIn: Integer read _GetLocalTimeStampAtCheckIn write _SetLocalTimeStampAtCheckIn;
    property HeldObjectInfo: THeldObjectInfo read _GetHeldObjectInfo write _SetHeldObjectInfo;
  end;

  TDistributableObjectInfo = class(TBusinessClassesRoot)
  private
    function _Get_M_LocalId: TBAInteger;
    function _GetLocalId: Integer;
    procedure _SetLocalId(NewValue: Integer);
    function _Getmapping: TMapping;
    function _Get_M_mapping: TBoldObjectReference;
    procedure _Setmapping(value: TMapping);
  protected
  public
    procedure StartCheckIn(ValueSpace: IBoldValueSpace; KeepHold: Boolean); virtual; abstract;
    procedure Get(ValueSpace: IBoldValueSpace; CheckOut: Boolean; Holder: TForeignPSInfo); virtual; abstract;
    property M_LocalId: TBAInteger read _Get_M_LocalId;
    property M_mapping: TBoldObjectReference read _Get_M_mapping;
    property LocalId: Integer read _GetLocalId write _SetLocalId;
    property mapping: TMapping read _Getmapping write _Setmapping;
  end;

  THeldObjectInfo = class(TBusinessClassesRoot)
  private
    function _Get_M_OriginalLocalTimeStamp: TBAInteger;
    function _GetOriginalLocalTimeStamp: Integer;
    procedure _SetOriginalLocalTimeStamp(NewValue: Integer);
    function _GetForeignObjectInfo: TForeignObjectInfo;
    function _Get_M_ForeignObjectInfo: TBoldObjectReference;
    procedure _SetForeignObjectInfo(value: TForeignObjectInfo);
    function _GetCheckingInObjectInfo: TCheckingInObjectInfo;
    function _Get_M_CheckingInObjectInfo: TBoldObjectReference;
    procedure _SetCheckingInObjectInfo(value: TCheckingInObjectInfo);
  protected
  public
    procedure StartCheckIn(ValueSpace: IBoldValueSpace; KeepHold: Boolean); 
    property M_OriginalLocalTimeStamp: TBAInteger read _Get_M_OriginalLocalTimeStamp;
    property M_ForeignObjectInfo: TBoldObjectReference read _Get_M_ForeignObjectInfo;
    property M_CheckingInObjectInfo: TBoldObjectReference read _Get_M_CheckingInObjectInfo;
    property OriginalLocalTimeStamp: Integer read _GetOriginalLocalTimeStamp write _SetOriginalLocalTimeStamp;
    property ForeignObjectInfo: TForeignObjectInfo read _GetForeignObjectInfo write _SetForeignObjectInfo;
    property CheckingInObjectInfo: TCheckingInObjectInfo read _GetCheckingInObjectInfo write _SetCheckingInObjectInfo;
  end;

  TMapping = class(TBusinessClassesRoot)
  private
    function _GetObjectInfo: TDistributableObjectInfoList;
    function _Get_Q_ObjectInfo(LocalId: Integer): TDistributableObjectInfo;
  protected
  public
    property M_ObjectInfo: TDistributableObjectInfoList read _GetObjectInfo;
    property ObjectInfo[LocalId: Integer]: TDistributableObjectInfo read _Get_Q_ObjectInfo;
  end;

  TPSInfo = class(TBusinessClassesRoot)
  private
    function _Get_M_GlobalID: TBAString;
    function _GetGlobalID: String;
    procedure _SetGlobalID(NewValue: String);
  protected
  public
    property M_GlobalID: TBAString read _Get_M_GlobalID;
    property GlobalID: String read _GetGlobalID write _SetGlobalID;
  end;

  TForeignObjectInfo = class(TDistributableObjectInfo)
  private
    function _Get_M_ForeignTimeStamp: TBAInteger;
    function _GetForeignTimeStamp: Integer;
    procedure _SetForeignTimeStamp(NewValue: Integer);
    function _GetHeldObjectInfo: THeldObjectInfo;
    function _Get_M_HeldObjectInfo: TBoldObjectReference;
    procedure _SetHeldObjectInfo(value: THeldObjectInfo);
    function _GetOwner: TForeignPSInfo;
    function _Get_M_Owner: TBoldObjectReference;
    procedure _SetOwner(value: TForeignPSInfo);
  protected
  public
    procedure Hold(NewLocalTimeStamp: Integer); 
    procedure StartCheckIn(ValueSpace: IBoldValueSpace; KeepHold: Boolean); override;
    procedure InitializeHolding(ObjectId: TBoldObjectId; Owner: TForeignPSInfo); 
    procedure Put(ValueSpace: IBoldValueSpace; Hold: Boolean; NewLocalTimeStamp: Integer); 
    procedure Get(ValueSpace: IBoldValueSpace; CheckOut: Boolean; Holder: TForeignPSInfo); override;
    property M_ForeignTimeStamp: TBAInteger read _Get_M_ForeignTimeStamp;
    property M_HeldObjectInfo: TBoldObjectReference read _Get_M_HeldObjectInfo;
    property M_Owner: TBoldObjectReference read _Get_M_Owner;
    property ForeignTimeStamp: Integer read _GetForeignTimeStamp write _SetForeignTimeStamp;
    property HeldObjectInfo: THeldObjectInfo read _GetHeldObjectInfo write _SetHeldObjectInfo;
    property Owner: TForeignPSInfo read _GetOwner write _SetOwner;
  end;

  TOwnObjectInfo = class(TDistributableObjectInfo)
  private
    function _GetCheckedOutObjectInfo: TCheckedOutObjectInfo;
    function _Get_M_CheckedOutObjectInfo: TBoldObjectReference;
    procedure _SetCheckedOutObjectInfo(value: TCheckedOutObjectInfo);
  protected
  public
    procedure CheckOut(Holder: TForeignPSInfo); 
    procedure StartCheckIn(ValueSpace: IBoldValueSpace; KeepHold: Boolean); override;
    procedure Get(ValueSpace: IBoldValueSpace; CheckOut: Boolean; Holder: TForeignPSInfo); override;
    procedure CheckIn(ValueSpace: IBoldValueSpace; Release: Boolean; Holder: TForeignPSInfo); 
    procedure UnCheckOut(Holder: TForeignPSInfo); 
    property M_CheckedOutObjectInfo: TBoldObjectReference read _Get_M_CheckedOutObjectInfo;
    property CheckedOutObjectInfo: TCheckedOutObjectInfo read _GetCheckedOutObjectInfo write _SetCheckedOutObjectInfo;
  end;

  TForeignPSInfo = class(TPSInfo)
  private
    function _Get_M_LastSynchTimestamp: TBAInteger;
    function _GetLastSynchTimestamp: Integer;
    procedure _SetLastSynchTimestamp(NewValue: Integer);
    function _Get_M_OngoingSynchTimestamp: TBAInteger;
    function _GetOngoingSynchTimestamp: Integer;
    procedure _SetOngoingSynchTimestamp(NewValue: Integer);
    function _GetOwnedObjectInfos: TForeignObjectInfoList;
  protected
  public
    procedure AcknowledgeCheckIn(NewTimeStamp: Integer); 
    procedure FailCheckIn(FailedReleaseList: TBoldObjectIdList); 
    function IsCheckingIn: Boolean; 
    function IsSynching: Boolean; 
    property M_LastSynchTimestamp: TBAInteger read _Get_M_LastSynchTimestamp;
    property M_OngoingSynchTimestamp: TBAInteger read _Get_M_OngoingSynchTimestamp;
    property M_OwnedObjectInfos: TForeignObjectInfoList read _GetOwnedObjectInfos;
    property LastSynchTimestamp: Integer read _GetLastSynchTimestamp write _SetLastSynchTimestamp;
    property OngoingSynchTimestamp: Integer read _GetOngoingSynchTimestamp write _SetOngoingSynchTimestamp;
    property OwnedObjectInfos: TForeignObjectInfoList read _GetOwnedObjectInfos;
  end;

  TOwnPSInfo = class(TPSInfo)
  private
  protected
  public
  end;

  TBusinessClassesRootList = class(TBoldObjectList)
  protected
    function GetBoldObject(index: Integer): TBusinessClassesRoot;
    procedure SetBoldObject(index: Integer; NewObject: TBusinessClassesRoot);
  public
    function Includes(anObject: TBusinessClassesRoot): Boolean;
    function IndexOf(anObject: TBusinessClassesRoot): Integer;
    procedure Add(NewObject: TBusinessClassesRoot);
    function AddNew: TBusinessClassesRoot;
    procedure Insert(index: Integer; NewObject: TBusinessClassesRoot);
    property BoldObjects[index: Integer]: TBusinessClassesRoot read GetBoldObject write SetBoldObject; default;
  end;

  TCheckedOutObjectInfoList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TCheckedOutObjectInfo;
    procedure SetBoldObject(index: Integer; NewObject: TCheckedOutObjectInfo);
  public
    function Includes(anObject: TCheckedOutObjectInfo): Boolean;
    function IndexOf(anObject: TCheckedOutObjectInfo): Integer;
    procedure Add(NewObject: TCheckedOutObjectInfo);
    function AddNew: TCheckedOutObjectInfo;
    procedure Insert(index: Integer; NewObject: TCheckedOutObjectInfo);
    property BoldObjects[index: Integer]: TCheckedOutObjectInfo read GetBoldObject write SetBoldObject; default;
  end;

  TCheckingInObjectInfoList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TCheckingInObjectInfo;
    procedure SetBoldObject(index: Integer; NewObject: TCheckingInObjectInfo);
  public
    function Includes(anObject: TCheckingInObjectInfo): Boolean;
    function IndexOf(anObject: TCheckingInObjectInfo): Integer;
    procedure Add(NewObject: TCheckingInObjectInfo);
    function AddNew: TCheckingInObjectInfo;
    procedure Insert(index: Integer; NewObject: TCheckingInObjectInfo);
    property BoldObjects[index: Integer]: TCheckingInObjectInfo read GetBoldObject write SetBoldObject; default;
  end;

  TDistributableObjectInfoList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TDistributableObjectInfo;
    procedure SetBoldObject(index: Integer; NewObject: TDistributableObjectInfo);
  public
    function Includes(anObject: TDistributableObjectInfo): Boolean;
    function IndexOf(anObject: TDistributableObjectInfo): Integer;
    procedure Add(NewObject: TDistributableObjectInfo);
    function AddNew: TDistributableObjectInfo;
    procedure Insert(index: Integer; NewObject: TDistributableObjectInfo);
    property BoldObjects[index: Integer]: TDistributableObjectInfo read GetBoldObject write SetBoldObject; default;
  end;

  THeldObjectInfoList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): THeldObjectInfo;
    procedure SetBoldObject(index: Integer; NewObject: THeldObjectInfo);
  public
    function Includes(anObject: THeldObjectInfo): Boolean;
    function IndexOf(anObject: THeldObjectInfo): Integer;
    procedure Add(NewObject: THeldObjectInfo);
    function AddNew: THeldObjectInfo;
    procedure Insert(index: Integer; NewObject: THeldObjectInfo);
    property BoldObjects[index: Integer]: THeldObjectInfo read GetBoldObject write SetBoldObject; default;
  end;

  TMappingList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TMapping;
    procedure SetBoldObject(index: Integer; NewObject: TMapping);
  public
    function Includes(anObject: TMapping): Boolean;
    function IndexOf(anObject: TMapping): Integer;
    procedure Add(NewObject: TMapping);
    function AddNew: TMapping;
    procedure Insert(index: Integer; NewObject: TMapping);
    property BoldObjects[index: Integer]: TMapping read GetBoldObject write SetBoldObject; default;
  end;

  TPSInfoList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TPSInfo;
    procedure SetBoldObject(index: Integer; NewObject: TPSInfo);
  public
    function Includes(anObject: TPSInfo): Boolean;
    function IndexOf(anObject: TPSInfo): Integer;
    procedure Add(NewObject: TPSInfo);
    function AddNew: TPSInfo;
    procedure Insert(index: Integer; NewObject: TPSInfo);
    property BoldObjects[index: Integer]: TPSInfo read GetBoldObject write SetBoldObject; default;
  end;

  TForeignObjectInfoList = class(TDistributableObjectInfoList)
  protected
    function GetBoldObject(index: Integer): TForeignObjectInfo;
    procedure SetBoldObject(index: Integer; NewObject: TForeignObjectInfo);
  public
    function Includes(anObject: TForeignObjectInfo): Boolean;
    function IndexOf(anObject: TForeignObjectInfo): Integer;
    procedure Add(NewObject: TForeignObjectInfo);
    function AddNew: TForeignObjectInfo;
    procedure Insert(index: Integer; NewObject: TForeignObjectInfo);
    property BoldObjects[index: Integer]: TForeignObjectInfo read GetBoldObject write SetBoldObject; default;
  end;

  TOwnObjectInfoList = class(TDistributableObjectInfoList)
  protected
    function GetBoldObject(index: Integer): TOwnObjectInfo;
    procedure SetBoldObject(index: Integer; NewObject: TOwnObjectInfo);
  public
    function Includes(anObject: TOwnObjectInfo): Boolean;
    function IndexOf(anObject: TOwnObjectInfo): Integer;
    procedure Add(NewObject: TOwnObjectInfo);
    function AddNew: TOwnObjectInfo;
    procedure Insert(index: Integer; NewObject: TOwnObjectInfo);
    property BoldObjects[index: Integer]: TOwnObjectInfo read GetBoldObject write SetBoldObject; default;
  end;

  TForeignPSInfoList = class(TPSInfoList)
  protected
    function GetBoldObject(index: Integer): TForeignPSInfo;
    procedure SetBoldObject(index: Integer; NewObject: TForeignPSInfo);
  public
    function Includes(anObject: TForeignPSInfo): Boolean;
    function IndexOf(anObject: TForeignPSInfo): Integer;
    procedure Add(NewObject: TForeignPSInfo);
    function AddNew: TForeignPSInfo;
    procedure Insert(index: Integer; NewObject: TForeignPSInfo);
    property BoldObjects[index: Integer]: TForeignPSInfo read GetBoldObject write SetBoldObject; default;
  end;

  TOwnPSInfoList = class(TPSInfoList)
  protected
    function GetBoldObject(index: Integer): TOwnPSInfo;
    procedure SetBoldObject(index: Integer; NewObject: TOwnPSInfo);
  public
    function Includes(anObject: TOwnPSInfo): Boolean;
    function IndexOf(anObject: TOwnPSInfo): Integer;
    procedure Add(NewObject: TOwnPSInfo);
    function AddNew: TOwnPSInfo;
    procedure Insert(index: Integer; NewObject: TOwnPSInfo);
    property BoldObjects[index: Integer]: TOwnPSInfo read GetBoldObject write SetBoldObject; default;
  end;

function GeneratedCodeCRC: String;

implementation

{$ENDIF}

