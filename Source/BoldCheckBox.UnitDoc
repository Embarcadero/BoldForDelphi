<!DOCTYPE DLUnitDoc>
<DLUnitDoc ExplicitSummary="true" Version="$Header: /BfD/Source/BoldAwareGUI/BoldControls/BoldCheckBox.UnitDoc 6     11/23/01 1:23p Jeho $">
   <Classes>
      <Class Name="TBoldCheckBox">
         <Events>
            <Event Name="OnClick">
               <Summary></Summary>
               <Desc></Desc>
            </Event>
            <Event Name="OnDblClick">
               <Summary></Summary>
               <Desc></Desc>
            </Event>
            <Event Name="OnDragDrop">
               <Summary></Summary>
               <Desc></Desc>
            </Event>
            <Event Name="OnDragOver">
               <Summary></Summary>
               <Desc></Desc>
            </Event>
            <Event Name="OnEndDrag">
               <Summary></Summary>
               <Desc></Desc>
            </Event>
            <Event Name="OnEnter">
               <Summary></Summary>
               <Desc></Desc>
            </Event>
            <Event Name="OnExit">
               <Summary></Summary>
               <Desc></Desc>
            </Event>
            <Event Name="OnKeyDown">
               <Summary></Summary>
               <Desc></Desc>
            </Event>
            <Event Name="OnKeyPress">
               <Summary></Summary>
               <Desc></Desc>
            </Event>
            <Event Name="OnKeyUp">
               <Summary></Summary>
               <Desc></Desc>
            </Event>
            <Event Name="OnMouseDown">
               <Summary></Summary>
               <Desc></Desc>
            </Event>
            <Event Name="OnMouseMove">
               <Summary></Summary>
               <Desc></Desc>
            </Event>
            <Event Name="OnMouseUp">
               <Summary></Summary>
               <Desc></Desc>
            </Event>
            <Event Name="OnStartDrag">
               <Summary></Summary>
               <Desc></Desc>
            </Event>
         </Events>
         <Properties>
            <Property Name="Align">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="Alignment">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="BoldHandle">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="BoldProperties">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="Caption">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="Checked">
               <Summary>This read-only property is true if the checkbox is checked.</Summary>
               <Desc>Indicates if the checkbox is checked.</Desc>
            </Property>
            <Property Name="Color">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="Ctl3D">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="DragCursor">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="DragMode">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="EffectiveReadOnly">
               <Summary>This is a read-only property that indicates whether the value shown in the control can be modified by the user. </Summary>
               <Desc>The value is determined by the a combination of the <See Class="TBoldCustomCheckBox" Property="ReadOnly" Text="ReadOnly"/> property, and the <See Class="TBoldRenderer" Event="OnMayModify" Text="OnMayModify"/> event of the <See Class="TBoldCheckBoxStateFollowerController" Property="Renderer" Text="Renderer"/> used. To restrict the control to display only, set the <InlineCode>ReadOnly</InlineCode> property to <InlineCode>True</InlineCode>. Setting <InlineCode>ReadOnly</InlineCode> to <InlineCode>True</InlineCode> ensures that the state can not be altered.</Desc>
            </Property>
            <Property Name="Enabled">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="Font">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="ParentColor">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="ParentCtl3D">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="ParentFont">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="ParentShowHint">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="PopupMenu">
               <Summary> </Summary>
               <Desc></Desc>
            </Property>
            <Property Name="ReadOnly">
               <Summary>To restrict the control to display only, set the ReadOnly property to True.</Summary>
               <Desc>Even if <InlineCode>ReadOnly</InlineCode> is <InlineCode>False</InlineCode>, it may still not be possible for the user to change the value of the control. See <See Class="TBoldCustomCheckBox" Property="EffectiveReadOnly" Text="EffectiveReadOnly"/>.</Desc>
            </Property>
            <Property Name="ShowHint">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="State">
               <Summary>This property is overridden from TCustomCheckBox.State in order to add the Bold-aware properties of the control. </Summary>
               <Desc>Indicates the current state of the checkbox</Desc>
            </Property>
            <Property Name="TabOrder">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="TabStop">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="Visible">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
         </Properties>
         <Summary>TBoldCheckBox allows displaying and optionally editing a boolean value from the Business Object tier of Bold.</Summary>
         <Desc> <See Class="TBoldCustomCheckBox" Property="BoldHandle" Text="BoldHandle"/> specifies what to display, and the sub-properties of <See Class="TBoldCustomCheckBox" Property="BoldProperties" Text="BoldProperties"/> specify how the value is to be displayed/edited.
            <BH>Advanced information</BH>
            <P>TBoldCheckBox allows the editability of the control to be controlled by the underlying value.</P>
            <P>In order to do this <InlineCode>TBoldCheckBox</InlineCode> overrides the <InlineCode>ReadOnly</InlineCode> properties inherited from TCustomCheckBox.</P>
            <P>All behaviour is actually implemented by <InlineCode>TBoldCustomCheckBox</InlineCode>. <InlineCode>TBoldCheckBox</InlineCode> publishes many of the properties inherited from <InlineCode>TBoldCustomEdit</InlineCode> but does not introduce any new behavior.</P>
         </Desc>
      </Class>
      <Class Name="TBoldCustomCheckBox">
         <Methods>
            <Method Name="AfterMakeUptoDate">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="CMChanged">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="CMExit">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="CNCommand">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="Create">
               <Summary>Creates a new instance of TBoldCustomCheckBox.</Summary>
               <Desc>Use create to programmatically create a new instance of the control.</Desc>
            </Method>
            <Method Name="Destroy">
               <Summary>Destroys the instance</Summary>
               <Desc>In the destruction phase the component will handle unapplied data depending on the setting of <InlineCode>BoldProperties.ApplyPolicy</InlineCode>:
                  <UL>
                     <LI><InlineCode>bapChange, bapExit</InlineCode> - The value will be applied. If an exception is raised, the value will be discarded.</LI>
                     <LI><InlineCode>bapDemand</InlineCode> - The value will be discarded.</LI>
                  </UL>
               </Desc>
            </Method>
            <Method Name="GetBoldHandle">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetChecked">
               <Summary></Summary>
               <Desc>This method was introduced to resolve compatibility with Delphi 3. </Desc>
            </Method>
            <Method Name="GetContextType">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetExpression">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetFollower">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetState">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetVariableList">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="SetBoldDisplay">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="SetBoldHandle">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="SetExpression">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="SetReadOnly">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="SetState">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
         </Methods>
         <Properties>
            <Property Name="BoldHandle">
               <Summary>The handle used to get data from</Summary>
               <Desc>The <InlineCode>BoldHandle</InlineCode> property indicates which handle the control should follow. Since <InlineCode>TBoldCheckBox</InlineCode> is a single-value control it will follow the <InlineCode>Value</InlineCode> property of the handle. Note that for a <See Class="TBoldListHandle"/> this means the current element in the list. </Desc>
            </Property>
            <Property Name="BoldProperties">
               <Summary></Summary>
               <Desc>This property has a number of sub-properties that control the Bold-aware aspects of the control. In the context of this control, the sub-properties have the following meaning:
                  <BH>ApplyPolicy</BH>
                  <P>Determines when changes to the control will be applied to the underlying business objects.</P>
                  <UL>
                     <LI><InlineCode>bapChange</InlineCode> - means that changes will be applied after each change, i.e. directly after the control is clicked.</LI>
                     <LI><InlineCode>bapExit</InlineCode> - means that changes will be applied when focus leaves the control. Please note that some operations that seem to leave the control, e.g. selecting a menu-item do not actually move focus, and thus do not trigger apply.</LI>
                     <LI><InlineCode>bapDemand</InlineCode> - means that the changed value will continue to reside in the GUI until it is explicitly applied by calling <See Class="TBoldQueueable" Method="ApplyAll" Text="TBoldQueueable.ApplyAll"/> or <See Class="TBoldQueueable" Method="ApplyAllMatching" Text="TBoldQueueable.ApplyAllMatching"/>.<Br/>
This will in general be done by an OK button on the form. The changes can also be discarded by calling <See Class="TBoldQueueable" Method="DiscardChangeAll" Text="TBoldQueueable.DiscardChangeAll"/> or <See Class="TBoldQueueable" Method="DiscardChangeAllMatching" Text="TBoldQueueable.DiscardChangeAllMatching"/>.</LI>
                  </UL>
                  <BH>CleanOnEqual</BH>
                  <P>If <InlineCode>CleanOnEqual</InlineCode> is <InlineCode>True</InlineCode> then if the value of the control is changed, and then subsequently changed back to the original value before it has been applied to the business objects, then it will be regarded as unchanged, and removed form the Apply list.</P>
                  <BH>DragMode</BH>
                  <P>Determines what will happen if the user attempts to drag from the control. In general it would be highly counter-intuitive to drag an object to or from a checkbox, but it is possible, should you want to.</P>
                  <UL>
                     <LI><InlineCode>bdgNone</InlineCode> - No drag will be performed.</LI>
                     <LI><InlineCode>bdgSelection</InlineCode> - If <InlineCode>BoldHandle.Value</InlineCode> is a <InlineCode>TBoldObject</InlineCode> (or one of its subclasses) then it will be placed in the dragged objects list, <InlineCode>BoldGUIHandler.DraggedObjects</InlineCode>, otherwise no drag will be initiated.</LI>
                  </UL>
                  <P>If <InlineCode>OnStartDrag</InlineCode> has been set, this property is ignored altogether.</P>
                  <BH>DropMode</BH>
                  <P>Determines what will happen if the user attempts to drop on the control. This property only has an effect if <See Property="BoldHandle"/>.Value is a single-link role of an object. In this case the property has the following meaning:</P>
                  <UL>
                     <LI><InlineCode>bdpNone</InlineCode> - No action.</LI>
                     <LI><InlineCode>bdpInsert</InlineCode>, <InlineCode>bdpAppend</InlineCode> - If a single object is being dragged, and the link is <InlineCode>nil</InlineCode>, and the dragged object is of the correct type the link will be set to the dragged object.</LI>
                     <LI><InlineCode>bdpReplace</InlineCode> - If a single object is being dragged and the dragged object is of the correct type the link will be set to the dragged object.</LI>
                  </UL>
                  <BH>Expression</BH>
                  <P>The interpretation of this sub-property depends on the value of the <InlineCode>Renderer</InlineCode> sub-property. If <InlineCode>Renderer</InlineCode> is <InlineCode>(default)</InlineCode> then <InlineCode>Expression</InlineCode> will be interpreted as an OCL expression to be applied to <InlineCode>BoldHandle.Value</InlineCode>.</P>
                  <P>If an explicit renderer has been given, <InlineCode>Expression</InlineCode> is passed as a parameter to the methods/events of the renderer. The renderer is free to use the value in any way desired. For most custom renderers it is just ignored.</P>
                  <BH>Renderer</BH>
                  <P>This property identifies a <See Class="TBoldAsCheckBoxStateRenderer"/> that is used do define the mapping from <InlineCode>BoldHandle.Value</InlineCode> to the value displayed in the control. The default renderer will apply <InlineCode>Expression</InlineCode> to the value. This expression must evaluate to a <InlineCode>Boolean</InlineCode> value. If the value is <InlineCode>True</InlineCode>, the control will be checked, if it is <InlineCode>False</InlineCode> it will be unchecked, and if it is null (only possible if the expression is an attribute of an object, or an explicit <See Class="TBABoolean"/>) the checkbox will be grayed.</P>
                  <P>A custom renderer may perform any mapping.</P>
                  <BH>Representation</BH>
                  <P>The interpretation of this sub-property depends on the value of the <InlineCode>Renderer</InlineCode> sub-property. If <InlineCode>Renderer</InlineCode> is <InlineCode>(default)</InlineCode> then <InlineCode>Representation</InlineCode> will be ignored.</P>
                  <P>If an explicit renderer has been given, <InlineCode>Representation</InlineCode> is passed as a parameter to the methods/events of the renderer. The renderer is free to use the value in any way desired. For most custom renderers it is just ignored.</P>
               </Desc>
            </Property>
            <Property Name="Checked">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="EffectiveReadOnly">
               <Summary>Determines if the checkbox is editable</Summary>
               <Desc>
                  <P>Since there are many ways to prevent the checkbox from being edited, this property is used to determine the effective read-onlyness.</P>
                  <P>Setting <See Property="ReadOnly"/> to <InlineCode>false</InlineCode> does not guarantee editability. The value displayed may be derived, or may be blocked from editing by the application's business logic.</P>
               </Desc>
            </Property>
            <Property Name="Follower">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="ReadOnly">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="State">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
         </Properties>
         <Summary>TBoldCustomCheckBox allows displaying and optionally editing a boolean value from the Business Object tier of Bold.</Summary>
         <Desc><See Property="BoldHandle"/> specifies what to display, and the sub-properties of <See Property="BoldProperties"/> specify how the value is to be displayed/edited.
            <BH>Implementation</BH>
            <InlineCode>TBoldCustomCheckBox</InlineCode> keeps most of its properties protected. It is not intended to be used directly, but rather to be subclassed, where the subclasses publish and/or override the behaviour implemented by <InlineCode>TBoldCustomCheckBox</InlineCode>.
            <BH>Advanced information</BH>
            <P><InlineCode>TBoldCustomCheckBox</InlineCode> allows aspects of the displayed value i.e. editability to be controlled by the underlying value.</P>
In order to do this <InlineCode>TBoldCustomCheckBox</InlineCode> overrides <InlineCode>ReadOnly</InlineCode> property inherited from <InlineCode>TCustomCheckbox</InlineCode>. For this property there is a pair of properties where <InlineCode>ReadOnly</InlineCode> is the value set at design-time, while <InlineCode>EffectiveReadOnly</InlineCode> is the actual status of editability currently displayed. </Desc>
      </Class>
   </Classes>
   <Summary>Defines the BoldCheckBox.</Summary>
   <Desc>This unit defines the <InlineCode>TBoldCheckBox</InlineCode> component. It is a component primarily intended for displaying/manipulating boolean values.</Desc>
</DLUnitDoc>