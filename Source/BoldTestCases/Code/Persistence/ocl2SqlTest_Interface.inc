(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 11-06-2019 15:42:39         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

{$IFNDEF ocl2SqlTest_Interface.inc}
{$DEFINE ocl2SqlTest_Interface.inc}

{$IFNDEF ocl2SqlTest_unitheader}
unit ocl2SqlTest;
{$ENDIF}

interface

uses
  // interface uses
  // interface dependencies
  // attribute classes
  BoldAttributes,
  // other
  Classes,
  Controls, // for TDate
  SysUtils,
  BoldDefs,
  BoldSubscription,
  BoldDeriver,
  BoldElements,
  BoldDomainElement,
  BoldSystemRT,
  BoldSystem;

type
  { forward declarations of all classes }

  TBusinessClassesRoot = class;
  TBusinessClassesRootList = class;
  TBuilding = class;
  TBuildingList = class;
  TOwnership = class;
  TOwnershipList = class;
  TPerson = class;
  TPersonList = class;
  TResidentialBuilding = class;
  TResidentialBuildingList = class;

  TBusinessClassesRoot = class(TBoldObject)
  private
  protected
  public
  end;

  TBuilding = class(TBusinessClassesRoot)
  private
    function _Get_M_Address: TBAString;
    function _GetAddress: String;
    procedure _SetAddress(const NewValue: String);
    function _GetOwners: TPersonList;
    function _GetOwnership: TOwnershipList;
  protected
  public
    property M_Address: TBAString read _Get_M_Address;
    property M_Owners: TPersonList read _GetOwners;
    property M_Ownership: TOwnershipList read _GetOwnership;
    property Address: String read _GetAddress write _SetAddress;
    property Owners: TPersonList read _GetOwners;
    property Ownership: TOwnershipList read _GetOwnership;
  end;

  TOwnership = class(TBusinessClassesRoot)
  private
    function _GetOwners: TPerson;
    function _Get_M_Owners: TBoldObjectReference;
    function _GetOwnedBuildings: TBuilding;
    function _Get_M_OwnedBuildings: TBoldObjectReference;
  protected
  public
    property M_Owners: TBoldObjectReference read _Get_M_Owners;
    property M_OwnedBuildings: TBoldObjectReference read _Get_M_OwnedBuildings;
    property Owners: TPerson read _GetOwners;
    property OwnedBuildings: TBuilding read _GetOwnedBuildings;
  end;

  TPerson = class(TBusinessClassesRoot)
  private
    function _Get_M_Assets: TBACurrency;
    function _GetAssets: Currency;
    procedure _SetAssets(const NewValue: Currency);
    function _Get_M_FirstName: TBAString;
    function _GetFirstName: String;
    procedure _SetFirstName(const NewValue: String);
    function _Get_M_LastName: TBAString;
    function _GetLastName: String;
    procedure _SetLastName(const NewValue: String);
    function _Get_M_isMarried: TBABoolean;
    function _GetisMarried: Boolean;
    procedure _SetisMarried(const NewValue: Boolean);
    function _GetOwnedBuildings: TBuildingList;
    function _GetOwnership: TOwnershipList;
    function _GetHome: TResidentialBuilding;
    function _Get_M_Home: TBoldObjectReference;
    procedure _SetHome(const value: TResidentialBuilding);
    function _GetMother: TPerson;
    function _Get_M_Mother: TBoldObjectReference;
    procedure _SetMother(const value: TPerson);
    function _GetChildren: TPersonList;
  protected
  public
    property M_Assets: TBACurrency read _Get_M_Assets;
    property M_FirstName: TBAString read _Get_M_FirstName;
    property M_LastName: TBAString read _Get_M_LastName;
    property M_isMarried: TBABoolean read _Get_M_isMarried;
    property M_OwnedBuildings: TBuildingList read _GetOwnedBuildings;
    property M_Ownership: TOwnershipList read _GetOwnership;
    property M_Home: TBoldObjectReference read _Get_M_Home;
    property M_Mother: TBoldObjectReference read _Get_M_Mother;
    property M_Children: TPersonList read _GetChildren;
    property Assets: Currency read _GetAssets write _SetAssets;
    property FirstName: String read _GetFirstName write _SetFirstName;
    property LastName: String read _GetLastName write _SetLastName;
    property isMarried: Boolean read _GetisMarried write _SetisMarried;
    property OwnedBuildings: TBuildingList read _GetOwnedBuildings;
    property Ownership: TOwnershipList read _GetOwnership;
    property Home: TResidentialBuilding read _GetHome write _SetHome;
    property Mother: TPerson read _GetMother write _SetMother;
    property Children: TPersonList read _GetChildren;
  end;

  TResidentialBuilding = class(TBuilding)
  private
    function _Get_M_TotalRent: TBACurrency;
    function _GetTotalRent: Currency;
    procedure _SetTotalRent(const NewValue: Currency);
    function _GetResidents: TPersonList;
  protected
  public
    property M_TotalRent: TBACurrency read _Get_M_TotalRent;
    property M_Residents: TPersonList read _GetResidents;
    property TotalRent: Currency read _GetTotalRent write _SetTotalRent;
    property Residents: TPersonList read _GetResidents;
  end;

{$IFDEF UseBoldListEnumerator}
  TBusinessClassesRootListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TBusinessClassesRoot;
    property Current: TBusinessClassesRoot read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TBusinessClassesRootList = class(TBoldObjectList)
  protected
    function GetBoldObject(index: Integer): TBusinessClassesRoot;
    procedure SetBoldObject(index: Integer; NewObject: TBusinessClassesRoot);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TBusinessClassesRootListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TBusinessClassesRoot): Boolean;
    function IndexOf(anObject: TBusinessClassesRoot): Integer;
    procedure Add(NewObject: TBusinessClassesRoot);
    function AddNew: TBusinessClassesRoot;
    procedure Insert(index: Integer; NewObject: TBusinessClassesRoot);
    property BoldObjects[index: Integer]: TBusinessClassesRoot read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TBuildingListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TBuilding;
    property Current: TBuilding read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TBuildingList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TBuilding;
    procedure SetBoldObject(index: Integer; NewObject: TBuilding);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TBuildingListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TBuilding): Boolean;
    function IndexOf(anObject: TBuilding): Integer;
    procedure Add(NewObject: TBuilding);
    function AddNew: TBuilding;
    procedure Insert(index: Integer; NewObject: TBuilding);
    property BoldObjects[index: Integer]: TBuilding read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TOwnershipListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TOwnership;
    property Current: TOwnership read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TOwnershipList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TOwnership;
    procedure SetBoldObject(index: Integer; NewObject: TOwnership);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TOwnershipListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TOwnership): Boolean;
    function IndexOf(anObject: TOwnership): Integer;
    procedure Add(NewObject: TOwnership);
    function AddNew: TOwnership;
    procedure Insert(index: Integer; NewObject: TOwnership);
    property BoldObjects[index: Integer]: TOwnership read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TPersonListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TPerson;
    property Current: TPerson read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TPersonList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TPerson;
    procedure SetBoldObject(index: Integer; NewObject: TPerson);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TPersonListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TPerson): Boolean;
    function IndexOf(anObject: TPerson): Integer;
    procedure Add(NewObject: TPerson);
    function AddNew: TPerson;
    procedure Insert(index: Integer; NewObject: TPerson);
    property BoldObjects[index: Integer]: TPerson read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TResidentialBuildingListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TResidentialBuilding;
    property Current: TResidentialBuilding read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TResidentialBuildingList = class(TBuildingList)
  protected
    function GetBoldObject(index: Integer): TResidentialBuilding;
    procedure SetBoldObject(index: Integer; NewObject: TResidentialBuilding);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TResidentialBuildingListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TResidentialBuilding): Boolean;
    function IndexOf(anObject: TResidentialBuilding): Integer;
    procedure Add(NewObject: TResidentialBuilding);
    function AddNew: TResidentialBuilding;
    procedure Insert(index: Integer; NewObject: TResidentialBuilding);
    property BoldObjects[index: Integer]: TResidentialBuilding read GetBoldObject write SetBoldObject; default;
  end;

function GeneratedCodeCRC: String;

implementation

uses
  // implementation uses
  // implementation dependencies
  // other
  BoldGeneratedCodeDictionary;

{$ENDIF}
