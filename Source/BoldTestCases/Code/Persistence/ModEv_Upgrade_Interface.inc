(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 2001-01-18 15:30:35         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

{$IFNDEF ModEv_Upgrade_Interface.inc}
{$DEFINE ModEv_Upgrade_Interface.inc}

{$IFNDEF ModEv_Upgrade_unitheader}
unit ModEv_Upgrade;
{$ENDIF}

interface

uses
  {InterfaceUses}
  {InterfaceDependancies}
  BoldAttributes,{Attribute classes}
  Classes,
  Controls, // for TDate
  SysUtils,
  BoldDefs,
  BoldSubscription,
  BoldDeriver,
  BoldElements,
  BoldDomainElement,
  BoldSystemRT,
  BoldSystem;

type
  { forward declarations of all classes }

  TBusinessClassesRoot = class;
  TBusinessClassesRootList = class;
  TUpA = class;
  TUpAList = class;
  TUpB = class;
  TUpBList = class;
  TUpC = class;
  TUpCList = class;
  TUpD = class;
  TUpDList = class;

  TBusinessClassesRoot = class(TBoldObject)
  private
  protected
  public
  end;

  TUpA = class(TBusinessClassesRoot)
  private
    function _Get_M_Name: TBAInteger;
    function _GetName: Integer;
    procedure _SetName(NewValue: Integer);
    function _Get_M_NewName: TBAString;
    function _GetNewName: String;
    procedure _SetNewName(NewValue: String);
  protected
  public
    property M_Name: TBAInteger read _Get_M_Name;
    property M_NewName: TBAString read _Get_M_NewName;
    property Name: Integer read _GetName write _SetName;
    property NewName: String read _GetNewName write _SetNewName;
  end;

  TUpB = class(TBusinessClassesRoot)
  private
    function _Get_M_Amount: TBACurrency;
    function _GetAmount: Currency;
    procedure _SetAmount(NewValue: Currency);
    function _Get_M_EuroAmount: TBACurrency;
    function _GetEuroAmount: Currency;
    procedure _SetEuroAmount(NewValue: Currency);
  protected
  public
    property M_Amount: TBACurrency read _Get_M_Amount;
    property M_EuroAmount: TBACurrency read _Get_M_EuroAmount;
    property Amount: Currency read _GetAmount write _SetAmount;
    property EuroAmount: Currency read _GetEuroAmount write _SetEuroAmount;
  end;

  TUpC = class(TBusinessClassesRoot)
  private
    function _Get_M_name: TBAString;
    function _Getname: String;
    procedure _Setname(NewValue: String);
    function _GetUpD: TUpD;
    function _Get_M_UpD: TBoldObjectReference;
    procedure _SetUpD(value: TUpD);
  protected
  public
    property M_name: TBAString read _Get_M_name;
    property M_UpD: TBoldObjectReference read _Get_M_UpD;
    property name: String read _Getname write _Setname;
    property UpD: TUpD read _GetUpD write _SetUpD;
  end;

  TUpD = class(TBusinessClassesRoot)
  private
    function _Get_M_anAttr: TBAString;
    function _GetanAttr: String;
    procedure _SetanAttr(NewValue: String);
  protected
  public
    property M_anAttr: TBAString read _Get_M_anAttr;
    property anAttr: String read _GetanAttr write _SetanAttr;
  end;


  TBusinessClassesRootList = class(TBoldObjectList)
  protected
    function GetBoldObject(index: Integer): TBusinessClassesRoot;
    procedure SetBoldObject(index: Integer; NewObject: TBusinessClassesRoot);
  public
    function Includes(anObject: TBusinessClassesRoot): Boolean;
    function IndexOf(anObject: TBusinessClassesRoot): Integer;
    procedure Add(NewObject: TBusinessClassesRoot);
    procedure Insert(index: Integer; NewObject: TBusinessClassesRoot);
    property BoldObjects[index: Integer]: TBusinessClassesRoot read GetBoldObject write SetBoldObject; default;
  end;

  TUpAList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TUpA;
    procedure SetBoldObject(index: Integer; NewObject: TUpA);
  public
    function Includes(anObject: TUpA): Boolean;
    function IndexOf(anObject: TUpA): Integer;
    procedure Add(NewObject: TUpA);
    procedure Insert(index: Integer; NewObject: TUpA);
    property BoldObjects[index: Integer]: TUpA read GetBoldObject write SetBoldObject; default;
  end;

  TUpBList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TUpB;
    procedure SetBoldObject(index: Integer; NewObject: TUpB);
  public
    function Includes(anObject: TUpB): Boolean;
    function IndexOf(anObject: TUpB): Integer;
    procedure Add(NewObject: TUpB);
    procedure Insert(index: Integer; NewObject: TUpB);
    property BoldObjects[index: Integer]: TUpB read GetBoldObject write SetBoldObject; default;
  end;

  TUpCList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TUpC;
    procedure SetBoldObject(index: Integer; NewObject: TUpC);
  public
    function Includes(anObject: TUpC): Boolean;
    function IndexOf(anObject: TUpC): Integer;
    procedure Add(NewObject: TUpC);
    procedure Insert(index: Integer; NewObject: TUpC);
    property BoldObjects[index: Integer]: TUpC read GetBoldObject write SetBoldObject; default;
  end;

  TUpDList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TUpD;
    procedure SetBoldObject(index: Integer; NewObject: TUpD);
  public
    function Includes(anObject: TUpD): Boolean;
    function IndexOf(anObject: TUpD): Integer;
    procedure Add(NewObject: TUpD);
    procedure Insert(index: Integer; NewObject: TUpD);
    property BoldObjects[index: Integer]: TUpD read GetBoldObject write SetBoldObject; default;
  end;

function GeneratedCodeCRC: integer;

implementation

{$ENDIF}

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 