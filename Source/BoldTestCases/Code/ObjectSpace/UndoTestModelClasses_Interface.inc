(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 11-06-2019 15:36:30         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

{$IFNDEF UndoTestModelClasses_Interface.inc}
{$DEFINE UndoTestModelClasses_Interface.inc}

{$IFNDEF UndoTestModelClasses_unitheader}
unit UndoTestModelClasses;
{$ENDIF}

interface

uses
  // interface uses
  BoldValueInterfaces,
  // interface dependencies
  // attribute classes
  BoldAttributes,
  // other
  Classes,
  Controls, // for TDate
  SysUtils,
  BoldDefs,
  BoldSubscription,
  BoldDeriver,
  BoldElements,
  BoldDomainElement,
  BoldSystemRT,
  BoldSystem;

type
  { forward declarations of all classes }

  TTestModelClassesRoot = class;
  TTestModelClassesRootList = class;
  TAPersistentClass = class;
  TAPersistentClassList = class;
  TATransientClass = class;
  TATransientClassList = class;
  TBook = class;
  TBookList = class;
  TClassWithLink = class;
  TClassWithLinkList = class;
  TLinkClass = class;
  TLinkClassList = class;
  TSomeClass = class;
  TSomeClassList = class;
  TTopic = class;
  TTopicList = class;
  Tpartpartof = class;
  TpartpartofList = class;
  Ttopicbook = class;
  TtopicbookList = class;

  TTestModelClassesRoot = class(TBoldObject)
  private
  protected
  public
  end;

  TAPersistentClass = class(TTestModelClassesRoot)
  private
    function _Get_M_aString: TBAString;
    function _GetaString: String;
    procedure _SetaString(const NewValue: String);
    function _Getone: TATransientClass;
    function _Get_M_one: TBoldObjectReference;
    procedure _Setone(const value: TATransientClass);
  protected
  public
    function ValuesAreEqual(Value1: IBoldValue; Value2: IBoldValue; MemberExpressionName: string): Boolean; 
    property M_aString: TBAString read _Get_M_aString;
    property M_one: TBoldObjectReference read _Get_M_one;
    property aString: String read _GetaString write _SetaString;
    property one: TATransientClass read _Getone write _Setone;
  end;

  TATransientClass = class(TTestModelClassesRoot)
  private
    function _Get_M_aString: TBAString;
    function _GetaString: String;
    procedure _SetaString(const NewValue: String);
    function _Getmany: TAPersistentClassList;
  protected
  public
    function ValuesAreEqual(Value1: IBoldValue; Value2: IBoldValue; MemberExpressionName: string): Boolean; 
    property M_aString: TBAString read _Get_M_aString;
    property M_many: TAPersistentClassList read _Getmany;
    property aString: String read _GetaString write _SetaString;
    property many: TAPersistentClassList read _Getmany;
  end;

  TBook = class(TTestModelClassesRoot)
  private
    function _Get_M_Title: TBAString;
    function _GetTitle: String;
    procedure _SetTitle(const NewValue: String);
    function _GetTopic: TTopicList;
    function _Gettopicbook: TtopicbookList;
  protected
  public
    function ValuesAreEqual(Value1: IBoldValue; Value2: IBoldValue; MemberExpressionName: string): Boolean; 
    property M_Title: TBAString read _Get_M_Title;
    property M_Topic: TTopicList read _GetTopic;
    property M_topicbook: TtopicbookList read _Gettopicbook;
    property Title: String read _GetTitle write _SetTitle;
    property Topic: TTopicList read _GetTopic;
    property topicbook: TtopicbookList read _Gettopicbook;
  end;

  TClassWithLink = class(TTestModelClassesRoot)
  private
    function _Get_M_aString: TBAString;
    function _GetaString: String;
    procedure _SetaString(const NewValue: String);
    function _Getmany: TClassWithLinkList;
    function _GetmanyLinkClass: TLinkClassList;
    function _Getone: TClassWithLink;
    function _Get_M_one: TBoldObjectReference;
    procedure _Setone(const value: TClassWithLink);
    function _GetoneLinkClass: TLinkClass;
    function _Get_M_oneLinkClass: TBoldObjectReference;
  protected
  public
    function ValuesAreEqual(Value1: IBoldValue; Value2: IBoldValue; MemberExpressionName: string): Boolean; 
    property M_aString: TBAString read _Get_M_aString;
    property M_many: TClassWithLinkList read _Getmany;
    property M_manyLinkClass: TLinkClassList read _GetmanyLinkClass;
    property M_one: TBoldObjectReference read _Get_M_one;
    property M_oneLinkClass: TBoldObjectReference read _Get_M_oneLinkClass;
    property aString: String read _GetaString write _SetaString;
    property many: TClassWithLinkList read _Getmany;
    property manyLinkClass: TLinkClassList read _GetmanyLinkClass;
    property one: TClassWithLink read _Getone write _Setone;
    property oneLinkClass: TLinkClass read _GetoneLinkClass;
  end;

  TLinkClass = class(TTestModelClassesRoot)
  private
    function _Get_M_Attribute1: TBAString;
    function _GetAttribute1: String;
    procedure _SetAttribute1(const NewValue: String);
    function _Getone: TClassWithLink;
    function _Get_M_one: TBoldObjectReference;
    function _Getmany: TClassWithLink;
    function _Get_M_many: TBoldObjectReference;
  protected
  public
    function ValuesAreEqual(Value1: IBoldValue; Value2: IBoldValue; MemberExpressionName: string): Boolean; 
    property M_Attribute1: TBAString read _Get_M_Attribute1;
    property M_one: TBoldObjectReference read _Get_M_one;
    property M_many: TBoldObjectReference read _Get_M_many;
    property Attribute1: String read _GetAttribute1 write _SetAttribute1;
    property one: TClassWithLink read _Getone;
    property many: TClassWithLink read _Getmany;
  end;

  TSomeClass = class(TTestModelClassesRoot)
  private
    function _Get_M_aString: TBAString;
    function _GetaString: String;
    procedure _SetaString(const NewValue: String);
    function _Getpart: TSomeClassList;
    function _Getpartpartpartof: TpartpartofList;
    function _Getpartof: TSomeClassList;
    function _Getpartofpartpartof: TpartpartofList;
    function _Getnext: TSomeClass;
    function _Get_M_next: TBoldObjectReference;
    procedure _Setnext(const value: TSomeClass);
    function _Getprevious: TSomeClass;
    function _Get_M_previous: TBoldObjectReference;
    procedure _Setprevious(const value: TSomeClass);
    function _Getchild: TSomeClassList;
    function _Getparent: TSomeClass;
    function _Get_M_parent: TBoldObjectReference;
    procedure _Setparent(const value: TSomeClass);
  protected
  public
    function ValuesAreEqual(Value1: IBoldValue; Value2: IBoldValue; MemberExpressionName: string): Boolean; 
    property M_aString: TBAString read _Get_M_aString;
    property M_part: TSomeClassList read _Getpart;
    property M_partpartpartof: TpartpartofList read _Getpartpartpartof;
    property M_partof: TSomeClassList read _Getpartof;
    property M_partofpartpartof: TpartpartofList read _Getpartofpartpartof;
    property M_next: TBoldObjectReference read _Get_M_next;
    property M_previous: TBoldObjectReference read _Get_M_previous;
    property M_child: TSomeClassList read _Getchild;
    property M_parent: TBoldObjectReference read _Get_M_parent;
    property aString: String read _GetaString write _SetaString;
    property part: TSomeClassList read _Getpart;
    property partpartpartof: TpartpartofList read _Getpartpartpartof;
    property partof: TSomeClassList read _Getpartof;
    property partofpartpartof: TpartpartofList read _Getpartofpartpartof;
    property next: TSomeClass read _Getnext write _Setnext;
    property previous: TSomeClass read _Getprevious write _Setprevious;
    property child: TSomeClassList read _Getchild;
    property parent: TSomeClass read _Getparent write _Setparent;
  end;

  TTopic = class(TTestModelClassesRoot)
  private
    function _Get_M_name: TBAString;
    function _Getname: String;
    procedure _Setname(const NewValue: String);
    function _GetBook: TBookList;
    function _Gettopicbook: TtopicbookList;
  protected
  public
    function ValuesAreEqual(Value1: IBoldValue; Value2: IBoldValue; MemberExpressionName: string): Boolean; 
    property M_name: TBAString read _Get_M_name;
    property M_Book: TBookList read _GetBook;
    property M_topicbook: TtopicbookList read _Gettopicbook;
    property name: String read _Getname write _Setname;
    property Book: TBookList read _GetBook;
    property topicbook: TtopicbookList read _Gettopicbook;
  end;

  Tpartpartof = class(TTestModelClassesRoot)
  private
    function _Getpartof: TSomeClass;
    function _Get_M_partof: TBoldObjectReference;
    function _Getpart: TSomeClass;
    function _Get_M_part: TBoldObjectReference;
  protected
  public
    property M_partof: TBoldObjectReference read _Get_M_partof;
    property M_part: TBoldObjectReference read _Get_M_part;
    property partof: TSomeClass read _Getpartof;
    property part: TSomeClass read _Getpart;
  end;

  Ttopicbook = class(TTestModelClassesRoot)
  private
    function _GetBook: TBook;
    function _Get_M_Book: TBoldObjectReference;
    function _GetTopic: TTopic;
    function _Get_M_Topic: TBoldObjectReference;
  protected
  public
    property M_Book: TBoldObjectReference read _Get_M_Book;
    property M_Topic: TBoldObjectReference read _Get_M_Topic;
    property Book: TBook read _GetBook;
    property Topic: TTopic read _GetTopic;
  end;

{$IFDEF UseBoldListEnumerator}
  TTestModelClassesRootListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TTestModelClassesRoot;
    property Current: TTestModelClassesRoot read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TTestModelClassesRootList = class(TBoldObjectList)
  protected
    function GetBoldObject(index: Integer): TTestModelClassesRoot;
    procedure SetBoldObject(index: Integer; NewObject: TTestModelClassesRoot);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TTestModelClassesRootListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TTestModelClassesRoot): Boolean;
    function IndexOf(anObject: TTestModelClassesRoot): Integer;
    procedure Add(NewObject: TTestModelClassesRoot);
    function AddNew: TTestModelClassesRoot;
    procedure Insert(index: Integer; NewObject: TTestModelClassesRoot);
    property BoldObjects[index: Integer]: TTestModelClassesRoot read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TAPersistentClassListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TAPersistentClass;
    property Current: TAPersistentClass read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TAPersistentClassList = class(TTestModelClassesRootList)
  protected
    function GetBoldObject(index: Integer): TAPersistentClass;
    procedure SetBoldObject(index: Integer; NewObject: TAPersistentClass);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TAPersistentClassListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TAPersistentClass): Boolean;
    function IndexOf(anObject: TAPersistentClass): Integer;
    procedure Add(NewObject: TAPersistentClass);
    function AddNew: TAPersistentClass;
    procedure Insert(index: Integer; NewObject: TAPersistentClass);
    property BoldObjects[index: Integer]: TAPersistentClass read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TATransientClassListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TATransientClass;
    property Current: TATransientClass read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TATransientClassList = class(TTestModelClassesRootList)
  protected
    function GetBoldObject(index: Integer): TATransientClass;
    procedure SetBoldObject(index: Integer; NewObject: TATransientClass);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TATransientClassListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TATransientClass): Boolean;
    function IndexOf(anObject: TATransientClass): Integer;
    procedure Add(NewObject: TATransientClass);
    function AddNew: TATransientClass;
    procedure Insert(index: Integer; NewObject: TATransientClass);
    property BoldObjects[index: Integer]: TATransientClass read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TBookListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TBook;
    property Current: TBook read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TBookList = class(TTestModelClassesRootList)
  protected
    function GetBoldObject(index: Integer): TBook;
    procedure SetBoldObject(index: Integer; NewObject: TBook);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TBookListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TBook): Boolean;
    function IndexOf(anObject: TBook): Integer;
    procedure Add(NewObject: TBook);
    function AddNew: TBook;
    procedure Insert(index: Integer; NewObject: TBook);
    property BoldObjects[index: Integer]: TBook read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TClassWithLinkListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TClassWithLink;
    property Current: TClassWithLink read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TClassWithLinkList = class(TTestModelClassesRootList)
  protected
    function GetBoldObject(index: Integer): TClassWithLink;
    procedure SetBoldObject(index: Integer; NewObject: TClassWithLink);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TClassWithLinkListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TClassWithLink): Boolean;
    function IndexOf(anObject: TClassWithLink): Integer;
    procedure Add(NewObject: TClassWithLink);
    function AddNew: TClassWithLink;
    procedure Insert(index: Integer; NewObject: TClassWithLink);
    property BoldObjects[index: Integer]: TClassWithLink read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TLinkClassListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TLinkClass;
    property Current: TLinkClass read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TLinkClassList = class(TTestModelClassesRootList)
  protected
    function GetBoldObject(index: Integer): TLinkClass;
    procedure SetBoldObject(index: Integer; NewObject: TLinkClass);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TLinkClassListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TLinkClass): Boolean;
    function IndexOf(anObject: TLinkClass): Integer;
    procedure Add(NewObject: TLinkClass);
    function AddNew: TLinkClass;
    procedure Insert(index: Integer; NewObject: TLinkClass);
    property BoldObjects[index: Integer]: TLinkClass read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TSomeClassListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TSomeClass;
    property Current: TSomeClass read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TSomeClassList = class(TTestModelClassesRootList)
  protected
    function GetBoldObject(index: Integer): TSomeClass;
    procedure SetBoldObject(index: Integer; NewObject: TSomeClass);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TSomeClassListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TSomeClass): Boolean;
    function IndexOf(anObject: TSomeClass): Integer;
    procedure Add(NewObject: TSomeClass);
    function AddNew: TSomeClass;
    procedure Insert(index: Integer; NewObject: TSomeClass);
    property BoldObjects[index: Integer]: TSomeClass read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TTopicListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TTopic;
    property Current: TTopic read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TTopicList = class(TTestModelClassesRootList)
  protected
    function GetBoldObject(index: Integer): TTopic;
    procedure SetBoldObject(index: Integer; NewObject: TTopic);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TTopicListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TTopic): Boolean;
    function IndexOf(anObject: TTopic): Integer;
    procedure Add(NewObject: TTopic);
    function AddNew: TTopic;
    procedure Insert(index: Integer; NewObject: TTopic);
    property BoldObjects[index: Integer]: TTopic read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TpartpartofListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: Tpartpartof;
    property Current: Tpartpartof read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TpartpartofList = class(TTestModelClassesRootList)
  protected
    function GetBoldObject(index: Integer): Tpartpartof;
    procedure SetBoldObject(index: Integer; NewObject: Tpartpartof);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TpartpartofListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: Tpartpartof): Boolean;
    function IndexOf(anObject: Tpartpartof): Integer;
    procedure Add(NewObject: Tpartpartof);
    function AddNew: Tpartpartof;
    procedure Insert(index: Integer; NewObject: Tpartpartof);
    property BoldObjects[index: Integer]: Tpartpartof read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TtopicbookListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: Ttopicbook;
    property Current: Ttopicbook read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TtopicbookList = class(TTestModelClassesRootList)
  protected
    function GetBoldObject(index: Integer): Ttopicbook;
    procedure SetBoldObject(index: Integer; NewObject: Ttopicbook);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TtopicbookListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: Ttopicbook): Boolean;
    function IndexOf(anObject: Ttopicbook): Integer;
    procedure Add(NewObject: Ttopicbook);
    function AddNew: Ttopicbook;
    procedure Insert(index: Integer; NewObject: Ttopicbook);
    property BoldObjects[index: Integer]: Ttopicbook read GetBoldObject write SetBoldObject; default;
  end;

function GeneratedCodeCRC: String;

implementation

uses
  // implementation uses
  // implementation dependencies
  // other
  BoldGeneratedCodeDictionary;

{$ENDIF}
