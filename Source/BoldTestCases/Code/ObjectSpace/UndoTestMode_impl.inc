{**********************************************************}
   {                                                          }
   {       Bold for Delphi Stub File                          }
   {                                                          }
   {       Autogenerated file for method implementations      }
   {                                                          }
   {**********************************************************}

//
{$INCLUDE UndoTestModelClasses_Interface.inc}

function TBook.ValuesAreEqual(Value1: IBoldValue; Value2: IBoldValue; MemberExpressionName: string): Boolean;
begin
  Result := false;
  if MemberExpressionName = 'Title' then
    Result := CompareStr((Value1 as IBoldStringContent).AsString, (Value2 as IBoldStringContent).AsString) = 0;
end;

function TLinkClass.ValuesAreEqual(Value1: IBoldValue; Value2: IBoldValue; MemberExpressionName: string): Boolean;
begin
  Result := false;
  if MemberExpressionName = 'one' then
  begin
    Result := ((Value1 as IBoldObjectIdRef).Id.AsString = (Value2 as IBoldObjectIdRef).Id.AsString);
  end
  else if MemberExpressionName = 'many' then
  begin
    Result := ((Value1 as IBoldObjectIdRef).Id.AsString = (Value2 as IBoldObjectIdRef).Id.AsString);
  end
end;

function TSomeClass.ValuesAreEqual(Value1: IBoldValue; Value2: IBoldValue; MemberExpressionName: string): Boolean;
begin
  Result := false;
  if MemberExpressionName = 'aString' then
    Result := CompareStr((Value1 as IBoldStringContent).AsString, (Value2 as IBoldStringContent).AsString) = 0
  else if MemberExpressionName = 'parent' then
  begin
    if not Assigned((Value1 as IBoldObjectIdRef).id) and not Assigned((Value2 as IBoldobjectIdRef).id) then
      Result := True
    else if Assigned((Value1 as IBoldObjectIdRef).id) and Assigned((Value2 as IBoldobjectIdRef).id) then
      Result := ((Value1 as IBoldObjectIdRef).Id.AsString = (Value2 as IBoldObjectIdRef).Id.AsString)
    else
      Result := false;  
  end
  else if MemberExpressionName = 'previous' then
  begin
    if not Assigned((Value1 as IBoldObjectIdRef).id) and not Assigned((Value2 as IBoldobjectIdRef).id) then
      Result := True
    else
      Result := ((Value1 as IBoldObjectIdRef).Id.AsString = (Value2 as IBoldObjectIdRef).Id.AsString);
  end
  else if MemberExpressionName = 'next' then
  begin
    if not Assigned((Value1 as IBoldObjectIdRef).id) and not Assigned((Value2 as IBoldobjectIdRef).id) then
      Result := True
    else
      Result := ((Value1 as IBoldObjectIdRef).Id.AsString = (Value2 as IBoldObjectIdRef).Id.AsString);
  end;
  Result := Result and (Value1.BoldPersistenceState = Value2.BoldPersistenceState);
end;

function TTopic.ValuesAreEqual(Value1: IBoldValue; Value2: IBoldValue; MemberExpressionName: string): Boolean;
begin
  Result := false;
  if MemberExpressionName = 'name' then
    Result := CompareStr((Value1 as IBoldStringContent).AsString, (Value2 as IBoldStringContent).AsString) = 0;
end;

function TAPersistentClass.ValuesAreEqual(Value1: IBoldValue; Value2: IBoldValue; MemberExpressionName: string): Boolean;
begin
  Result := false;
  if MemberExpressionName = 'aString' then
    Result := CompareStr((Value1 as IBoldStringContent).AsString, (Value2 as IBoldStringContent).AsString) = 0
  else if MemberExpressionName = 'one' then
  begin
    Result := ((Value1 as IBoldObjectIdRef).Id.AsString = (Value2 as IBoldObjectIdRef).Id.AsString);
  end;
end;

function TATransientClass.ValuesAreEqual(Value1: IBoldValue; Value2: IBoldValue; MemberExpressionName: string): Boolean;
begin
  Result := false;
  if MemberExpressionName = 'aString' then
    Result := CompareStr((Value1 as IBoldStringContent).AsString, (Value2 as IBoldStringContent).AsString) = 0
//  else if MemberExpressionName = 'many' then
//  begin
//    Result := ((Value1 as IBoldObjectIdRef).Id.AsString = (Value2 as IBoldObjectIdRef).Id.AsString);
//  end;
end;


function TClassWithLink.ValuesAreEqual(Value1: IBoldValue; Value2: IBoldValue; MemberExpressionName: string): Boolean;
begin
  Result := false;
  if MemberExpressionName = 'aString' then
    Result := CompareStr((Value1 as IBoldStringContent).AsString, (Value2 as IBoldStringContent).AsString) = 0
  else if MemberExpressionName = 'one' then
  begin
    Result := ((Value1 as IBoldObjectIdRef).Id.AsString = (Value2 as IBoldObjectIdRef).Id.AsString);
  end
  else if MemberExpressionName = 'oneLinkClass' then
  begin
    Result := ((Value1 as IBoldObjectIdRefPair).Id1.AsString = (Value2 as IBoldObjectIdRefPair).Id1.AsString);
    Result := ((Value1 as IBoldObjectIdRefPair).Id2.AsString = (Value2 as IBoldObjectIdRefPair).Id2.AsString);
  end;
end;

