(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 11-06-2019 19:48:12         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

{$IFNDEF TestModel1_OptimisticLocking_Interface.inc}
{$DEFINE TestModel1_OptimisticLocking_Interface.inc}

{$IFNDEF TestModel1_OptimisticLocking_unitheader}
unit TestModel1_OptimisticLocking;
{$ENDIF}

interface

uses
  // interface uses
  // interface dependencies
  // attribute classes
  BoldAttributes,
  // other
  Classes,
  Controls, // for TDate
  SysUtils,
  BoldDefs,
  BoldSubscription,
  BoldDeriver,
  BoldElements,
  BoldDomainElement,
  BoldSystemRT,
  BoldSystem;

type
  { forward declarations of all classes }

  TBusinessClassesRoot = class;
  TBusinessClassesRootList = class;
  TClassA = class;
  TClassAList = class;
  TDocument = class;
  TDocumentList = class;
  THitList = class;
  THitListList = class;
  TLinkClass = class;
  TLinkClassList = class;
  TSong = class;
  TSongList = class;
  TThing = class;
  TThingList = class;
  ThitListsong = class;
  ThitListsongList = class;
  partpartof = class;
  partpartofList = class;

  TBusinessClassesRoot = class(TBoldObject)
  private
  protected
  public
  end;

  TClassA = class(TBusinessClassesRoot)
  private
    function _Get_M_aString: TBAString;
    function _GetaString: String;
    procedure _SetaString(const NewValue: String);
    function _Get_M_aBoolean: TBABoolean;
    function _GetaBoolean: Boolean;
    procedure _SetaBoolean(const NewValue: Boolean);
    function _Get_M_aByte: TBAByte;
    function _GetaByte: Byte;
    procedure _SetaByte(const NewValue: Byte);
    function _Get_M_aCurrency: TBACurrency;
    function _GetaCurrency: Currency;
    procedure _SetaCurrency(const NewValue: Currency);
    function _Get_M_aDate: TBADate;
    function _GetaDate: TDate;
    procedure _SetaDate(const NewValue: TDate);
    function _Get_M_aDateTime: TBADateTime;
    function _GetaDateTime: TDateTime;
    procedure _SetaDateTime(const NewValue: TDateTime);
    function _Get_M_aFloat: TBAFloat;
    function _GetaFloat: double;
    procedure _SetaFloat(const NewValue: double);
    function _Get_M_aInteger: TBAInteger;
    function _GetaInteger: Integer;
    procedure _SetaInteger(const NewValue: Integer);
    function _Get_M_aShortInt: TBAShortInt;
    function _GetaShortInt: ShortInt;
    procedure _SetaShortInt(const NewValue: ShortInt);
    function _Get_M_aSmallInt: TBASmallInt;
    function _GetaSmallInt: SmallInt;
    procedure _SetaSmallInt(const NewValue: SmallInt);
    function _Get_M_aTime: TBATime;
    function _GetaTime: TTime;
    procedure _SetaTime(const NewValue: TTime);
    function _Get_M_aWord: TBAWord;
    function _GetaWord: Word;
    procedure _SetaWord(const NewValue: Word);
    function _Get_M_aBlob: TBABlob;
    function _GetaBlob: String;
    procedure _SetaBlob(const NewValue: String);
    function _Get_M_aBlobContent: TBATypedBlob;
    function _GetaBlobContent: String;
    procedure _SetaBlobContent(const NewValue: String);
    function _Getpart: TClassAList;
    function _Getpartpartpartof: partpartofList;
    function _Getpartof: TClassAList;
    function _Getpartofpartpartof: partpartofList;
    function _Getchild: TClassAList;
    function _Getparent: TClassA;
    function _Get_M_parent: TBoldObjectReference;
    procedure _Setparent(const value: TClassA);
    function _Getnext: TClassA;
    function _Get_M_next: TBoldObjectReference;
    procedure _Setnext(const value: TClassA);
    function _Getprevious: TClassA;
    function _Get_M_previous: TBoldObjectReference;
    procedure _Setprevious(const value: TClassA);
  protected
  public
    property M_aString: TBAString read _Get_M_aString;
    property M_aBoolean: TBABoolean read _Get_M_aBoolean;
    property M_aByte: TBAByte read _Get_M_aByte;
    property M_aCurrency: TBACurrency read _Get_M_aCurrency;
    property M_aDate: TBADate read _Get_M_aDate;
    property M_aDateTime: TBADateTime read _Get_M_aDateTime;
    property M_aFloat: TBAFloat read _Get_M_aFloat;
    property M_aInteger: TBAInteger read _Get_M_aInteger;
    property M_aShortInt: TBAShortInt read _Get_M_aShortInt;
    property M_aSmallInt: TBASmallInt read _Get_M_aSmallInt;
    property M_aTime: TBATime read _Get_M_aTime;
    property M_aWord: TBAWord read _Get_M_aWord;
    property M_aBlob: TBABlob read _Get_M_aBlob;
    property M_aBlobContent: TBATypedBlob read _Get_M_aBlobContent;
    property M_part: TClassAList read _Getpart;
    property M_partpartpartof: partpartofList read _Getpartpartpartof;
    property M_partof: TClassAList read _Getpartof;
    property M_partofpartpartof: partpartofList read _Getpartofpartpartof;
    property M_child: TClassAList read _Getchild;
    property M_parent: TBoldObjectReference read _Get_M_parent;
    property M_next: TBoldObjectReference read _Get_M_next;
    property M_previous: TBoldObjectReference read _Get_M_previous;
    property aString: String read _GetaString write _SetaString;
    property aBoolean: Boolean read _GetaBoolean write _SetaBoolean;
    property aByte: Byte read _GetaByte write _SetaByte;
    property aCurrency: Currency read _GetaCurrency write _SetaCurrency;
    property aDate: TDate read _GetaDate write _SetaDate;
    property aDateTime: TDateTime read _GetaDateTime write _SetaDateTime;
    property aFloat: double read _GetaFloat write _SetaFloat;
    property aInteger: Integer read _GetaInteger write _SetaInteger;
    property aShortInt: ShortInt read _GetaShortInt write _SetaShortInt;
    property aSmallInt: SmallInt read _GetaSmallInt write _SetaSmallInt;
    property aTime: TTime read _GetaTime write _SetaTime;
    property aWord: Word read _GetaWord write _SetaWord;
    property aBlob: String read _GetaBlob write _SetaBlob;
    property aBlobContent: String read _GetaBlobContent write _SetaBlobContent;
    property part: TClassAList read _Getpart;
    property partpartpartof: partpartofList read _Getpartpartpartof;
    property partof: TClassAList read _Getpartof;
    property partofpartpartof: partpartofList read _Getpartofpartpartof;
    property child: TClassAList read _Getchild;
    property parent: TClassA read _Getparent write _Setparent;
    property next: TClassA read _Getnext write _Setnext;
    property previous: TClassA read _Getprevious write _Setprevious;
  end;

  TDocument = class(TBusinessClassesRoot)
  private
    function _Get_M_Title: TBAString;
    function _GetTitle: String;
    procedure _SetTitle(const NewValue: String);
    function _Get_M_text: TBAString;
    function _Gettext: String;
    procedure _Settext(const NewValue: String);
    function _GetParts: TDocumentList;
    function _GetPartOf: TDocument;
    function _Get_M_PartOf: TBoldObjectReference;
    procedure _SetPartOf(const value: TDocument);
  protected
  public
    property M_Title: TBAString read _Get_M_Title;
    property M_text: TBAString read _Get_M_text;
    property M_Parts: TDocumentList read _GetParts;
    property M_PartOf: TBoldObjectReference read _Get_M_PartOf;
    property Title: String read _GetTitle write _SetTitle;
    property text: String read _Gettext write _Settext;
    property Parts: TDocumentList read _GetParts;
    property PartOf: TDocument read _GetPartOf write _SetPartOf;
  end;

  THitList = class(TBusinessClassesRoot)
  private
    function _Get_M_Name: TBAString;
    function _GetName: String;
    procedure _SetName(const NewValue: String);
    function _GetSong: TSongList;
    function _GethitListsong: ThitListsongList;
  protected
  public
    property M_Name: TBAString read _Get_M_Name;
    property M_Song: TSongList read _GetSong;
    property M_hitListsong: ThitListsongList read _GethitListsong;
    property Name: String read _GetName write _SetName;
    property Song: TSongList read _GetSong;
    property hitListsong: ThitListsongList read _GethitListsong;
  end;

  TLinkClass = class(TBusinessClassesRoot)
  private
    function _Getmany: TThing;
    function _Get_M_many: TBoldObjectReference;
    function _Getone: TThing;
    function _Get_M_one: TBoldObjectReference;
  protected
  public
    property M_many: TBoldObjectReference read _Get_M_many;
    property M_one: TBoldObjectReference read _Get_M_one;
    property many: TThing read _Getmany;
    property one: TThing read _Getone;
  end;

  TSong = class(TBusinessClassesRoot)
  private
    function _Get_M_Title: TBAString;
    function _GetTitle: String;
    procedure _SetTitle(const NewValue: String);
    function _GetHitList: THitListList;
    function _GethitListsong: ThitListsongList;
  protected
  public
    property M_Title: TBAString read _Get_M_Title;
    property M_HitList: THitListList read _GetHitList;
    property M_hitListsong: ThitListsongList read _GethitListsong;
    property Title: String read _GetTitle write _SetTitle;
    property HitList: THitListList read _GetHitList;
    property hitListsong: ThitListsongList read _GethitListsong;
  end;

  TThing = class(TBusinessClassesRoot)
  private
    function _Get_M_aTransient: TBAString;
    function _GetaTransient: String;
    procedure _SetaTransient(const NewValue: String);
    function _Getone: TThing;
    function _Get_M_one: TBoldObjectReference;
    procedure _Setone(const value: TThing);
    function _GetoneLinkClass: TLinkClass;
    function _Get_M_oneLinkClass: TBoldObjectReference;
    function _Getmany: TThingList;
    function _GetmanyLinkClass: TLinkClassList;
  protected
  public
    property M_aTransient: TBAString read _Get_M_aTransient;
    property M_one: TBoldObjectReference read _Get_M_one;
    property M_oneLinkClass: TBoldObjectReference read _Get_M_oneLinkClass;
    property M_many: TThingList read _Getmany;
    property M_manyLinkClass: TLinkClassList read _GetmanyLinkClass;
    property aTransient: String read _GetaTransient write _SetaTransient;
    property one: TThing read _Getone write _Setone;
    property oneLinkClass: TLinkClass read _GetoneLinkClass;
    property many: TThingList read _Getmany;
    property manyLinkClass: TLinkClassList read _GetmanyLinkClass;
  end;

  ThitListsong = class(TBusinessClassesRoot)
  private
    function _GetHitList: THitList;
    function _Get_M_HitList: TBoldObjectReference;
    function _GetSong: TSong;
    function _Get_M_Song: TBoldObjectReference;
  protected
  public
    property M_HitList: TBoldObjectReference read _Get_M_HitList;
    property M_Song: TBoldObjectReference read _Get_M_Song;
    property HitList: THitList read _GetHitList;
    property Song: TSong read _GetSong;
  end;

  partpartof = class(TBusinessClassesRoot)
  private
    function _Getpartof: TClassA;
    function _Get_M_partof: TBoldObjectReference;
    function _Getpart: TClassA;
    function _Get_M_part: TBoldObjectReference;
  protected
  public
    property M_partof: TBoldObjectReference read _Get_M_partof;
    property M_part: TBoldObjectReference read _Get_M_part;
    property partof: TClassA read _Getpartof;
    property part: TClassA read _Getpart;
  end;

{$IFDEF UseBoldListEnumerator}
  TBusinessClassesRootListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TBusinessClassesRoot;
    property Current: TBusinessClassesRoot read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TBusinessClassesRootList = class(TBoldObjectList)
  protected
    function GetBoldObject(index: Integer): TBusinessClassesRoot;
    procedure SetBoldObject(index: Integer; NewObject: TBusinessClassesRoot);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TBusinessClassesRootListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TBusinessClassesRoot): Boolean;
    function IndexOf(anObject: TBusinessClassesRoot): Integer;
    procedure Add(NewObject: TBusinessClassesRoot);
    function AddNew: TBusinessClassesRoot;
    procedure Insert(index: Integer; NewObject: TBusinessClassesRoot);
    property BoldObjects[index: Integer]: TBusinessClassesRoot read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TClassAListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TClassA;
    property Current: TClassA read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TClassAList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TClassA;
    procedure SetBoldObject(index: Integer; NewObject: TClassA);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TClassAListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TClassA): Boolean;
    function IndexOf(anObject: TClassA): Integer;
    procedure Add(NewObject: TClassA);
    function AddNew: TClassA;
    procedure Insert(index: Integer; NewObject: TClassA);
    property BoldObjects[index: Integer]: TClassA read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TDocumentListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TDocument;
    property Current: TDocument read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TDocumentList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TDocument;
    procedure SetBoldObject(index: Integer; NewObject: TDocument);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TDocumentListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TDocument): Boolean;
    function IndexOf(anObject: TDocument): Integer;
    procedure Add(NewObject: TDocument);
    function AddNew: TDocument;
    procedure Insert(index: Integer; NewObject: TDocument);
    property BoldObjects[index: Integer]: TDocument read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  THitListListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: THitList;
    property Current: THitList read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  THitListList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): THitList;
    procedure SetBoldObject(index: Integer; NewObject: THitList);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: THitListListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: THitList): Boolean;
    function IndexOf(anObject: THitList): Integer;
    procedure Add(NewObject: THitList);
    function AddNew: THitList;
    procedure Insert(index: Integer; NewObject: THitList);
    property BoldObjects[index: Integer]: THitList read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TLinkClassListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TLinkClass;
    property Current: TLinkClass read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TLinkClassList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TLinkClass;
    procedure SetBoldObject(index: Integer; NewObject: TLinkClass);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TLinkClassListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TLinkClass): Boolean;
    function IndexOf(anObject: TLinkClass): Integer;
    procedure Add(NewObject: TLinkClass);
    function AddNew: TLinkClass;
    procedure Insert(index: Integer; NewObject: TLinkClass);
    property BoldObjects[index: Integer]: TLinkClass read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TSongListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TSong;
    property Current: TSong read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TSongList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TSong;
    procedure SetBoldObject(index: Integer; NewObject: TSong);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TSongListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TSong): Boolean;
    function IndexOf(anObject: TSong): Integer;
    procedure Add(NewObject: TSong);
    function AddNew: TSong;
    procedure Insert(index: Integer; NewObject: TSong);
    property BoldObjects[index: Integer]: TSong read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  TThingListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: TThing;
    property Current: TThing read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  TThingList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TThing;
    procedure SetBoldObject(index: Integer; NewObject: TThing);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: TThingListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: TThing): Boolean;
    function IndexOf(anObject: TThing): Integer;
    procedure Add(NewObject: TThing);
    function AddNew: TThing;
    procedure Insert(index: Integer; NewObject: TThing);
    property BoldObjects[index: Integer]: TThing read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  ThitListsongListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: ThitListsong;
    property Current: ThitListsong read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  ThitListsongList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): ThitListsong;
    procedure SetBoldObject(index: Integer; NewObject: ThitListsong);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: ThitListsongListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: ThitListsong): Boolean;
    function IndexOf(anObject: ThitListsong): Integer;
    procedure Add(NewObject: ThitListsong);
    function AddNew: ThitListsong;
    procedure Insert(index: Integer; NewObject: ThitListsong);
    property BoldObjects[index: Integer]: ThitListsong read GetBoldObject write SetBoldObject; default;
  end;

{$IFDEF UseBoldListEnumerator}
  partpartofListEnumerator = class(TBoldObjectListEnumerator)
  public
    function GetCurrent: partpartof;
    property Current: partpartof read GetCurrent;
  end;
{$ENDIF UseBoldListEnumerator}

  partpartofList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): partpartof;
    procedure SetBoldObject(index: Integer; NewObject: partpartof);
  public
{$IFDEF UseBoldListEnumerator}
    function GetEnumerator: partpartofListEnumerator;
{$ENDIF UseBoldListEnumerator}
    function Includes(anObject: partpartof): Boolean;
    function IndexOf(anObject: partpartof): Integer;
    procedure Add(NewObject: partpartof);
    function AddNew: partpartof;
    procedure Insert(index: Integer; NewObject: partpartof);
    property BoldObjects[index: Integer]: partpartof read GetBoldObject write SetBoldObject; default;
  end;

function GeneratedCodeCRC: String;

implementation

uses
  // implementation uses
  // implementation dependencies
  // other
  BoldGeneratedCodeDictionary;

{$ENDIF}
