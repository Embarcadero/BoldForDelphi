(************************************)
(*    This file is autogenerated    *)
(* Any manual changes will be LOST! *)
(************************************)

(* This file should be stored in the same directory    *)
(* as the form/datamodule with the corresponding model *)

// 

{ File generated  }

{$IFNDEF jehoBCBoldTest_Interface.inc}
{$DEFINE jehoBCBoldTest_Interface.inc}

{$IFNDEF jehoBCBoldTest_unitheader}
unit jehoBCBoldTest;
{$ENDIF}

interface

uses
  {InterfaceUses}
  {InterfaceDependancies}
  BoldAttributes,{Attribute classes}
  Classes,
  Controls, // for TDate
  SysUtils,
  BoldDefs,
  BoldSubscription,
  BoldDeriver,
  BoldElements,
  BoldDomainElement,
  BoldSystemRT,
  BoldSystem;

type
  { forward declarations of all classes }

  TBusinessClassesRoot = class;
  TBusinessClassesRootList = class;
  TClassA = class;
  TClassAList = class;
  TClassB = class;
  TClassBList = class;
  TClassDerivedA = class;
  TClassDerivedAList = class;
  TClassOclDerivedA = class;
  TClassOclDerivedAList = class;
  TClassMultiDerivedA = class;
  TClassMultiDerivedAList = class;

  TBusinessClassesRoot = class(TBoldObject)
  private
  protected
  public
  end;

  TClassA = class(TBusinessClassesRoot)
  private
    function _Get_M_aString: TBAString;
    function _GetaString: String;
    procedure _SetaString(NewValue: String);
    function _Get_M_aInteger: TBAInteger;
    function _GetaInteger: Integer;
    procedure _SetaInteger(NewValue: Integer);
    function _Get_M_aBoolean: TBABoolean;
    function _GetaBoolean: Boolean;
    procedure _SetaBoolean(NewValue: Boolean);
    function _Get_M_aByte: TBAByte;
    function _GetaByte: Byte;
    procedure _SetaByte(NewValue: Byte);
    function _Get_M_aCurrency: TBACurrency;
    function _GetaCurrency: Currency;
    procedure _SetaCurrency(NewValue: Currency);
    function _Get_M_aDate: TBADate;
    function _GetaDate: TDate;
    procedure _SetaDate(NewValue: TDate);
    function _Get_M_aDateTime: TBADateTime;
    function _GetaDateTime: TDateTime;
    procedure _SetaDateTime(NewValue: TDateTime);
    function _Get_M_aFloat: TBAFloat;
    function _GetaFloat: double;
    procedure _SetaFloat(NewValue: double);
    function _Get_M_aShortInt: TBAShortInt;
    function _GetaShortInt: ShortInt;
    procedure _SetaShortInt(NewValue: ShortInt);
    function _Get_M_aSmallInt: TBASmallInt;
    function _GetaSmallInt: SmallInt;
    procedure _SetaSmallInt(NewValue: SmallInt);
    function _Get_M_aTime: TBATime;
    function _GetaTime: TTime;
    procedure _SetaTime(NewValue: TTime);
    function _Get_M_aWord: TBAWord;
    function _GetaWord: Word;
    procedure _SetaWord(NewValue: Word);
    function _Get_M_aBlob: TBABlob;
    function _GetaBlob: String;
    procedure _SetaBlob(NewValue: String);
    function _Get_M_aBlobContent: TBATypedBlob;
    function _GetaBlobContent: String;
    procedure _SetaBlobContent(NewValue: String);
  protected
  public
    property M_aString: TBAString read _Get_M_aString;
    property M_aInteger: TBAInteger read _Get_M_aInteger;
    property M_aBoolean: TBABoolean read _Get_M_aBoolean;
    property M_aByte: TBAByte read _Get_M_aByte;
    property M_aCurrency: TBACurrency read _Get_M_aCurrency;
    property M_aDate: TBADate read _Get_M_aDate;
    property M_aDateTime: TBADateTime read _Get_M_aDateTime;
    property M_aFloat: TBAFloat read _Get_M_aFloat;
    property M_aShortInt: TBAShortInt read _Get_M_aShortInt;
    property M_aSmallInt: TBASmallInt read _Get_M_aSmallInt;
    property M_aTime: TBATime read _Get_M_aTime;
    property M_aWord: TBAWord read _Get_M_aWord;
    property M_aBlob: TBABlob read _Get_M_aBlob;
    property M_aBlobContent: TBATypedBlob read _Get_M_aBlobContent;
    property aString: String read _GetaString write _SetaString;
    property aInteger: Integer read _GetaInteger write _SetaInteger;
    property aBoolean: Boolean read _GetaBoolean write _SetaBoolean;
    property aByte: Byte read _GetaByte write _SetaByte;
    property aCurrency: Currency read _GetaCurrency write _SetaCurrency;
    property aDate: TDate read _GetaDate write _SetaDate;
    property aDateTime: TDateTime read _GetaDateTime write _SetaDateTime;
    property aFloat: double read _GetaFloat write _SetaFloat;
    property aShortInt: ShortInt read _GetaShortInt write _SetaShortInt;
    property aSmallInt: SmallInt read _GetaSmallInt write _SetaSmallInt;
    property aTime: TTime read _GetaTime write _SetaTime;
    property aWord: Word read _GetaWord write _SetaWord;
    property aBlob: String read _GetaBlob write _SetaBlob;
    property aBlobContent: String read _GetaBlobContent write _SetaBlobContent;
  end;

  TClassB = class(TClassA)
  private
    function _Get_M_bString: TBAString;
    function _GetbString: String;
    procedure _SetbString(NewValue: String);
    function _Get_M_bBlob: TBABlob;
    function _GetbBlob: String;
    procedure _SetbBlob(NewValue: String);
    function _Get_M_bBlobContent: TBATypedBlob;
    function _GetbBlobContent: String;
    procedure _SetbBlobContent(NewValue: String);
    function _Get_M_bBoolean: TBABoolean;
    function _GetbBoolean: Boolean;
    procedure _SetbBoolean(NewValue: Boolean);
    function _Get_M_bByte: TBAByte;
    function _GetbByte: Byte;
    procedure _SetbByte(NewValue: Byte);
    function _Get_M_bCurrency: TBACurrency;
    function _GetbCurrency: Currency;
    procedure _SetbCurrency(NewValue: Currency);
    function _Get_M_bDate: TBADate;
    function _GetbDate: TDate;
    procedure _SetbDate(NewValue: TDate);
    function _Get_M_bDateTime: TBADateTime;
    function _GetbDateTime: TDateTime;
    procedure _SetbDateTime(NewValue: TDateTime);
    function _Get_M_bInteger: TBAInteger;
    function _GetbInteger: Integer;
    procedure _SetbInteger(NewValue: Integer);
    function _Get_M_bFloat: TBAFloat;
    function _GetbFloat: double;
    procedure _SetbFloat(NewValue: double);
    function _Get_M_bShortInt: TBAShortInt;
    function _GetbShortInt: ShortInt;
    procedure _SetbShortInt(NewValue: ShortInt);
    function _Get_M_bSmallInt: TBASmallInt;
    function _GetbSmallInt: SmallInt;
    procedure _SetbSmallInt(NewValue: SmallInt);
    function _Get_M_bTIme: TBATime;
    function _GetbTIme: TTime;
    procedure _SetbTIme(NewValue: TTime);
    function _Get_M_bWord: TBAWord;
    function _GetbWord: Word;
    procedure _SetbWord(NewValue: Word);
  protected
  public
    property M_bString: TBAString read _Get_M_bString;
    property M_bBlob: TBABlob read _Get_M_bBlob;
    property M_bBlobContent: TBATypedBlob read _Get_M_bBlobContent;
    property M_bBoolean: TBABoolean read _Get_M_bBoolean;
    property M_bByte: TBAByte read _Get_M_bByte;
    property M_bCurrency: TBACurrency read _Get_M_bCurrency;
    property M_bDate: TBADate read _Get_M_bDate;
    property M_bDateTime: TBADateTime read _Get_M_bDateTime;
    property M_bInteger: TBAInteger read _Get_M_bInteger;
    property M_bFloat: TBAFloat read _Get_M_bFloat;
    property M_bShortInt: TBAShortInt read _Get_M_bShortInt;
    property M_bSmallInt: TBASmallInt read _Get_M_bSmallInt;
    property M_bTIme: TBATime read _Get_M_bTIme;
    property M_bWord: TBAWord read _Get_M_bWord;
    property bString: String read _GetbString write _SetbString;
    property bBlob: String read _GetbBlob write _SetbBlob;
    property bBlobContent: String read _GetbBlobContent write _SetbBlobContent;
    property bBoolean: Boolean read _GetbBoolean write _SetbBoolean;
    property bByte: Byte read _GetbByte write _SetbByte;
    property bCurrency: Currency read _GetbCurrency write _SetbCurrency;
    property bDate: TDate read _GetbDate write _SetbDate;
    property bDateTime: TDateTime read _GetbDateTime write _SetbDateTime;
    property bInteger: Integer read _GetbInteger write _SetbInteger;
    property bFloat: double read _GetbFloat write _SetbFloat;
    property bShortInt: ShortInt read _GetbShortInt write _SetbShortInt;
    property bSmallInt: SmallInt read _GetbSmallInt write _SetbSmallInt;
    property bTIme: TTime read _GetbTIme write _SetbTIme;
    property bWord: Word read _GetbWord write _SetbWord;
  end;

  TClassDerivedA = class(TClassA)
  private
    function _Get_M_aDerivedString: TBAString;
    function _GetaDerivedString: String;
    function _Get_M_aDerivedInteger: TBAInteger;
    function _GetaDerivedInteger: Integer;
    function _Get_M_aDerivedBoolean: TBABoolean;
    function _GetaDerivedBoolean: Boolean;
    function _Get_M_aDerivedByte: TBAByte;
    function _GetaDerivedByte: Byte;
    function _Get_M_aDerivedCurrency: TBACurrency;
    function _GetaDerivedCurrency: Currency;
    function _Get_M_aDerivedDate: TBADate;
    function _GetaDerivedDate: TDate;
    function _Get_M_aDerivedDateTime: TBADateTime;
    function _GetaDerivedDateTime: TDateTime;
    function _Get_M_aDerivedFloat: TBAFloat;
    function _GetaDerivedFloat: double;
    function _Get_M_aDerivedShortInt: TBAShortInt;
    function _GetaDerivedShortInt: ShortInt;
    function _Get_M_aDerivedSmallInt: TBASmallInt;
    function _GetaDerivedSmallInt: SmallInt;
    function _Get_M_aDerivedTime: TBATime;
    function _GetaDerivedTime: TTime;
    function _Get_M_ADerivedWord: TBAWord;
    function _GetADerivedWord: Word;
    function _Get_M_ADerivedBlob: TBABlob;
    function _GetADerivedBlob: String;
    function _Get_M_aDerivedBlobContent: TBATypedBlob;
    function _GetaDerivedBlobContent: String;
  protected
    procedure _aDerivedString_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    procedure _aDerivedInteger_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    procedure _aDerivedBoolean_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    procedure _aDerivedByte_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    procedure _aDerivedCurrency_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    procedure _aDerivedDate_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    procedure _aDerivedDateTime_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    procedure _aDerivedFloat_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    procedure _aDerivedShortInt_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    procedure _aDerivedSmallInt_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    procedure _aDerivedTime_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    procedure _ADerivedWord_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    procedure _ADerivedBlob_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    procedure _aDerivedBlobContent_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
//    procedure InitializeDerivedMembers; override;
    function GetDeriveMethodForMember( Member: TBoldMember ): TBoldDeriveAndResubscribe; override;
    function GetReverseDeriveMethodForMember( Member: TBoldMember ): TBoldReverseDerive; override;
  public
    property M_aDerivedString: TBAString read _Get_M_aDerivedString;
    property M_aDerivedInteger: TBAInteger read _Get_M_aDerivedInteger;
    property M_aDerivedBoolean: TBABoolean read _Get_M_aDerivedBoolean;
    property M_aDerivedByte: TBAByte read _Get_M_aDerivedByte;
    property M_aDerivedCurrency: TBACurrency read _Get_M_aDerivedCurrency;
    property M_aDerivedDate: TBADate read _Get_M_aDerivedDate;
    property M_aDerivedDateTime: TBADateTime read _Get_M_aDerivedDateTime;
    property M_aDerivedFloat: TBAFloat read _Get_M_aDerivedFloat;
    property M_aDerivedShortInt: TBAShortInt read _Get_M_aDerivedShortInt;
    property M_aDerivedSmallInt: TBASmallInt read _Get_M_aDerivedSmallInt;
    property M_aDerivedTime: TBATime read _Get_M_aDerivedTime;
    property M_ADerivedWord: TBAWord read _Get_M_ADerivedWord;
    property M_ADerivedBlob: TBABlob read _Get_M_ADerivedBlob;
    property M_aDerivedBlobContent: TBATypedBlob read _Get_M_aDerivedBlobContent;
    property aDerivedString: String read _GetaDerivedString;
    property aDerivedInteger: Integer read _GetaDerivedInteger;
    property aDerivedBoolean: Boolean read _GetaDerivedBoolean;
    property aDerivedByte: Byte read _GetaDerivedByte;
    property aDerivedCurrency: Currency read _GetaDerivedCurrency;
    property aDerivedDate: TDate read _GetaDerivedDate;
    property aDerivedDateTime: TDateTime read _GetaDerivedDateTime;
    property aDerivedFloat: double read _GetaDerivedFloat;
    property aDerivedShortInt: ShortInt read _GetaDerivedShortInt;
    property aDerivedSmallInt: SmallInt read _GetaDerivedSmallInt;
    property aDerivedTime: TTime read _GetaDerivedTime;
    property ADerivedWord: Word read _GetADerivedWord;
    property ADerivedBlob: String read _GetADerivedBlob;
    property aDerivedBlobContent: String read _GetaDerivedBlobContent;
  end;

  TClassOclDerivedA = class(TClassA)
  private
    function _Get_M_aOclDerivedBlob: TBABlob;
    function _GetaOclDerivedBlob: String;
    function _Get_M_aOclDerivedBlobContent: TBATypedBlob;
    function _GetaOclDerivedBlobContent: String;
    function _Get_M_aOclDerivedBoolean: TBABoolean;
    function _GetaOclDerivedBoolean: Boolean;
    function _Get_M_aOclDerivedByte: TBAByte;
    function _GetaOclDerivedByte: Byte;
    function _Get_M_aOclDerivedCurrency: TBACurrency;
    function _GetaOclDerivedCurrency: Currency;
    function _Get_M_aOclDerivedDateTime: TBADateTime;
    function _GetaOclDerivedDateTime: TDateTime;
    function _Get_M_aOclDerivedFloat: TBAFloat;
    function _GetaOclDerivedFloat: double;
    function _Get_M_aOclDerivedInteger: TBAInteger;
    function _GetaOclDerivedInteger: Integer;
    function _Get_M_aOclDerivedShortInt: TBAShortInt;
    function _GetaOclDerivedShortInt: ShortInt;
    function _Get_M_aOclDerivedSmallInt: TBASmallInt;
    function _GetaOclDerivedSmallInt: SmallInt;
    function _Get_M_aOclDerivedString: TBAString;
    function _GetaOclDerivedString: String;
    function _Get_M_aOclDerivedTime: TBATime;
    function _GetaOclDerivedTime: TTime;
    function _Get_M_aOclDerivedWord: TBAWord;
    function _GetaOclDerivedWord: Word;
    function _Get_M_aOclDerivedDate: TBADate;
    function _GetaOclDerivedDate: TDate;
  protected
  public
    property M_aOclDerivedBlob: TBABlob read _Get_M_aOclDerivedBlob;
    property M_aOclDerivedBlobContent: TBATypedBlob read _Get_M_aOclDerivedBlobContent;
    property M_aOclDerivedBoolean: TBABoolean read _Get_M_aOclDerivedBoolean;
    property M_aOclDerivedByte: TBAByte read _Get_M_aOclDerivedByte;
    property M_aOclDerivedCurrency: TBACurrency read _Get_M_aOclDerivedCurrency;
    property M_aOclDerivedDateTime: TBADateTime read _Get_M_aOclDerivedDateTime;
    property M_aOclDerivedFloat: TBAFloat read _Get_M_aOclDerivedFloat;
    property M_aOclDerivedInteger: TBAInteger read _Get_M_aOclDerivedInteger;
    property M_aOclDerivedShortInt: TBAShortInt read _Get_M_aOclDerivedShortInt;
    property M_aOclDerivedSmallInt: TBASmallInt read _Get_M_aOclDerivedSmallInt;
    property M_aOclDerivedString: TBAString read _Get_M_aOclDerivedString;
    property M_aOclDerivedTime: TBATime read _Get_M_aOclDerivedTime;
    property M_aOclDerivedWord: TBAWord read _Get_M_aOclDerivedWord;
    property M_aOclDerivedDate: TBADate read _Get_M_aOclDerivedDate;
    property aOclDerivedBlob: String read _GetaOclDerivedBlob;
    property aOclDerivedBlobContent: String read _GetaOclDerivedBlobContent;
    property aOclDerivedBoolean: Boolean read _GetaOclDerivedBoolean;
    property aOclDerivedByte: Byte read _GetaOclDerivedByte;
    property aOclDerivedCurrency: Currency read _GetaOclDerivedCurrency;
    property aOclDerivedDateTime: TDateTime read _GetaOclDerivedDateTime;
    property aOclDerivedFloat: double read _GetaOclDerivedFloat;
    property aOclDerivedInteger: Integer read _GetaOclDerivedInteger;
    property aOclDerivedShortInt: ShortInt read _GetaOclDerivedShortInt;
    property aOclDerivedSmallInt: SmallInt read _GetaOclDerivedSmallInt;
    property aOclDerivedString: String read _GetaOclDerivedString;
    property aOclDerivedTime: TTime read _GetaOclDerivedTime;
    property aOclDerivedWord: Word read _GetaOclDerivedWord;
    property aOclDerivedDate: TDate read _GetaOclDerivedDate;
  end;

  TClassMultiDerivedA = class(TClassOclDerivedA)
  private
    function _Get_M_aMultiDerivedBoolean: TBABoolean;
    function _GetaMultiDerivedBoolean: Boolean;
    function _Get_M_aMultiDerivedByte: TBAByte;
    function _GetaMultiDerivedByte: Byte;
    function _Get_M_aMultiDerivedCurrency: TBACurrency;
    function _GetaMultiDerivedCurrency: Currency;
    function _Get_M_aMultiDerivedDate: TBADate;
    function _GetaMultiDerivedDate: TDate;
    function _Get_M_aMultiDerivedDateTime: TBADateTime;
    function _GetaMultiDerivedDateTime: TDateTime;
    function _Get_M_aMultiDerivedFloat: TBAFloat;
    function _GetaMultiDerivedFloat: double;
    function _Get_M_aMultiDerivedInteger: TBAInteger;
    function _GetaMultiDerivedInteger: Integer;
    function _Get_M_aMultiDerivedShortInt: TBAShortInt;
    function _GetaMultiDerivedShortInt: ShortInt;
    function _Get_M_aMultiDerivedSmallInt: TBASmallInt;
    function _GetaMultiDerivedSmallInt: SmallInt;
    function _Get_M_aMultiDerivedTime: TBATime;
    function _GetaMultiDerivedTime: TTime;
    function _Get_M_aMultiDerivedString: TBAString;
    function _GetaMultiDerivedString: String;
    function _Get_M_aMultiDerivedWord: TBAWord;
    function _GetaMultiDerivedWord: Word;
  protected
  public
    property M_aMultiDerivedBoolean: TBABoolean read _Get_M_aMultiDerivedBoolean;
    property M_aMultiDerivedByte: TBAByte read _Get_M_aMultiDerivedByte;
    property M_aMultiDerivedCurrency: TBACurrency read _Get_M_aMultiDerivedCurrency;
    property M_aMultiDerivedDate: TBADate read _Get_M_aMultiDerivedDate;
    property M_aMultiDerivedDateTime: TBADateTime read _Get_M_aMultiDerivedDateTime;
    property M_aMultiDerivedFloat: TBAFloat read _Get_M_aMultiDerivedFloat;
    property M_aMultiDerivedInteger: TBAInteger read _Get_M_aMultiDerivedInteger;
    property M_aMultiDerivedShortInt: TBAShortInt read _Get_M_aMultiDerivedShortInt;
    property M_aMultiDerivedSmallInt: TBASmallInt read _Get_M_aMultiDerivedSmallInt;
    property M_aMultiDerivedTime: TBATime read _Get_M_aMultiDerivedTime;
    property M_aMultiDerivedString: TBAString read _Get_M_aMultiDerivedString;
    property M_aMultiDerivedWord: TBAWord read _Get_M_aMultiDerivedWord;
    property aMultiDerivedBoolean: Boolean read _GetaMultiDerivedBoolean;
    property aMultiDerivedByte: Byte read _GetaMultiDerivedByte;
    property aMultiDerivedCurrency: Currency read _GetaMultiDerivedCurrency;
    property aMultiDerivedDate: TDate read _GetaMultiDerivedDate;
    property aMultiDerivedDateTime: TDateTime read _GetaMultiDerivedDateTime;
    property aMultiDerivedFloat: double read _GetaMultiDerivedFloat;
    property aMultiDerivedInteger: Integer read _GetaMultiDerivedInteger;
    property aMultiDerivedShortInt: ShortInt read _GetaMultiDerivedShortInt;
    property aMultiDerivedSmallInt: SmallInt read _GetaMultiDerivedSmallInt;
    property aMultiDerivedTime: TTime read _GetaMultiDerivedTime;
    property aMultiDerivedString: String read _GetaMultiDerivedString;
    property aMultiDerivedWord: Word read _GetaMultiDerivedWord;
  end;


  TBusinessClassesRootList = class(TBoldObjectList)
  protected
    function GetBoldObject(index: Integer): TBusinessClassesRoot;
    procedure SetBoldObject(index: Integer; NewObject: TBusinessClassesRoot);
  public
    function Includes(anObject: TBusinessClassesRoot): Boolean;
    function IndexOf(anObject: TBusinessClassesRoot): Integer;
    procedure Add(NewObject: TBusinessClassesRoot);
    procedure Insert(index: Integer; NewObject: TBusinessClassesRoot);
    property BoldObjects[index: Integer]: TBusinessClassesRoot read GetBoldObject write SetBoldObject; default;
  end;

  TClassAList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TClassA;
    procedure SetBoldObject(index: Integer; NewObject: TClassA);
  public
    function Includes(anObject: TClassA): Boolean;
    function IndexOf(anObject: TClassA): Integer;
    procedure Add(NewObject: TClassA);
    procedure Insert(index: Integer; NewObject: TClassA);
    property BoldObjects[index: Integer]: TClassA read GetBoldObject write SetBoldObject; default;
  end;

  TClassBList = class(TClassAList)
  protected
    function GetBoldObject(index: Integer): TClassB;
    procedure SetBoldObject(index: Integer; NewObject: TClassB);
  public
    function Includes(anObject: TClassB): Boolean;
    function IndexOf(anObject: TClassB): Integer;
    procedure Add(NewObject: TClassB);
    procedure Insert(index: Integer; NewObject: TClassB);
    property BoldObjects[index: Integer]: TClassB read GetBoldObject write SetBoldObject; default;
  end;

  TClassDerivedAList = class(TClassAList)
  protected
    function GetBoldObject(index: Integer): TClassDerivedA;
    procedure SetBoldObject(index: Integer; NewObject: TClassDerivedA);
  public
    function Includes(anObject: TClassDerivedA): Boolean;
    function IndexOf(anObject: TClassDerivedA): Integer;
    procedure Add(NewObject: TClassDerivedA);
    procedure Insert(index: Integer; NewObject: TClassDerivedA);
    property BoldObjects[index: Integer]: TClassDerivedA read GetBoldObject write SetBoldObject; default;
  end;

  TClassOclDerivedAList = class(TClassAList)
  protected
    function GetBoldObject(index: Integer): TClassOclDerivedA;
    procedure SetBoldObject(index: Integer; NewObject: TClassOclDerivedA);
  public
    function Includes(anObject: TClassOclDerivedA): Boolean;
    function IndexOf(anObject: TClassOclDerivedA): Integer;
    procedure Add(NewObject: TClassOclDerivedA);
    procedure Insert(index: Integer; NewObject: TClassOclDerivedA);
    property BoldObjects[index: Integer]: TClassOclDerivedA read GetBoldObject write SetBoldObject; default;
  end;

  TClassMultiDerivedAList = class(TClassOclDerivedAList)
  protected
    function GetBoldObject(index: Integer): TClassMultiDerivedA;
    procedure SetBoldObject(index: Integer; NewObject: TClassMultiDerivedA);
  public
    function Includes(anObject: TClassMultiDerivedA): Boolean;
    function IndexOf(anObject: TClassMultiDerivedA): Integer;
    procedure Add(NewObject: TClassMultiDerivedA);
    procedure Insert(index: Integer; NewObject: TClassMultiDerivedA);
    property BoldObjects[index: Integer]: TClassMultiDerivedA read GetBoldObject write SetBoldObject; default;
  end;

function GeneratedCodeCRC: integer;

implementation

{$ENDIF}

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 