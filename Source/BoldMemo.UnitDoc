<!DOCTYPE DLUnitDoc>
<DLUnitDoc ExplicitSummary="true" Version="$Header: /BfD/Source/BoldAwareGUI/BoldControls/BoldMemo.UnitDoc 7     11/23/01 1:23p Jeho $">
   <Classes>
      <Class Name="TBoldCustomMemo">
         <Methods>
            <Method Name="AfterMakeUptoDate">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="CMEnter">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="CMExit">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="Change">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="Create">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="Destroy">
               <Summary></Summary>
               <Desc>In the destruction phase the component will handle unapplied data depending on the setting of <InlineCode>BoldProperties.ApplyPolicy</InlineCode>:
                  <UL>
                     <LI><InlineCode>bapChange, bapExit</InlineCode> - The value will be applied. If an exception is raised, the value will be discarded.</LI>
                     <LI><InlineCode>bapDemand</InlineCode> - The value will be discarded.</LI>
                  </UL>
               </Desc>
            </Method>
            <Method Name="DoEndDrag">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="DoStartDrag">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="DragDrop">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="DragOver">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetBoldHandle">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetColor">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetContextType">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetEffectiveColor">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetEffectiveFont">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetEffectiveReadOnly">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetExpression">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetFollower">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetFont">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetPopupMenu">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetText">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetVariableList">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="KeyPress">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="Loaded">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="SetBoldDisplay">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="SetBoldHandle">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="SetColor">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="SetEffectiveColor">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="SetExpression">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="SetFocused">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="SetFont">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="SetReadOnly">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="SetText">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="_FontChanged">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
         </Methods>
         <Properties>
            <Property Name="Alignment">
               <Summary>Set Alignment to specify how the text is aligned within the ClientRect of the control.</Summary>
               <Desc></Desc>
            </Property>
            <Property Name="BoldHandle">
               <Summary>The BoldHandle property indicates which handle the control should follow.</Summary>
               <Desc> Since TBoldCustomMemo is a single-value control (event though that single value may consist of several lines of text) it will follow the Value property of the handle. Note that for a TBoldListHandle this means the current element in the list. </Desc>
            </Property>
            <Property Name="BoldProperties">
               <Summary></Summary>
               <Desc>This property has a number of sub-properties that control the Bold-aware aspects of the control. In the context of this control, the sub-properties have the following meaning:
                  <P>ApplyPolicy</P>
                  <P>Determines when changes to the control will be applied to the underlying business objects.</P>
                  <UL>
                     <LI>bapChange means that changes will be applied after each change, i.e. after each character typed by the user.</LI>
                     <LI>bapExit means that changes will be applied when focus leaves the control. Please note that some operations that seem to leave the control, e.g. selecting a menu-item do not actually move focus, and thus do not trigger apply.</LI>
                     <LI>bapDemand means that the changed value will continue to reside in the GUI until it is explicitly applied by calling TBoldQueueable.ApplyAll or TBoldQueueable.ApplyAllMatching. This will in general be done by an OK button on the form. The changes can also be discarded by calling TBoldQueueable.DiscardChangeAll or TBoldQueueable.DiscardChangeAllMatching.</LI>
                  </UL>
                  <P>CleanOnEqual</P>
                  <P>If CleanOnEqual is true then if the value of the control is changed, and then subsequently changed back to the original value before it has been applied to the business objects, then it will be regarded as unchanged, and removed form the Apply list.</P>
                  <P>DragMode</P>
                  <P>Determines what will happen if the user attempts to drag from the control.</P>
                  <UL>
                     <LI>bdgNone No drag will be performed.</LI>
                     <LI>bdgSelection If BoldHandle.Value is a TBoldObject (or one of its subclasses) then it will be placed in the dragged objects list, BoldGUIHandler.DraggedObjects, otherwise no drag will be initiated.</LI>
                  </UL>
                  <P>It OnStartDrag has been set, this property is ignored altogether.</P>
                  <P>DropMode</P>
                  <P>Determines what will happen if the user attempts to drop on the control. This property only has an effect if TBoldCustomMemo.BoldHandle.Value is a single-link role of an object. In this case the property has the following meaning:</P>
                  <UL>
                     <LI>bdpNone No action.</LI>
                     <LI>bdpInsert, bdpAppend If a single object is being dragged, and the link is nil, and the dragged object is of the correct type the link will be set to the dragged object.</LI>
                     <LI>bdpReplace If a single object is being dragged and the dragged object is of the correct type the link will be set to the dragged object.</LI>
                  </UL>
                  <P>Expression
The interpretation of this sub-property depends on the value of the Renderer sub-property. If Renderer is (default) then Expression will be interpreted as an OCL expression to be applied to BoldHandle.Value.
If an explicit renderer has been given, Expression is passed as a parameter to the methods/events of the renderer. The renderer is free to use the value in any way desired. For most custom renderers it is just ignored.</P>
                  <P>Renderer</P>
                  <P>This property identifies a TBoldAsStringRenderer that is used do define the mapping from TBoldCustomMemo_BoldHandle.Value to the string displayed in the control. The default renderer will apply Expression to the value, and then take TBoldElement.StringRepresentation on the result. A custom renderer may perform any mapping.</P>
                  <P>Representation</P>
                  <P>The interpretation of this sub-property depends on the value of the Renderer sub-property. If Renderer is (default) then Representation will be interpreted as the StringRepresentation to be used on the element resulting from evaluating expression.
If an explicit renderer has been given, Representation is passed as a parameter to the methods/events of the renderer. The renderer is free to use the value in any way desired. For most custom renderers it is just ignored.</P>
               </Desc>
            </Property>
            <Property Name="Color">
               <Summary>This property may be set at design-time to indicate the desired background color of the control.</Summary>
               <Desc> The actual runtime color of the background will be determined by the TBoldAsStringRenderer_SetColor method of the TBoldStringFollowerController_Renderer used.
                  <P>The actual color currently used can be obtained from the TBoldCustomMemo_EffectiveColor property.</P>
               </Desc>
            </Property>
            <Property Name="EffectiveColor">
               <Summary>This is a read-only property that for the current actual background color of the control.</Summary>
               <Desc>The value of the property will be determined by the TBoldAsStringRenderer_SetColor method of the TBoldStringFollowerController_Renderer used, based on the TBoldCustomMemo_Color property. The default renderer will simply use the value of Color.</Desc>
            </Property>
            <Property Name="EffectiveFont">
               <Summary>This is a read-only property that for the current actual font used by the control. </Summary>
               <Desc>The actual runtime font will be determined by the TBoldAsStringRenderer_SetFont method of TBoldStringFollowerController_Renderer used, based on the TBoldCustomMemo_Font property. The default renderer will simply use the value of Font. </Desc>
            </Property>
            <Property Name="EffectiveReadOnly">
               <Summary>This is a read-only property that indicates whether the value shown in the control can be modified by the user. </Summary>
               <Desc>The value is determined by the a combination of the TBoldCustomMemo_ReadOnly property, and the TBoldRenderer_OnMayModify event of the TBoldStringFollowerController_Renderer s used. To restrict the control to display only, set the ReadOnly property to True. Setting ReadOnly to True ensures that the text can not be altered, while still allowing the user to select text. The selected text can then be manipulated by the application, or copied to the Clipboard.
                  <P>Note</P>
                  <P>Even if ReadOnly is False, it may still not be possible to edit the text of the control. See TBoldCustomMemo_ReadOnly</P>
               </Desc>
            </Property>
            <Property Name="Follower">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="Font">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="MaxLength">
               <Summary>Limits the number of characters that can be entered in the memo</Summary>
               <Desc>The maximum number of characters that can be entered is determined from this property, and the length of the attribute (if the value is a string attribute of a business object). The smallest value will be used.</Desc>
            </Property>
            <Property Name="ReadOnly">
               <Summary>To restrict the control to display only, set the ReadOnly property to True.</Summary>
               <Desc> Setting ReadOnly to True ensures that the text can not be altered, while still allowing the user to select text. The selected text can then be manipulated by the application, or copied to the Clipboard.
                  <P>Note</P>
                  <P>Even if ReadOnly is False, it may still not be possible to edit the text of the control. Se TBoldCustomMemo_EffectiveReadOnly.</P>
               </Desc>
            </Property>
            <Property Name="Text">
               <Summary></Summary>
               <Desc>This property is overridden from TCustomMemo.Text in order to add the Bold-aware properties of the control. </Desc>
            </Property>
         </Properties>
         <Summary>TBoldCustomMemo allows displaying and optionally editing a string value from the Business Object tier of Bold.</Summary>
         <Desc> TBoldCustomMemo_BoldHandle specifies what to display, and the sub-properties of TBoldCustomMemo_BoldProperties specify how the value is to be displayed/edited.
            <BH>Implementation</BH>
TBoldCustomMemo keeps most of its properties protected. It is not intended to be used directly, but rather to be subclassed, where the subclasses publish and/or override the behaviour implemented by TBoldCustomMemo.
            <BH>Advanced information</BH>
TBoldCustomMemo allows all aspects of the displayed text, i.e. the font, color and editability to be controlled by the underlying value.
In order to do this TBoldCustomMemo overrides the Font and Color and ReadOnly properties inherited from TCustomEdit. For each of these properties there is a pair of properties where e.g. Color is the value set at design-time, while EffectiveColor is the actual color currently displayed. </Desc>
      </Class>
      <Class Name="TBoldMemo">
         <Events>
            <Event Name="OnChange">
               <Summary></Summary>
               <Desc></Desc>
            </Event>
            <Event Name="OnClick">
               <Summary></Summary>
               <Desc></Desc>
            </Event>
            <Event Name="OnContextPopup">
               <Summary></Summary>
               <Desc></Desc>
            </Event>
            <Event Name="OnDblClick">
               <Summary></Summary>
               <Desc></Desc>
            </Event>
            <Event Name="OnDragDrop">
               <Summary></Summary>
               <Desc></Desc>
            </Event>
            <Event Name="OnDragOver">
               <Summary></Summary>
               <Desc></Desc>
            </Event>
            <Event Name="OnEndDock">
               <Summary></Summary>
               <Desc></Desc>
            </Event>
            <Event Name="OnEndDrag">
               <Summary></Summary>
               <Desc></Desc>
            </Event>
            <Event Name="OnEnter">
               <Summary></Summary>
               <Desc></Desc>
            </Event>
            <Event Name="OnExit">
               <Summary></Summary>
               <Desc></Desc>
            </Event>
            <Event Name="OnKeyDown">
               <Summary></Summary>
               <Desc></Desc>
            </Event>
            <Event Name="OnKeyPress">
               <Summary></Summary>
               <Desc></Desc>
            </Event>
            <Event Name="OnKeyUp">
               <Summary></Summary>
               <Desc></Desc>
            </Event>
            <Event Name="OnMouseDown">
               <Summary></Summary>
               <Desc></Desc>
            </Event>
            <Event Name="OnMouseMove">
               <Summary></Summary>
               <Desc></Desc>
            </Event>
            <Event Name="OnMouseUp">
               <Summary></Summary>
               <Desc></Desc>
            </Event>
            <Event Name="OnStartDock">
               <Summary></Summary>
               <Desc></Desc>
            </Event>
            <Event Name="OnStartDrag">
               <Summary></Summary>
               <Desc></Desc>
            </Event>
         </Events>
         <Properties>
            <Property Name="Align">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="Alignment">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="Anchors">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="BoldHandle">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="BoldProperties">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="BorderStyle">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="CharCase">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="Color">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="Constraints">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="Ctl3D">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="DragCursor">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="DragKind">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="DragMode">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="Enabled">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="Font">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="HideSelection">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="MaxLength">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="ParentColor">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="ParentCtl3D">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="ParentFont">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="ParentShowHint">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="PasswordChar">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="PopupMenu">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="ReadOnly">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="ScrollBars">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="ShowHint">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="TabOrder">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="TabStop">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="Text">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="Visible">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="WantReturns">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="WantTabs">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="Wordwrap">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
         </Properties>
         <Summary>TBoldMemo allows displaying and optionally editing a string value from the Business Object tier of Bold.</Summary>
         <Desc> TBoldCustomMemo_BoldHandle specifies what to display, and the sub-properties of TBoldCustomMemo_BoldProperties specify how the value is to be displayed/edited.
            <BH>Advanced information</BH>
TBoldMemo allows all aspects of the displayed text, i.e. the font, color and editability to be controlled by the underlying value.
In order to do this TBoldMemo overrides the Font and Color and ReadOnly properties inherited from TCustomMemo. For each of these properties there is a pair of properties where e.g. Color is the value set at design-time, while EffectiveColor is the actual color currently displayed.
All behaviour is actually implemented by TBoldCustomMemo. TBoldMemo publishes many of the properties inherited from TBoldCustomMemo but does not introduce any new behavior. </Desc>
      </Class>
   </Classes>
   <Interfaces>
   </Interfaces>
   <Summary>Defines the TBoldMemo control</Summary>
   <Desc>This unit defines the TBoldMemo control. It is used for editing text.</Desc>
</DLUnitDoc>