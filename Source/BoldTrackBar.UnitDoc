<!DOCTYPE DLUnitDoc>
<DLUnitDoc ExplicitSummary="true" Version="$Header: /BfD/Source/BoldAwareGUI/BoldControls/BoldTrackBar.UnitDoc 6     01-10-22 12:42 Jeho $">
   <Classes>
      <Class Name="TBoldTrackBar">
         <Methods>
            <Method Name="AfterMakeUptoDate">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="CMExit">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="CNHScroll">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="CNVScroll">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="Create">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="Destroy">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="DoEndDrag">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="DoStartDrag">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="DragDrop">
               <Summary>Triggers OnDragDrop if its assigned</Summary>
               <Desc><InlineCode>DragDrop</InlineCode> will trigger the <InlineCode>OnDragDrop</InlineCode> event of it has been defined. Otherwise, it will pass control to the <InlineCode>BoldProperties</InlineCode> dragdrop method. </Desc>
            </Method>
            <Method Name="DragOver">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetBoldHandle">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetContextType">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetExpression">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetFollower">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetPopupMenu">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetPosition">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="GetVariableList">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="SetBoldDisplay">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="SetBoldHandle">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="SetExpression">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="SetPosition">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="SetReadOnly">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="WMKeyDown">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
            <Method Name="WMLButtonDown">
               <Summary></Summary>
               <Desc></Desc>
            </Method>
         </Methods>
         <Properties>
            <Property Name="BoldHandle">
               <Summary>The BoldHandle property indicates which handle the control should follow. </Summary>
               <Desc>Since <InlineCode>TBoldTrackBar</InlineCode> is a single-value control it will follow the <InlineCode>Value</InlineCode> property of the handle. Note that for a <InlineCode>TBoldListHandle</InlineCode> this means the current element in the list. </Desc>
            </Property>
            <Property Name="BoldProperties">
               <Summary>This property has a number of sub-properties that control the Bold-aware aspects of the control. </Summary>
               <Desc> </Desc>
               <Desc>This property has a number of sub-properties that control the Bold-aware aspects of the control. In the context of this control, the sub-properties have the following meaning:
                  <BH>ApplyPolicy</BH>
                  <UL>
                     <LI><InlineCode>bapExit</InlineCode> - Changes are applied to the business object tier when the control loses focus.</LI>
                     <LI><InlineCode>bapChange</InlineCode> - Changes are immediately applied.</LI>
                     <LI><InlineCode>bapDemand</InlineCode> - The changed value will continue to reside in the GUI until it is explicitly applied by calling <See Class="TBoldQueueable" Text="TBoldQueueable.ApplyAll" Method="ApplyAll"/> or <See Class="TBoldQueueable" Method="ApplyAllMatching" Text="TBoldQueueable.ApplyAllMatching"/>. This will in general be done by an OK button on the form. The changes can also be discarded by calling <See Class="TBoldQueueable" Method="DiscardChangeAll" Text="TBoldQueueable.DiscardChangeAll"/> or <See Class="TBoldQueueable" Method="DiscardChangeAllMatching" Text="TBoldQueueable.DiscardChangeAllMatching"/>.</LI>
                  </UL>
                  <BH>CleanOnEqual</BH>
                  <P>If <InlineCode>CleanOnEqual</InlineCode> is <InlineCode>true</InlineCode> then if the value of the control is changed, and then subsequently changed back to the original value before it has been applied to the business objects, then it will be regarded as unchanged, and removed form the Apply list.</P>
                  <BH>DragMode</BH>
                  <P>Determines what will happen if the user attempts to drag from the control. In general it would be highly counter-intuitive to drag an object to or from a track bar, but it is possible, should you want to.</P>
                  <UL>
                     <LI><InlineCode>bdgNone</InlineCode> - No drag will be performed.</LI>
                     <LI><InlineCode>bdgSelection</InlineCode> - If <InlineCode>BoldHandle.Value</InlineCode> is a <InlineCode>TBoldObject</InlineCode> (or one of its subclasses) then it will be placed in the dragged objects list, <InlineCode>BoldGUIHandler.DraggedObjects</InlineCode>, otherwise no drag will be initiated.</LI>
                  </UL>
                  <P>If <InlineCode>OnStartDrag</InlineCode> has been set, this property is ignored altogether.</P>
                  <BH>DropMode</BH>
                  <P>Determines what will happen if the user attempts to drop on the control. This property only has an effect if <InlineCode>BoldHandle.Value</InlineCode> is a single-link role of an object. In this case the property has the following meaning:</P>
                  <UL>
                     <LI><InlineCode>bdpNone</InlineCode> - No action.</LI>
                     <LI><InlineCode>bdpInsert</InlineCode>, <InlineCode>bdpAppend</InlineCode> - If a single object is being dragged, and the link is <InlineCode>nil</InlineCode>, and the dragged object is of the correct type the link will be set to the dragged object.</LI>
                     <LI><InlineCode>bdpReplace</InlineCode> - If a single object is being dragged and the dragged object is of the correct type the link will be set to the dragged object.</LI>
                  </UL>
                  <BH>Expression</BH>
                  <P>The interpretation of this sub-property depends on the value of the <InlineCode>Renderer</InlineCode> sub-property. If <InlineCode>Renderer</InlineCode> is <InlineCode>(default)</InlineCode> then <InlineCode>Expression</InlineCode> will be interpreted as an OCL expression to be applied to <InlineCode>BoldHandle.Value</InlineCode>.</P>
                  <P>If an explicit renderer has been given, Expression is passed as a parameter to the methods/events of the renderer. The renderer is free to use the value in any way desired.</P>
                  <P>For most custom renderers it is just ignored.</P>
                  <BH>Renderer</BH>
                  <P>This property identifies a <See Class="TBoldAsIntegerRenderer"/> that is used do define the mapping from  the <InlineCode>BoldHandle.Value</InlineCode> to the value displayed in the control. The default renderer will apply <InlineCode>Expression</InlineCode> to the value. This expression must evaluate to a numeric value.</P>
                  <P>A custom renderer may perform any mapping.</P>
                  <BH>Representation</BH>
The interpretation of this sub-property depends on the value of the <InlineCode>Renderer</InlineCode> sub-property. If <InlineCode>Renderer</InlineCode> is <InlineCode>(default)</InlineCode> then <InlineCode>Representation</InlineCode> will be ignored.
                  <P>If an explicit renderer has been given, <InlineCode>Representation</InlineCode> is passed as a parameter to the methods/events of the renderer. The renderer is free to use the value in any way desired. For most custom renderers it is just ignored.</P>
               </Desc>
            </Property>
            <Property Name="EffectiveReadOnly">
               <Summary>A combination of user settings and business object tier constraints</Summary>
               <Desc><InlineCode>EffectiveReadOnly</InlineCode> determines if the trackbar can be altered. Setting <See Property="ReadOnly"/> to <InlineCode>True</InlineCode> is necessary, but not sufficient to allow editing, as the trackbar may display a derived value or a value that for other reasons can not be changed (locking, security reasons etc).</Desc>
            </Property>
            <Property Name="Follower">
               <Summary></Summary>
               <Desc></Desc>
            </Property>
            <Property Name="Position">
               <Summary></Summary>
               <Desc>This property is overridden from <InlineCode>TTrackBar.Position</InlineCode> in order to add the Bold-aware properties of the control. This is the property that is related to a value in the object space. </Desc>
            </Property>
            <Property Name="ReadOnly">
               <Summary>Controls changeability of control</Summary>
               <Desc>To restrict the control to display only, set the <InlineCode>ReadOnly</InlineCode> property to <InlineCode>True</InlineCode>. Setting <InlineCode>ReadOnly</InlineCode> to <InlineCode>True</InlineCode> ensures that the position can not be altered.
                  <Note>Even if <InlineCode>ReadOnly</InlineCode> is <InlineCode>False</InlineCode>, it may still not be possible to change the <InlineCode>Position</InlineCode> of the control. See <See Property="EffectiveReadOnly"/>.</Note>
               </Desc>
            </Property>
         </Properties>
         <Summary>TBoldTrackBar allows displaying and optionally editing a numeric value from the Business Object tier of Bold.</Summary>
         <Desc> Use <InlineCode>TBoldTrackBar</InlineCode> to put a track bar on a form. A track bar represents a position along a continuum using a slider and, optionally, tick marks. A track bar can also display a selected range marked by triangular ticks at the starting and ending positions of the selection.
            <P>During program execution, the slider can be moved to the desired position by dragging it with the mouse or by clicking the mouse on the bar. To use the keyboard to move the slider, press the arrow keys or the PageUp and PageDown keys.</P>
            <P>Only the <InlineCode>Position</InlineCode> property is Bold-aware.</P>
            <P><See Property="BoldHandle"/> specifies what to display, and the sub-properties of <See Property="BoldProperties"/> specify how the value is to be displayed/edited.</P>
         </Desc>
      </Class>
   </Classes>
   <Summary>Defined TBoldTrackBar</Summary>
   <Desc>This unit defines TBoldTrackBar, a bold aware track bar.</Desc>
</DLUnitDoc>