   {**********************************************************}
   {                                                          }
   {       Bold for Delphi Stub File                          }
   {                                                          }
   {       Autogenerated file for method implementations      }
   {                                                          }
   {**********************************************************}

{$INCLUDE BuildingClasses_Interface.inc}

const
  Streets: array[0..4] of string = ('Bold Drive', '5th Avenue', 'Rose Path', 'Select Avenue', 'Pebble Road');

procedure TResidential_Building.ChargeRent;
var
  O, R: Integer;
begin

  if Residents.Count = 0 then
    raise Exception.Create('No residents to pay rent');

  if Owners.Count = 0 then
    raise Exception.Create('No owners to receive payment');

  for R := Residents.Count - 1 downto 0 do
    with Residents[R] do
    begin
      Assets := Assets - TotalRent / Residents.Count;
      if assets < 0 then
      begin
        Home := nil;
        ShowMessage(Format('%s %s has been evicted from %s due to lack of funds', [firstname, lastName, address]));
      end;
    end;

  for O := 0 to Owners.Count - 1 do
    with Owners[O] do
      Assets := Assets + TotalRent / Owners.Count;
end;


procedure TResidential_Building.CompleteCreate;
begin
  inherited;
  Address := IntToStr(Random(250)) + ' ' + streets[random(5)];
  TotalRent := random(100) * 100;
  Capacity := random(20);
end;


